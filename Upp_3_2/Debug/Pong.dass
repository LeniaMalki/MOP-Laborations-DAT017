
./Debug/Pong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
// ########################################################## STARTUP #######################################################################################
__attribute__((naked)) __attribute__((section(".start_section"))) void startup(void)
{
    __asm__ volatile(" LDR R0,=0x2001C000\n"); /* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
    __asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
    __asm__ volatile(" BL main\n");   /* call main */
20000004:	f000 fbde 	bl	200007c4 <main>
    __asm__ volatile(".L1: B .L1\n"); /* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:
    // void (*check_ball_collision)(struct tobj*);
} OBJECT, *POBJECT;

// ############################################################ DELAYS ########################################################################################
void delay_250ns(void)
{
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
    /* SystemCoreClock = 168000000 */
    *STK_CTRL = 0;
20000014:	4b0c      	ldr	r3, [pc, #48]	; (20000048 <delay_250ns+0x38>)
20000016:	2200      	movs	r2, #0
20000018:	601a      	str	r2, [r3, #0]
    *STK_LOAD = ((168 / 4) - 1);
2000001a:	4b0c      	ldr	r3, [pc, #48]	; (2000004c <delay_250ns+0x3c>)
2000001c:	2229      	movs	r2, #41	; 0x29
2000001e:	601a      	str	r2, [r3, #0]
    *STK_VAL = 0;
20000020:	4b0b      	ldr	r3, [pc, #44]	; (20000050 <delay_250ns+0x40>)
20000022:	2200      	movs	r2, #0
20000024:	601a      	str	r2, [r3, #0]
    *STK_CTRL = 5;
20000026:	4b08      	ldr	r3, [pc, #32]	; (20000048 <delay_250ns+0x38>)
20000028:	2205      	movs	r2, #5
2000002a:	601a      	str	r2, [r3, #0]
    while((*STK_CTRL & 0x10000) == 0)
2000002c:	46c0      	nop			; (mov r8, r8)
2000002e:	4b06      	ldr	r3, [pc, #24]	; (20000048 <delay_250ns+0x38>)
20000030:	681a      	ldr	r2, [r3, #0]
20000032:	2380      	movs	r3, #128	; 0x80
20000034:	025b      	lsls	r3, r3, #9
20000036:	4013      	ands	r3, r2
20000038:	d0f9      	beq.n	2000002e <delay_250ns+0x1e>
        ;
    *STK_CTRL = 0;
2000003a:	4b03      	ldr	r3, [pc, #12]	; (20000048 <delay_250ns+0x38>)
2000003c:	2200      	movs	r2, #0
2000003e:	601a      	str	r2, [r3, #0]
}
20000040:	46c0      	nop			; (mov r8, r8)
20000042:	46bd      	mov	sp, r7
20000044:	bd80      	pop	{r7, pc}
20000046:	46c0      	nop			; (mov r8, r8)
20000048:	e000e010 	and	lr, r0, r0, lsl r0
2000004c:	e000e014 	and	lr, r0, r4, lsl r0
20000050:	e000e018 	and	lr, r0, r8, lsl r0

20000054 <delay_micro>:

void delay_micro(unsigned int us)
{
20000054:	b580      	push	{r7, lr}
20000056:	b084      	sub	sp, #16
20000058:	af00      	add	r7, sp, #0
2000005a:	6078      	str	r0, [r7, #4]
#ifdef SIMULATOR
    us = us / 1000;
    us++;
#endif
    for(int i = 0; i < us; i++) {
2000005c:	2300      	movs	r3, #0
2000005e:	60fb      	str	r3, [r7, #12]
20000060:	e00a      	b.n	20000078 <delay_micro+0x24>
        delay_250ns();
20000062:	f7ff ffd5 	bl	20000010 <delay_250ns>
        delay_250ns();
20000066:	f7ff ffd3 	bl	20000010 <delay_250ns>
        delay_250ns();
2000006a:	f7ff ffd1 	bl	20000010 <delay_250ns>
        delay_250ns();
2000006e:	f7ff ffcf 	bl	20000010 <delay_250ns>
    for(int i = 0; i < us; i++) {
20000072:	68fb      	ldr	r3, [r7, #12]
20000074:	3301      	adds	r3, #1
20000076:	60fb      	str	r3, [r7, #12]
20000078:	68fb      	ldr	r3, [r7, #12]
2000007a:	687a      	ldr	r2, [r7, #4]
2000007c:	429a      	cmp	r2, r3
2000007e:	d8f0      	bhi.n	20000062 <delay_micro+0xe>
    }
}
20000080:	46c0      	nop			; (mov r8, r8)
20000082:	46c0      	nop			; (mov r8, r8)
20000084:	46bd      	mov	sp, r7
20000086:	b004      	add	sp, #16
20000088:	bd80      	pop	{r7, pc}

2000008a <delay_milli>:

void delay_milli(unsigned int ms)
{
2000008a:	b580      	push	{r7, lr}
2000008c:	b082      	sub	sp, #8
2000008e:	af00      	add	r7, sp, #0
20000090:	6078      	str	r0, [r7, #4]
#ifdef SIMULATOR
    ms = ms / 1000;
    ms++;
#endif
    while(ms > 0) {
20000092:	e007      	b.n	200000a4 <delay_milli+0x1a>
        delay_micro(1000);
20000094:	23fa      	movs	r3, #250	; 0xfa
20000096:	009b      	lsls	r3, r3, #2
20000098:	0018      	movs	r0, r3
2000009a:	f7ff ffdb 	bl	20000054 <delay_micro>
        ms--;
2000009e:	687b      	ldr	r3, [r7, #4]
200000a0:	3b01      	subs	r3, #1
200000a2:	607b      	str	r3, [r7, #4]
    while(ms > 0) {
200000a4:	687b      	ldr	r3, [r7, #4]
200000a6:	2b00      	cmp	r3, #0
200000a8:	d1f4      	bne.n	20000094 <delay_milli+0xa>
    }
}
200000aa:	46c0      	nop			; (mov r8, r8)
200000ac:	46c0      	nop			; (mov r8, r8)
200000ae:	46bd      	mov	sp, r7
200000b0:	b002      	add	sp, #8
200000b2:	bd80      	pop	{r7, pc}

200000b4 <delay_500ns>:

void delay_500ns(void)
{
200000b4:	b580      	push	{r7, lr}
200000b6:	af00      	add	r7, sp, #0
    delay_250ns();
200000b8:	f7ff ffaa 	bl	20000010 <delay_250ns>
    delay_250ns();
200000bc:	f7ff ffa8 	bl	20000010 <delay_250ns>
}
200000c0:	46c0      	nop			; (mov r8, r8)
200000c2:	46bd      	mov	sp, r7
200000c4:	bd80      	pop	{r7, pc}

200000c6 <graphic_ctrl_bit_set>:

// ############################################################ FUNTCIONS ########################################################################################

void graphic_ctrl_bit_set(uint8_t x)
{
200000c6:	b580      	push	{r7, lr}
200000c8:	b084      	sub	sp, #16
200000ca:	af00      	add	r7, sp, #0
200000cc:	0002      	movs	r2, r0
200000ce:	1dfb      	adds	r3, r7, #7
200000d0:	701a      	strb	r2, [r3, #0]
    uint8_t c;
    c = *GPIO_ODR_LOW;
200000d2:	4a10      	ldr	r2, [pc, #64]	; (20000114 <graphic_ctrl_bit_set+0x4e>)
200000d4:	200f      	movs	r0, #15
200000d6:	183b      	adds	r3, r7, r0
200000d8:	7812      	ldrb	r2, [r2, #0]
200000da:	701a      	strb	r2, [r3, #0]
    c &= ~B_SELECT;
200000dc:	183b      	adds	r3, r7, r0
200000de:	183a      	adds	r2, r7, r0
200000e0:	7812      	ldrb	r2, [r2, #0]
200000e2:	2104      	movs	r1, #4
200000e4:	438a      	bics	r2, r1
200000e6:	701a      	strb	r2, [r3, #0]
    c |= (~B_SELECT & x);
200000e8:	1dfb      	adds	r3, r7, #7
200000ea:	781b      	ldrb	r3, [r3, #0]
200000ec:	b25b      	sxtb	r3, r3
200000ee:	2204      	movs	r2, #4
200000f0:	4393      	bics	r3, r2
200000f2:	b25a      	sxtb	r2, r3
200000f4:	183b      	adds	r3, r7, r0
200000f6:	781b      	ldrb	r3, [r3, #0]
200000f8:	b25b      	sxtb	r3, r3
200000fa:	4313      	orrs	r3, r2
200000fc:	b25a      	sxtb	r2, r3
200000fe:	183b      	adds	r3, r7, r0
20000100:	701a      	strb	r2, [r3, #0]
    *GPIO_ODR_LOW = c;
20000102:	4a04      	ldr	r2, [pc, #16]	; (20000114 <graphic_ctrl_bit_set+0x4e>)
20000104:	183b      	adds	r3, r7, r0
20000106:	781b      	ldrb	r3, [r3, #0]
20000108:	7013      	strb	r3, [r2, #0]
}
2000010a:	46c0      	nop			; (mov r8, r8)
2000010c:	46bd      	mov	sp, r7
2000010e:	b004      	add	sp, #16
20000110:	bd80      	pop	{r7, pc}
20000112:	46c0      	nop			; (mov r8, r8)
20000114:	40021014 	andmi	r1, r2, r4, lsl r0

20000118 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x)
{
20000118:	b580      	push	{r7, lr}
2000011a:	b084      	sub	sp, #16
2000011c:	af00      	add	r7, sp, #0
2000011e:	0002      	movs	r2, r0
20000120:	1dfb      	adds	r3, r7, #7
20000122:	701a      	strb	r2, [r3, #0]
    uint8_t c;
    c = *GPIO_ODR_LOW;
20000124:	4a0f      	ldr	r2, [pc, #60]	; (20000164 <graphic_ctrl_bit_clear+0x4c>)
20000126:	200f      	movs	r0, #15
20000128:	183b      	adds	r3, r7, r0
2000012a:	7812      	ldrb	r2, [r2, #0]
2000012c:	701a      	strb	r2, [r3, #0]
    c &= ~B_SELECT;
2000012e:	183b      	adds	r3, r7, r0
20000130:	183a      	adds	r2, r7, r0
20000132:	7812      	ldrb	r2, [r2, #0]
20000134:	2104      	movs	r1, #4
20000136:	438a      	bics	r2, r1
20000138:	701a      	strb	r2, [r3, #0]
    c &= ~x;
2000013a:	1dfb      	adds	r3, r7, #7
2000013c:	781b      	ldrb	r3, [r3, #0]
2000013e:	b25b      	sxtb	r3, r3
20000140:	43db      	mvns	r3, r3
20000142:	b25b      	sxtb	r3, r3
20000144:	183a      	adds	r2, r7, r0
20000146:	7812      	ldrb	r2, [r2, #0]
20000148:	b252      	sxtb	r2, r2
2000014a:	4013      	ands	r3, r2
2000014c:	b25a      	sxtb	r2, r3
2000014e:	183b      	adds	r3, r7, r0
20000150:	701a      	strb	r2, [r3, #0]
    *GPIO_ODR_LOW = c;
20000152:	4a04      	ldr	r2, [pc, #16]	; (20000164 <graphic_ctrl_bit_clear+0x4c>)
20000154:	183b      	adds	r3, r7, r0
20000156:	781b      	ldrb	r3, [r3, #0]
20000158:	7013      	strb	r3, [r2, #0]
}
2000015a:	46c0      	nop			; (mov r8, r8)
2000015c:	46bd      	mov	sp, r7
2000015e:	b004      	add	sp, #16
20000160:	bd80      	pop	{r7, pc}
20000162:	46c0      	nop			; (mov r8, r8)
20000164:	40021014 	andmi	r1, r2, r4, lsl r0

20000168 <select_controller>:

void select_controller(uint8_t controller)
{
20000168:	b580      	push	{r7, lr}
2000016a:	b082      	sub	sp, #8
2000016c:	af00      	add	r7, sp, #0
2000016e:	0002      	movs	r2, r0
20000170:	1dfb      	adds	r3, r7, #7
20000172:	701a      	strb	r2, [r3, #0]
    switch(controller) {
20000174:	1dfb      	adds	r3, r7, #7
20000176:	781b      	ldrb	r3, [r3, #0]
20000178:	2b18      	cmp	r3, #24
2000017a:	d01a      	beq.n	200001b2 <select_controller+0x4a>
2000017c:	dc1d      	bgt.n	200001ba <select_controller+0x52>
2000017e:	2b10      	cmp	r3, #16
20000180:	d010      	beq.n	200001a4 <select_controller+0x3c>
20000182:	dc1a      	bgt.n	200001ba <select_controller+0x52>
20000184:	2b00      	cmp	r3, #0
20000186:	d002      	beq.n	2000018e <select_controller+0x26>
20000188:	2b08      	cmp	r3, #8
2000018a:	d004      	beq.n	20000196 <select_controller+0x2e>
        break;
    case B_CS1 | B_CS2:
        graphic_ctrl_bit_set(B_CS1 | B_CS2);
        break;
    }
}
2000018c:	e015      	b.n	200001ba <select_controller+0x52>
        graphic_ctrl_bit_clear(B_CS1 | B_CS2);
2000018e:	2018      	movs	r0, #24
20000190:	f7ff ffc2 	bl	20000118 <graphic_ctrl_bit_clear>
        break;
20000194:	e011      	b.n	200001ba <select_controller+0x52>
        graphic_ctrl_bit_set(B_CS1);
20000196:	2008      	movs	r0, #8
20000198:	f7ff ff95 	bl	200000c6 <graphic_ctrl_bit_set>
        graphic_ctrl_bit_clear(B_CS2);
2000019c:	2010      	movs	r0, #16
2000019e:	f7ff ffbb 	bl	20000118 <graphic_ctrl_bit_clear>
        break;
200001a2:	e00a      	b.n	200001ba <select_controller+0x52>
        graphic_ctrl_bit_set(B_CS2);
200001a4:	2010      	movs	r0, #16
200001a6:	f7ff ff8e 	bl	200000c6 <graphic_ctrl_bit_set>
        graphic_ctrl_bit_clear(B_CS1);
200001aa:	2008      	movs	r0, #8
200001ac:	f7ff ffb4 	bl	20000118 <graphic_ctrl_bit_clear>
        break;
200001b0:	e003      	b.n	200001ba <select_controller+0x52>
        graphic_ctrl_bit_set(B_CS1 | B_CS2);
200001b2:	2018      	movs	r0, #24
200001b4:	f7ff ff87 	bl	200000c6 <graphic_ctrl_bit_set>
        break;
200001b8:	46c0      	nop			; (mov r8, r8)
}
200001ba:	46c0      	nop			; (mov r8, r8)
200001bc:	46bd      	mov	sp, r7
200001be:	b002      	add	sp, #8
200001c0:	bd80      	pop	{r7, pc}

200001c2 <graphic_wait_ready>:
static void graphic_wait_ready(void)
{
200001c2:	b580      	push	{r7, lr}
200001c4:	b082      	sub	sp, #8
200001c6:	af00      	add	r7, sp, #0
    uint8_t c;

    graphic_ctrl_bit_clear(B_E);
200001c8:	2040      	movs	r0, #64	; 0x40
200001ca:	f7ff ffa5 	bl	20000118 <graphic_ctrl_bit_clear>
    *GPIO_MODER = 0x00005555; // 15-8 inputs, 7-0 outputs
200001ce:	4b14      	ldr	r3, [pc, #80]	; (20000220 <graphic_wait_ready+0x5e>)
200001d0:	4a14      	ldr	r2, [pc, #80]	; (20000224 <graphic_wait_ready+0x62>)
200001d2:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_RS);
200001d4:	2001      	movs	r0, #1
200001d6:	f7ff ff9f 	bl	20000118 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RW);
200001da:	2002      	movs	r0, #2
200001dc:	f7ff ff73 	bl	200000c6 <graphic_ctrl_bit_set>
    delay_500ns();
200001e0:	f7ff ff68 	bl	200000b4 <delay_500ns>

    while(1) {
        graphic_ctrl_bit_set(B_E);
200001e4:	2040      	movs	r0, #64	; 0x40
200001e6:	f7ff ff6e 	bl	200000c6 <graphic_ctrl_bit_set>
        delay_500ns();
200001ea:	f7ff ff63 	bl	200000b4 <delay_500ns>
        c = *GPIO_IDR_HIGH & LCD_BUSY;
200001ee:	4b0e      	ldr	r3, [pc, #56]	; (20000228 <graphic_wait_ready+0x66>)
200001f0:	781b      	ldrb	r3, [r3, #0]
200001f2:	b2da      	uxtb	r2, r3
200001f4:	1dfb      	adds	r3, r7, #7
200001f6:	217f      	movs	r1, #127	; 0x7f
200001f8:	438a      	bics	r2, r1
200001fa:	701a      	strb	r2, [r3, #0]
        graphic_ctrl_bit_clear(B_E);
200001fc:	2040      	movs	r0, #64	; 0x40
200001fe:	f7ff ff8b 	bl	20000118 <graphic_ctrl_bit_clear>
        delay_500ns();
20000202:	f7ff ff57 	bl	200000b4 <delay_500ns>
        if(c == 0)
20000206:	1dfb      	adds	r3, r7, #7
20000208:	781b      	ldrb	r3, [r3, #0]
2000020a:	2b00      	cmp	r3, #0
2000020c:	d000      	beq.n	20000210 <graphic_wait_ready+0x4e>
        graphic_ctrl_bit_set(B_E);
2000020e:	e7e9      	b.n	200001e4 <graphic_wait_ready+0x22>
            break;
20000210:	46c0      	nop			; (mov r8, r8)
    }
    *GPIO_MODER = 0x55555555; // 15-0 outputs
20000212:	4b03      	ldr	r3, [pc, #12]	; (20000220 <graphic_wait_ready+0x5e>)
20000214:	4a05      	ldr	r2, [pc, #20]	; (2000022c <graphic_wait_ready+0x6a>)
20000216:	601a      	str	r2, [r3, #0]
}
20000218:	46c0      	nop			; (mov r8, r8)
2000021a:	46bd      	mov	sp, r7
2000021c:	b002      	add	sp, #8
2000021e:	bd80      	pop	{r7, pc}
20000220:	40021000 	andmi	r1, r2, r0
20000224:	00005555 	andeq	r5, r0, r5, asr r5
20000228:	40021011 	andmi	r1, r2, r1, lsl r0
2000022c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000230 <graphic_read>:

static uint8_t graphic_read(uint8_t controller)
{
20000230:	b580      	push	{r7, lr}
20000232:	b084      	sub	sp, #16
20000234:	af00      	add	r7, sp, #0
20000236:	0002      	movs	r2, r0
20000238:	1dfb      	adds	r3, r7, #7
2000023a:	701a      	strb	r2, [r3, #0]
    uint8_t c;
    graphic_ctrl_bit_clear(B_E);
2000023c:	2040      	movs	r0, #64	; 0x40
2000023e:	f7ff ff6b 	bl	20000118 <graphic_ctrl_bit_clear>
    *GPIO_MODER = 0x00005555; // 15-8 inputs, 7-0 outputs
20000242:	4b1c      	ldr	r3, [pc, #112]	; (200002b4 <graphic_read+0x84>)
20000244:	4a1c      	ldr	r2, [pc, #112]	; (200002b8 <graphic_read+0x88>)
20000246:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_set(B_RS | B_RW);
20000248:	2003      	movs	r0, #3
2000024a:	f7ff ff3c 	bl	200000c6 <graphic_ctrl_bit_set>
    select_controller(controller);
2000024e:	1dfb      	adds	r3, r7, #7
20000250:	781b      	ldrb	r3, [r3, #0]
20000252:	0018      	movs	r0, r3
20000254:	f7ff ff88 	bl	20000168 <select_controller>
    delay_500ns();
20000258:	f7ff ff2c 	bl	200000b4 <delay_500ns>
    graphic_ctrl_bit_set(B_E);
2000025c:	2040      	movs	r0, #64	; 0x40
2000025e:	f7ff ff32 	bl	200000c6 <graphic_ctrl_bit_set>
    delay_500ns();
20000262:	f7ff ff27 	bl	200000b4 <delay_500ns>
    c = *GPIO_IDR_HIGH;
20000266:	4a15      	ldr	r2, [pc, #84]	; (200002bc <graphic_read+0x8c>)
20000268:	230f      	movs	r3, #15
2000026a:	18fb      	adds	r3, r7, r3
2000026c:	7812      	ldrb	r2, [r2, #0]
2000026e:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000270:	2040      	movs	r0, #64	; 0x40
20000272:	f7ff ff51 	bl	20000118 <graphic_ctrl_bit_clear>
    *GPIO_MODER = 0x55555555; // 15-0 outputs
20000276:	4b0f      	ldr	r3, [pc, #60]	; (200002b4 <graphic_read+0x84>)
20000278:	4a11      	ldr	r2, [pc, #68]	; (200002c0 <graphic_read+0x90>)
2000027a:	601a      	str	r2, [r3, #0]

    if(controller & B_CS1) {
2000027c:	1dfb      	adds	r3, r7, #7
2000027e:	781b      	ldrb	r3, [r3, #0]
20000280:	2208      	movs	r2, #8
20000282:	4013      	ands	r3, r2
20000284:	d004      	beq.n	20000290 <graphic_read+0x60>
        select_controller(B_CS1);
20000286:	2008      	movs	r0, #8
20000288:	f7ff ff6e 	bl	20000168 <select_controller>
        graphic_wait_ready();
2000028c:	f7ff ff99 	bl	200001c2 <graphic_wait_ready>
    }
    if(controller & B_CS2) {
20000290:	1dfb      	adds	r3, r7, #7
20000292:	781b      	ldrb	r3, [r3, #0]
20000294:	2210      	movs	r2, #16
20000296:	4013      	ands	r3, r2
20000298:	d004      	beq.n	200002a4 <graphic_read+0x74>
        select_controller(B_CS2);
2000029a:	2010      	movs	r0, #16
2000029c:	f7ff ff64 	bl	20000168 <select_controller>
        graphic_wait_ready();
200002a0:	f7ff ff8f 	bl	200001c2 <graphic_wait_ready>
    }
    return c;
200002a4:	230f      	movs	r3, #15
200002a6:	18fb      	adds	r3, r7, r3
200002a8:	781b      	ldrb	r3, [r3, #0]
}
200002aa:	0018      	movs	r0, r3
200002ac:	46bd      	mov	sp, r7
200002ae:	b004      	add	sp, #16
200002b0:	bd80      	pop	{r7, pc}
200002b2:	46c0      	nop			; (mov r8, r8)
200002b4:	40021000 	andmi	r1, r2, r0
200002b8:	00005555 	andeq	r5, r0, r5, asr r5
200002bc:	40021011 	andmi	r1, r2, r1, lsl r0
200002c0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200002c4 <graphic_read_data>:

static uint8_t graphic_read_data(uint8_t controller)
{
200002c4:	b580      	push	{r7, lr}
200002c6:	b082      	sub	sp, #8
200002c8:	af00      	add	r7, sp, #0
200002ca:	0002      	movs	r2, r0
200002cc:	1dfb      	adds	r3, r7, #7
200002ce:	701a      	strb	r2, [r3, #0]
    graphic_read(controller);
200002d0:	1dfb      	adds	r3, r7, #7
200002d2:	781b      	ldrb	r3, [r3, #0]
200002d4:	0018      	movs	r0, r3
200002d6:	f7ff ffab 	bl	20000230 <graphic_read>
    return graphic_read(controller);
200002da:	1dfb      	adds	r3, r7, #7
200002dc:	781b      	ldrb	r3, [r3, #0]
200002de:	0018      	movs	r0, r3
200002e0:	f7ff ffa6 	bl	20000230 <graphic_read>
200002e4:	0003      	movs	r3, r0
}
200002e6:	0018      	movs	r0, r3
200002e8:	46bd      	mov	sp, r7
200002ea:	b002      	add	sp, #8
200002ec:	bd80      	pop	{r7, pc}

200002ee <graphic_write>:

static void graphic_write(uint8_t value, uint8_t controller)
{
200002ee:	b580      	push	{r7, lr}
200002f0:	b082      	sub	sp, #8
200002f2:	af00      	add	r7, sp, #0
200002f4:	0002      	movs	r2, r0
200002f6:	1dfb      	adds	r3, r7, #7
200002f8:	701a      	strb	r2, [r3, #0]
200002fa:	1dbb      	adds	r3, r7, #6
200002fc:	1c0a      	adds	r2, r1, #0
200002fe:	701a      	strb	r2, [r3, #0]
    *GPIO_ODR_HIGH = value;
20000300:	4a15      	ldr	r2, [pc, #84]	; (20000358 <graphic_write+0x6a>)
20000302:	1dfb      	adds	r3, r7, #7
20000304:	781b      	ldrb	r3, [r3, #0]
20000306:	7013      	strb	r3, [r2, #0]
    select_controller(controller);
20000308:	1dbb      	adds	r3, r7, #6
2000030a:	781b      	ldrb	r3, [r3, #0]
2000030c:	0018      	movs	r0, r3
2000030e:	f7ff ff2b 	bl	20000168 <select_controller>
    delay_500ns();
20000312:	f7ff fecf 	bl	200000b4 <delay_500ns>
    graphic_ctrl_bit_set(B_E);
20000316:	2040      	movs	r0, #64	; 0x40
20000318:	f7ff fed5 	bl	200000c6 <graphic_ctrl_bit_set>
    delay_500ns();
2000031c:	f7ff feca 	bl	200000b4 <delay_500ns>
    graphic_ctrl_bit_clear(B_E);
20000320:	2040      	movs	r0, #64	; 0x40
20000322:	f7ff fef9 	bl	20000118 <graphic_ctrl_bit_clear>

    if(controller & B_CS1) {
20000326:	1dbb      	adds	r3, r7, #6
20000328:	781b      	ldrb	r3, [r3, #0]
2000032a:	2208      	movs	r2, #8
2000032c:	4013      	ands	r3, r2
2000032e:	d004      	beq.n	2000033a <graphic_write+0x4c>
        select_controller(B_CS1);
20000330:	2008      	movs	r0, #8
20000332:	f7ff ff19 	bl	20000168 <select_controller>
        graphic_wait_ready();
20000336:	f7ff ff44 	bl	200001c2 <graphic_wait_ready>
    }
    if(controller & B_CS2) {
2000033a:	1dbb      	adds	r3, r7, #6
2000033c:	781b      	ldrb	r3, [r3, #0]
2000033e:	2210      	movs	r2, #16
20000340:	4013      	ands	r3, r2
20000342:	d004      	beq.n	2000034e <graphic_write+0x60>
        select_controller(B_CS2);
20000344:	2010      	movs	r0, #16
20000346:	f7ff ff0f 	bl	20000168 <select_controller>
        graphic_wait_ready();
2000034a:	f7ff ff3a 	bl	200001c2 <graphic_wait_ready>
    }
}
2000034e:	46c0      	nop			; (mov r8, r8)
20000350:	46bd      	mov	sp, r7
20000352:	b002      	add	sp, #8
20000354:	bd80      	pop	{r7, pc}
20000356:	46c0      	nop			; (mov r8, r8)
20000358:	40021015 	andmi	r1, r2, r5, lsl r0

2000035c <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller)
{
2000035c:	b580      	push	{r7, lr}
2000035e:	b082      	sub	sp, #8
20000360:	af00      	add	r7, sp, #0
20000362:	0002      	movs	r2, r0
20000364:	1dfb      	adds	r3, r7, #7
20000366:	701a      	strb	r2, [r3, #0]
20000368:	1dbb      	adds	r3, r7, #6
2000036a:	1c0a      	adds	r2, r1, #0
2000036c:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
2000036e:	2040      	movs	r0, #64	; 0x40
20000370:	f7ff fed2 	bl	20000118 <graphic_ctrl_bit_clear>
    select_controller(controller);
20000374:	1dbb      	adds	r3, r7, #6
20000376:	781b      	ldrb	r3, [r3, #0]
20000378:	0018      	movs	r0, r3
2000037a:	f7ff fef5 	bl	20000168 <select_controller>
    graphic_ctrl_bit_set(B_RS);
2000037e:	2001      	movs	r0, #1
20000380:	f7ff fea1 	bl	200000c6 <graphic_ctrl_bit_set>
    graphic_ctrl_bit_clear(B_RW);
20000384:	2002      	movs	r0, #2
20000386:	f7ff fec7 	bl	20000118 <graphic_ctrl_bit_clear>
    graphic_write(data, controller);
2000038a:	1dbb      	adds	r3, r7, #6
2000038c:	781a      	ldrb	r2, [r3, #0]
2000038e:	1dfb      	adds	r3, r7, #7
20000390:	781b      	ldrb	r3, [r3, #0]
20000392:	0011      	movs	r1, r2
20000394:	0018      	movs	r0, r3
20000396:	f7ff ffaa 	bl	200002ee <graphic_write>
}
2000039a:	46c0      	nop			; (mov r8, r8)
2000039c:	46bd      	mov	sp, r7
2000039e:	b002      	add	sp, #8
200003a0:	bd80      	pop	{r7, pc}

200003a2 <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller)
{
200003a2:	b580      	push	{r7, lr}
200003a4:	b082      	sub	sp, #8
200003a6:	af00      	add	r7, sp, #0
200003a8:	0002      	movs	r2, r0
200003aa:	1dfb      	adds	r3, r7, #7
200003ac:	701a      	strb	r2, [r3, #0]
200003ae:	1dbb      	adds	r3, r7, #6
200003b0:	1c0a      	adds	r2, r1, #0
200003b2:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
200003b4:	2040      	movs	r0, #64	; 0x40
200003b6:	f7ff feaf 	bl	20000118 <graphic_ctrl_bit_clear>
    select_controller(controller);
200003ba:	1dbb      	adds	r3, r7, #6
200003bc:	781b      	ldrb	r3, [r3, #0]
200003be:	0018      	movs	r0, r3
200003c0:	f7ff fed2 	bl	20000168 <select_controller>
    graphic_ctrl_bit_clear(B_RS);
200003c4:	2001      	movs	r0, #1
200003c6:	f7ff fea7 	bl	20000118 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_clear(B_RW);
200003ca:	2002      	movs	r0, #2
200003cc:	f7ff fea4 	bl	20000118 <graphic_ctrl_bit_clear>
    graphic_write(command, controller);
200003d0:	1dbb      	adds	r3, r7, #6
200003d2:	781a      	ldrb	r2, [r3, #0]
200003d4:	1dfb      	adds	r3, r7, #7
200003d6:	781b      	ldrb	r3, [r3, #0]
200003d8:	0011      	movs	r1, r2
200003da:	0018      	movs	r0, r3
200003dc:	f7ff ff87 	bl	200002ee <graphic_write>
}
200003e0:	46c0      	nop			; (mov r8, r8)
200003e2:	46bd      	mov	sp, r7
200003e4:	b002      	add	sp, #8
200003e6:	bd80      	pop	{r7, pc}

200003e8 <graphic_clear_screen>:

void graphic_clear_screen(void)
{
200003e8:	b580      	push	{r7, lr}
200003ea:	b082      	sub	sp, #8
200003ec:	af00      	add	r7, sp, #0
    uint8_t i, j;
    for(j = 0; j < 8; j++) {
200003ee:	1dbb      	adds	r3, r7, #6
200003f0:	2200      	movs	r2, #0
200003f2:	701a      	strb	r2, [r3, #0]
200003f4:	e023      	b.n	2000043e <graphic_clear_screen+0x56>
        graphic_write_command(LCD_SET_PAGE | j, B_CS1 | B_CS2);
200003f6:	1dbb      	adds	r3, r7, #6
200003f8:	781b      	ldrb	r3, [r3, #0]
200003fa:	2248      	movs	r2, #72	; 0x48
200003fc:	4252      	negs	r2, r2
200003fe:	4313      	orrs	r3, r2
20000400:	b2db      	uxtb	r3, r3
20000402:	2118      	movs	r1, #24
20000404:	0018      	movs	r0, r3
20000406:	f7ff ffcc 	bl	200003a2 <graphic_write_command>
        graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
2000040a:	2118      	movs	r1, #24
2000040c:	2040      	movs	r0, #64	; 0x40
2000040e:	f7ff ffc8 	bl	200003a2 <graphic_write_command>
        for(i = 0; i <= 63; i++) {
20000412:	1dfb      	adds	r3, r7, #7
20000414:	2200      	movs	r2, #0
20000416:	701a      	strb	r2, [r3, #0]
20000418:	e008      	b.n	2000042c <graphic_clear_screen+0x44>
            graphic_write_data(0, B_CS1 | B_CS2);
2000041a:	2118      	movs	r1, #24
2000041c:	2000      	movs	r0, #0
2000041e:	f7ff ff9d 	bl	2000035c <graphic_write_data>
        for(i = 0; i <= 63; i++) {
20000422:	1dfb      	adds	r3, r7, #7
20000424:	781a      	ldrb	r2, [r3, #0]
20000426:	1dfb      	adds	r3, r7, #7
20000428:	3201      	adds	r2, #1
2000042a:	701a      	strb	r2, [r3, #0]
2000042c:	1dfb      	adds	r3, r7, #7
2000042e:	781b      	ldrb	r3, [r3, #0]
20000430:	2b3f      	cmp	r3, #63	; 0x3f
20000432:	d9f2      	bls.n	2000041a <graphic_clear_screen+0x32>
    for(j = 0; j < 8; j++) {
20000434:	1dbb      	adds	r3, r7, #6
20000436:	781a      	ldrb	r2, [r3, #0]
20000438:	1dbb      	adds	r3, r7, #6
2000043a:	3201      	adds	r2, #1
2000043c:	701a      	strb	r2, [r3, #0]
2000043e:	1dbb      	adds	r3, r7, #6
20000440:	781b      	ldrb	r3, [r3, #0]
20000442:	2b07      	cmp	r3, #7
20000444:	d9d7      	bls.n	200003f6 <graphic_clear_screen+0xe>
        }
    }
}
20000446:	46c0      	nop			; (mov r8, r8)
20000448:	46c0      	nop			; (mov r8, r8)
2000044a:	46bd      	mov	sp, r7
2000044c:	b002      	add	sp, #8
2000044e:	bd80      	pop	{r7, pc}

20000450 <graphic_initialize>:


void graphic_initialize(void)
{
20000450:	b580      	push	{r7, lr}
20000452:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_set(B_E);
20000454:	2040      	movs	r0, #64	; 0x40
20000456:	f7ff fe36 	bl	200000c6 <graphic_ctrl_bit_set>
    delay_micro(10);
2000045a:	200a      	movs	r0, #10
2000045c:	f7ff fdfa 	bl	20000054 <delay_micro>
    graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
20000460:	2078      	movs	r0, #120	; 0x78
20000462:	f7ff fe59 	bl	20000118 <graphic_ctrl_bit_clear>
    delay_milli(30);
20000466:	201e      	movs	r0, #30
20000468:	f7ff fe0f 	bl	2000008a <delay_milli>
    graphic_ctrl_bit_set(B_RST);
2000046c:	2020      	movs	r0, #32
2000046e:	f7ff fe2a 	bl	200000c6 <graphic_ctrl_bit_set>
    delay_milli(100);
20000472:	2064      	movs	r0, #100	; 0x64
20000474:	f7ff fe09 	bl	2000008a <delay_milli>
    graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
20000478:	2118      	movs	r1, #24
2000047a:	203e      	movs	r0, #62	; 0x3e
2000047c:	f7ff ff91 	bl	200003a2 <graphic_write_command>
    graphic_write_command(LCD_ON, B_CS1 | B_CS2);
20000480:	2118      	movs	r1, #24
20000482:	203f      	movs	r0, #63	; 0x3f
20000484:	f7ff ff8d 	bl	200003a2 <graphic_write_command>
    graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
20000488:	2118      	movs	r1, #24
2000048a:	20c0      	movs	r0, #192	; 0xc0
2000048c:	f7ff ff89 	bl	200003a2 <graphic_write_command>
    graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
20000490:	2118      	movs	r1, #24
20000492:	2040      	movs	r0, #64	; 0x40
20000494:	f7ff ff85 	bl	200003a2 <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
20000498:	2118      	movs	r1, #24
2000049a:	20b8      	movs	r0, #184	; 0xb8
2000049c:	f7ff ff81 	bl	200003a2 <graphic_write_command>
    select_controller(0);
200004a0:	2000      	movs	r0, #0
200004a2:	f7ff fe61 	bl	20000168 <select_controller>
    
}
200004a6:	46c0      	nop			; (mov r8, r8)
200004a8:	46bd      	mov	sp, r7
200004aa:	bd80      	pop	{r7, pc}

200004ac <pixel>:

void pixel(int x, int y, int set)
{
200004ac:	b5f0      	push	{r4, r5, r6, r7, lr}
200004ae:	b089      	sub	sp, #36	; 0x24
200004b0:	af00      	add	r7, sp, #0
200004b2:	60f8      	str	r0, [r7, #12]
200004b4:	60b9      	str	r1, [r7, #8]
200004b6:	607a      	str	r2, [r7, #4]
    uint8_t mask, c, controller;
    int index;
    if((x < 1) || (y < 1) || (x > 128) || (y > 64))
200004b8:	68fb      	ldr	r3, [r7, #12]
200004ba:	2b00      	cmp	r3, #0
200004bc:	dc00      	bgt.n	200004c0 <pixel+0x14>
200004be:	e0b9      	b.n	20000634 <pixel+0x188>
200004c0:	68bb      	ldr	r3, [r7, #8]
200004c2:	2b00      	cmp	r3, #0
200004c4:	dc00      	bgt.n	200004c8 <pixel+0x1c>
200004c6:	e0b5      	b.n	20000634 <pixel+0x188>
200004c8:	68fb      	ldr	r3, [r7, #12]
200004ca:	2b80      	cmp	r3, #128	; 0x80
200004cc:	dd00      	ble.n	200004d0 <pixel+0x24>
200004ce:	e0b1      	b.n	20000634 <pixel+0x188>
200004d0:	68bb      	ldr	r3, [r7, #8]
200004d2:	2b40      	cmp	r3, #64	; 0x40
200004d4:	dd00      	ble.n	200004d8 <pixel+0x2c>
200004d6:	e0ad      	b.n	20000634 <pixel+0x188>
        return;

    index = (y - 1) / 8;
200004d8:	68bb      	ldr	r3, [r7, #8]
200004da:	3b01      	subs	r3, #1
200004dc:	2b00      	cmp	r3, #0
200004de:	da00      	bge.n	200004e2 <pixel+0x36>
200004e0:	3307      	adds	r3, #7
200004e2:	10db      	asrs	r3, r3, #3
200004e4:	61bb      	str	r3, [r7, #24]

    switch((y - 1) % 8) {
200004e6:	68bb      	ldr	r3, [r7, #8]
200004e8:	3b01      	subs	r3, #1
200004ea:	4a54      	ldr	r2, [pc, #336]	; (2000063c <pixel+0x190>)
200004ec:	4013      	ands	r3, r2
200004ee:	d504      	bpl.n	200004fa <pixel+0x4e>
200004f0:	3b01      	subs	r3, #1
200004f2:	2208      	movs	r2, #8
200004f4:	4252      	negs	r2, r2
200004f6:	4313      	orrs	r3, r2
200004f8:	3301      	adds	r3, #1
200004fa:	2b07      	cmp	r3, #7
200004fc:	d82c      	bhi.n	20000558 <pixel+0xac>
200004fe:	009a      	lsls	r2, r3, #2
20000500:	4b4f      	ldr	r3, [pc, #316]	; (20000640 <pixel+0x194>)
20000502:	18d3      	adds	r3, r2, r3
20000504:	681b      	ldr	r3, [r3, #0]
20000506:	469f      	mov	pc, r3
    case 0:
        mask = 1;
20000508:	231f      	movs	r3, #31
2000050a:	18fb      	adds	r3, r7, r3
2000050c:	2201      	movs	r2, #1
2000050e:	701a      	strb	r2, [r3, #0]
        break;
20000510:	e022      	b.n	20000558 <pixel+0xac>
    case 1:
        mask = 2;
20000512:	231f      	movs	r3, #31
20000514:	18fb      	adds	r3, r7, r3
20000516:	2202      	movs	r2, #2
20000518:	701a      	strb	r2, [r3, #0]
        break;
2000051a:	e01d      	b.n	20000558 <pixel+0xac>
    case 2:
        mask = 4;
2000051c:	231f      	movs	r3, #31
2000051e:	18fb      	adds	r3, r7, r3
20000520:	2204      	movs	r2, #4
20000522:	701a      	strb	r2, [r3, #0]
        break;
20000524:	e018      	b.n	20000558 <pixel+0xac>
    case 3:
        mask = 8;
20000526:	231f      	movs	r3, #31
20000528:	18fb      	adds	r3, r7, r3
2000052a:	2208      	movs	r2, #8
2000052c:	701a      	strb	r2, [r3, #0]
        break;
2000052e:	e013      	b.n	20000558 <pixel+0xac>
    case 4:
        mask = 0x10;
20000530:	231f      	movs	r3, #31
20000532:	18fb      	adds	r3, r7, r3
20000534:	2210      	movs	r2, #16
20000536:	701a      	strb	r2, [r3, #0]
        break;
20000538:	e00e      	b.n	20000558 <pixel+0xac>
    case 5:
        mask = 0x20;
2000053a:	231f      	movs	r3, #31
2000053c:	18fb      	adds	r3, r7, r3
2000053e:	2220      	movs	r2, #32
20000540:	701a      	strb	r2, [r3, #0]
        break;
20000542:	e009      	b.n	20000558 <pixel+0xac>
    case 6:
        mask = 0x40;
20000544:	231f      	movs	r3, #31
20000546:	18fb      	adds	r3, r7, r3
20000548:	2240      	movs	r2, #64	; 0x40
2000054a:	701a      	strb	r2, [r3, #0]
        break;
2000054c:	e004      	b.n	20000558 <pixel+0xac>
    case 7:
        mask = 0x80;
2000054e:	231f      	movs	r3, #31
20000550:	18fb      	adds	r3, r7, r3
20000552:	2280      	movs	r2, #128	; 0x80
20000554:	701a      	strb	r2, [r3, #0]
        break;
20000556:	46c0      	nop			; (mov r8, r8)
    }

    if(set == 0)
20000558:	687b      	ldr	r3, [r7, #4]
2000055a:	2b00      	cmp	r3, #0
2000055c:	d105      	bne.n	2000056a <pixel+0xbe>
        mask = ~mask;
2000055e:	221f      	movs	r2, #31
20000560:	18bb      	adds	r3, r7, r2
20000562:	18ba      	adds	r2, r7, r2
20000564:	7812      	ldrb	r2, [r2, #0]
20000566:	43d2      	mvns	r2, r2
20000568:	701a      	strb	r2, [r3, #0]
    if(x > 64) {
2000056a:	68fb      	ldr	r3, [r7, #12]
2000056c:	2b40      	cmp	r3, #64	; 0x40
2000056e:	dd07      	ble.n	20000580 <pixel+0xd4>
        controller = B_CS2;
20000570:	231e      	movs	r3, #30
20000572:	18fb      	adds	r3, r7, r3
20000574:	2210      	movs	r2, #16
20000576:	701a      	strb	r2, [r3, #0]
        x = x - 65;
20000578:	68fb      	ldr	r3, [r7, #12]
2000057a:	3b41      	subs	r3, #65	; 0x41
2000057c:	60fb      	str	r3, [r7, #12]
2000057e:	e006      	b.n	2000058e <pixel+0xe2>
    } else {
        controller = B_CS1;
20000580:	231e      	movs	r3, #30
20000582:	18fb      	adds	r3, r7, r3
20000584:	2208      	movs	r2, #8
20000586:	701a      	strb	r2, [r3, #0]
        x = x - 1;
20000588:	68fb      	ldr	r3, [r7, #12]
2000058a:	3b01      	subs	r3, #1
2000058c:	60fb      	str	r3, [r7, #12]
    }

    graphic_write_command(LCD_SET_ADD | x, controller);
2000058e:	68fb      	ldr	r3, [r7, #12]
20000590:	b25b      	sxtb	r3, r3
20000592:	2240      	movs	r2, #64	; 0x40
20000594:	4313      	orrs	r3, r2
20000596:	b25b      	sxtb	r3, r3
20000598:	b2da      	uxtb	r2, r3
2000059a:	251e      	movs	r5, #30
2000059c:	197b      	adds	r3, r7, r5
2000059e:	781b      	ldrb	r3, [r3, #0]
200005a0:	0019      	movs	r1, r3
200005a2:	0010      	movs	r0, r2
200005a4:	f7ff fefd 	bl	200003a2 <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE | index, controller);
200005a8:	69bb      	ldr	r3, [r7, #24]
200005aa:	b25b      	sxtb	r3, r3
200005ac:	2248      	movs	r2, #72	; 0x48
200005ae:	4252      	negs	r2, r2
200005b0:	4313      	orrs	r3, r2
200005b2:	b25b      	sxtb	r3, r3
200005b4:	b2da      	uxtb	r2, r3
200005b6:	197b      	adds	r3, r7, r5
200005b8:	781b      	ldrb	r3, [r3, #0]
200005ba:	0019      	movs	r1, r3
200005bc:	0010      	movs	r0, r2
200005be:	f7ff fef0 	bl	200003a2 <graphic_write_command>
    c = graphic_read_data(controller);
200005c2:	2617      	movs	r6, #23
200005c4:	19bc      	adds	r4, r7, r6
200005c6:	197b      	adds	r3, r7, r5
200005c8:	781b      	ldrb	r3, [r3, #0]
200005ca:	0018      	movs	r0, r3
200005cc:	f7ff fe7a 	bl	200002c4 <graphic_read_data>
200005d0:	0003      	movs	r3, r0
200005d2:	7023      	strb	r3, [r4, #0]
    graphic_write_command(LCD_SET_ADD | x, controller);
200005d4:	68fb      	ldr	r3, [r7, #12]
200005d6:	b25b      	sxtb	r3, r3
200005d8:	2240      	movs	r2, #64	; 0x40
200005da:	4313      	orrs	r3, r2
200005dc:	b25b      	sxtb	r3, r3
200005de:	b2da      	uxtb	r2, r3
200005e0:	197b      	adds	r3, r7, r5
200005e2:	781b      	ldrb	r3, [r3, #0]
200005e4:	0019      	movs	r1, r3
200005e6:	0010      	movs	r0, r2
200005e8:	f7ff fedb 	bl	200003a2 <graphic_write_command>
    if(set)
200005ec:	687b      	ldr	r3, [r7, #4]
200005ee:	2b00      	cmp	r3, #0
200005f0:	d008      	beq.n	20000604 <pixel+0x158>
        mask = mask | c;
200005f2:	221f      	movs	r2, #31
200005f4:	18bb      	adds	r3, r7, r2
200005f6:	18b9      	adds	r1, r7, r2
200005f8:	19ba      	adds	r2, r7, r6
200005fa:	7809      	ldrb	r1, [r1, #0]
200005fc:	7812      	ldrb	r2, [r2, #0]
200005fe:	430a      	orrs	r2, r1
20000600:	701a      	strb	r2, [r3, #0]
20000602:	e008      	b.n	20000616 <pixel+0x16a>
    else
        mask = mask & c;
20000604:	221f      	movs	r2, #31
20000606:	18bb      	adds	r3, r7, r2
20000608:	18ba      	adds	r2, r7, r2
2000060a:	2117      	movs	r1, #23
2000060c:	1879      	adds	r1, r7, r1
2000060e:	7812      	ldrb	r2, [r2, #0]
20000610:	7809      	ldrb	r1, [r1, #0]
20000612:	400a      	ands	r2, r1
20000614:	701a      	strb	r2, [r3, #0]
    graphic_write_data(mask, controller);
20000616:	231e      	movs	r3, #30
20000618:	18fb      	adds	r3, r7, r3
2000061a:	781a      	ldrb	r2, [r3, #0]
2000061c:	231f      	movs	r3, #31
2000061e:	18fb      	adds	r3, r7, r3
20000620:	781b      	ldrb	r3, [r3, #0]
20000622:	0011      	movs	r1, r2
20000624:	0018      	movs	r0, r3
20000626:	f7ff fe99 	bl	2000035c <graphic_write_data>
    graphic_write_command(LCD_ON, B_CS1 | B_CS2);
2000062a:	2118      	movs	r1, #24
2000062c:	203f      	movs	r0, #63	; 0x3f
2000062e:	f7ff feb8 	bl	200003a2 <graphic_write_command>
20000632:	e000      	b.n	20000636 <pixel+0x18a>
        return;
20000634:	46c0      	nop			; (mov r8, r8)

}
20000636:	46bd      	mov	sp, r7
20000638:	b009      	add	sp, #36	; 0x24
2000063a:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000063c:	80000007 	andhi	r0, r0, r7
20000640:	2000085c 	andcs	r0, r0, ip, asr r8

20000644 <set_object_speed>:

void set_object_speed(POBJECT o, int speedX, int speedY)
{
20000644:	b580      	push	{r7, lr}
20000646:	b084      	sub	sp, #16
20000648:	af00      	add	r7, sp, #0
2000064a:	60f8      	str	r0, [r7, #12]
2000064c:	60b9      	str	r1, [r7, #8]
2000064e:	607a      	str	r2, [r7, #4]
    o->dirx = speedX;
20000650:	68fb      	ldr	r3, [r7, #12]
20000652:	68ba      	ldr	r2, [r7, #8]
20000654:	605a      	str	r2, [r3, #4]
    o->diry = speedY;
20000656:	68fb      	ldr	r3, [r7, #12]
20000658:	687a      	ldr	r2, [r7, #4]
2000065a:	609a      	str	r2, [r3, #8]
}
2000065c:	46c0      	nop			; (mov r8, r8)
2000065e:	46bd      	mov	sp, r7
20000660:	b004      	add	sp, #16
20000662:	bd80      	pop	{r7, pc}

20000664 <draw_object>:

void draw_object(POBJECT O)
{
20000664:	b580      	push	{r7, lr}
20000666:	b084      	sub	sp, #16
20000668:	af00      	add	r7, sp, #0
2000066a:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < MAX_POINTS; i++) {
2000066c:	2300      	movs	r3, #0
2000066e:	60fb      	str	r3, [r7, #12]
20000670:	e01c      	b.n	200006ac <draw_object+0x48>
        pixel(O->posx + O->geo->px[i].x, O->posy + O->geo->px[i].y, 1);
20000672:	687b      	ldr	r3, [r7, #4]
20000674:	68da      	ldr	r2, [r3, #12]
20000676:	687b      	ldr	r3, [r7, #4]
20000678:	6819      	ldr	r1, [r3, #0]
2000067a:	68fb      	ldr	r3, [r7, #12]
2000067c:	3304      	adds	r3, #4
2000067e:	005b      	lsls	r3, r3, #1
20000680:	18cb      	adds	r3, r1, r3
20000682:	3304      	adds	r3, #4
20000684:	781b      	ldrb	r3, [r3, #0]
20000686:	18d0      	adds	r0, r2, r3
20000688:	687b      	ldr	r3, [r7, #4]
2000068a:	691a      	ldr	r2, [r3, #16]
2000068c:	687b      	ldr	r3, [r7, #4]
2000068e:	6819      	ldr	r1, [r3, #0]
20000690:	68fb      	ldr	r3, [r7, #12]
20000692:	3304      	adds	r3, #4
20000694:	005b      	lsls	r3, r3, #1
20000696:	18cb      	adds	r3, r1, r3
20000698:	3305      	adds	r3, #5
2000069a:	781b      	ldrb	r3, [r3, #0]
2000069c:	18d3      	adds	r3, r2, r3
2000069e:	2201      	movs	r2, #1
200006a0:	0019      	movs	r1, r3
200006a2:	f7ff ff03 	bl	200004ac <pixel>
    for(int i = 0; i < MAX_POINTS; i++) {
200006a6:	68fb      	ldr	r3, [r7, #12]
200006a8:	3301      	adds	r3, #1
200006aa:	60fb      	str	r3, [r7, #12]
200006ac:	68fb      	ldr	r3, [r7, #12]
200006ae:	2b13      	cmp	r3, #19
200006b0:	dddf      	ble.n	20000672 <draw_object+0xe>
    }
}
200006b2:	46c0      	nop			; (mov r8, r8)
200006b4:	46c0      	nop			; (mov r8, r8)
200006b6:	46bd      	mov	sp, r7
200006b8:	b004      	add	sp, #16
200006ba:	bd80      	pop	{r7, pc}

200006bc <clear_object>:

void clear_object(POBJECT O)
{
200006bc:	b580      	push	{r7, lr}
200006be:	b084      	sub	sp, #16
200006c0:	af00      	add	r7, sp, #0
200006c2:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < MAX_POINTS; i++) {
200006c4:	2300      	movs	r3, #0
200006c6:	60fb      	str	r3, [r7, #12]
200006c8:	e01c      	b.n	20000704 <clear_object+0x48>
        pixel(O->posx + O->geo->px[i].x, O->posy + O->geo->px[i].y, 0);
200006ca:	687b      	ldr	r3, [r7, #4]
200006cc:	68da      	ldr	r2, [r3, #12]
200006ce:	687b      	ldr	r3, [r7, #4]
200006d0:	6819      	ldr	r1, [r3, #0]
200006d2:	68fb      	ldr	r3, [r7, #12]
200006d4:	3304      	adds	r3, #4
200006d6:	005b      	lsls	r3, r3, #1
200006d8:	18cb      	adds	r3, r1, r3
200006da:	3304      	adds	r3, #4
200006dc:	781b      	ldrb	r3, [r3, #0]
200006de:	18d0      	adds	r0, r2, r3
200006e0:	687b      	ldr	r3, [r7, #4]
200006e2:	691a      	ldr	r2, [r3, #16]
200006e4:	687b      	ldr	r3, [r7, #4]
200006e6:	6819      	ldr	r1, [r3, #0]
200006e8:	68fb      	ldr	r3, [r7, #12]
200006ea:	3304      	adds	r3, #4
200006ec:	005b      	lsls	r3, r3, #1
200006ee:	18cb      	adds	r3, r1, r3
200006f0:	3305      	adds	r3, #5
200006f2:	781b      	ldrb	r3, [r3, #0]
200006f4:	18d3      	adds	r3, r2, r3
200006f6:	2200      	movs	r2, #0
200006f8:	0019      	movs	r1, r3
200006fa:	f7ff fed7 	bl	200004ac <pixel>
    for(int i = 0; i < MAX_POINTS; i++) {
200006fe:	68fb      	ldr	r3, [r7, #12]
20000700:	3301      	adds	r3, #1
20000702:	60fb      	str	r3, [r7, #12]
20000704:	68fb      	ldr	r3, [r7, #12]
20000706:	2b13      	cmp	r3, #19
20000708:	dddf      	ble.n	200006ca <clear_object+0xe>
    }
}
2000070a:	46c0      	nop			; (mov r8, r8)
2000070c:	46c0      	nop			; (mov r8, r8)
2000070e:	46bd      	mov	sp, r7
20000710:	b004      	add	sp, #16
20000712:	bd80      	pop	{r7, pc}

20000714 <move_object>:

void move_object(POBJECT object)
{
20000714:	b580      	push	{r7, lr}
20000716:	b082      	sub	sp, #8
20000718:	af00      	add	r7, sp, #0
2000071a:	6078      	str	r0, [r7, #4]
    clear_object(object);
2000071c:	687b      	ldr	r3, [r7, #4]
2000071e:	0018      	movs	r0, r3
20000720:	f7ff ffcc 	bl	200006bc <clear_object>
    object->posx += object->dirx;
20000724:	687b      	ldr	r3, [r7, #4]
20000726:	68da      	ldr	r2, [r3, #12]
20000728:	687b      	ldr	r3, [r7, #4]
2000072a:	685b      	ldr	r3, [r3, #4]
2000072c:	18d2      	adds	r2, r2, r3
2000072e:	687b      	ldr	r3, [r7, #4]
20000730:	60da      	str	r2, [r3, #12]
    object->posy += object->diry;
20000732:	687b      	ldr	r3, [r7, #4]
20000734:	691a      	ldr	r2, [r3, #16]
20000736:	687b      	ldr	r3, [r7, #4]
20000738:	689b      	ldr	r3, [r3, #8]
2000073a:	18d2      	adds	r2, r2, r3
2000073c:	687b      	ldr	r3, [r7, #4]
2000073e:	611a      	str	r2, [r3, #16]

    clear_object(object);
20000740:	687b      	ldr	r3, [r7, #4]
20000742:	0018      	movs	r0, r3
20000744:	f7ff ffba 	bl	200006bc <clear_object>
    if(object->posx < 1 || (object->posx + object->geo->sizeX) > 126) {
20000748:	687b      	ldr	r3, [r7, #4]
2000074a:	68db      	ldr	r3, [r3, #12]
2000074c:	2b00      	cmp	r3, #0
2000074e:	dd07      	ble.n	20000760 <move_object+0x4c>
20000750:	687b      	ldr	r3, [r7, #4]
20000752:	68da      	ldr	r2, [r3, #12]
20000754:	687b      	ldr	r3, [r7, #4]
20000756:	681b      	ldr	r3, [r3, #0]
20000758:	685b      	ldr	r3, [r3, #4]
2000075a:	18d3      	adds	r3, r2, r3
2000075c:	2b7e      	cmp	r3, #126	; 0x7e
2000075e:	dd04      	ble.n	2000076a <move_object+0x56>
        object->dirx = -(object->dirx);
20000760:	687b      	ldr	r3, [r7, #4]
20000762:	685b      	ldr	r3, [r3, #4]
20000764:	425a      	negs	r2, r3
20000766:	687b      	ldr	r3, [r7, #4]
20000768:	605a      	str	r2, [r3, #4]
    }
    if(object->posy < 1 || (object->posy + object->geo->sizeY) > 64) {
2000076a:	687b      	ldr	r3, [r7, #4]
2000076c:	691b      	ldr	r3, [r3, #16]
2000076e:	2b00      	cmp	r3, #0
20000770:	dd07      	ble.n	20000782 <move_object+0x6e>
20000772:	687b      	ldr	r3, [r7, #4]
20000774:	691a      	ldr	r2, [r3, #16]
20000776:	687b      	ldr	r3, [r7, #4]
20000778:	681b      	ldr	r3, [r3, #0]
2000077a:	689b      	ldr	r3, [r3, #8]
2000077c:	18d3      	adds	r3, r2, r3
2000077e:	2b40      	cmp	r3, #64	; 0x40
20000780:	dd04      	ble.n	2000078c <move_object+0x78>
        object->diry = -object->diry;
20000782:	687b      	ldr	r3, [r7, #4]
20000784:	689b      	ldr	r3, [r3, #8]
20000786:	425a      	negs	r2, r3
20000788:	687b      	ldr	r3, [r7, #4]
2000078a:	609a      	str	r2, [r3, #8]
    }
    draw_object(object);
2000078c:	687b      	ldr	r3, [r7, #4]
2000078e:	0018      	movs	r0, r3
20000790:	f7ff ff68 	bl	20000664 <draw_object>
}
20000794:	46c0      	nop			; (mov r8, r8)
20000796:	46bd      	mov	sp, r7
20000798:	b002      	add	sp, #8
2000079a:	bd80      	pop	{r7, pc}

2000079c <init_app>:
    move_object,
    set_object_speed
};

void init_app(void)
{
2000079c:	b580      	push	{r7, lr}
2000079e:	af00      	add	r7, sp, #0
     #ifdef USBDM
	 *( (unsigned long *) 0x40023830) = 0x18;
200007a0:	4b05      	ldr	r3, [pc, #20]	; (200007b8 <init_app+0x1c>)
200007a2:	2218      	movs	r2, #24
200007a4:	601a      	str	r2, [r3, #0]
	 __asm volatile( " LDR R0,=0x08000209\n BLX R0 \n");
200007a6:	4816      	ldr	r0, [pc, #88]	; (20000800 <main+0x3c>)
200007a8:	4780      	blx	r0
#endif
    *GPIO_MODER = 0x55555555;
200007aa:	4b04      	ldr	r3, [pc, #16]	; (200007bc <init_app+0x20>)
200007ac:	4a04      	ldr	r2, [pc, #16]	; (200007c0 <init_app+0x24>)
200007ae:	601a      	str	r2, [r3, #0]
}
200007b0:	46c0      	nop			; (mov r8, r8)
200007b2:	46bd      	mov	sp, r7
200007b4:	bd80      	pop	{r7, pc}
200007b6:	46c0      	nop			; (mov r8, r8)
200007b8:	40023830 	andmi	r3, r2, r0, lsr r8
200007bc:	40021000 	andmi	r1, r2, r0
200007c0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200007c4 <main>:

// ################################################################## MAIN #########################################################################
int main(int argc, char** argv)
{
200007c4:	b580      	push	{r7, lr}
200007c6:	b084      	sub	sp, #16
200007c8:	af00      	add	r7, sp, #0
200007ca:	6078      	str	r0, [r7, #4]
200007cc:	6039      	str	r1, [r7, #0]
    POBJECT p = &ball;
200007ce:	4b0b      	ldr	r3, [pc, #44]	; (200007fc <main+0x38>)
200007d0:	60fb      	str	r3, [r7, #12]
    init_app();
200007d2:	f7ff ffe3 	bl	2000079c <init_app>
    graphic_initialize();
200007d6:	f7ff fe3b 	bl	20000450 <graphic_initialize>
#ifndef SIMULATOR
    graphic_clear_screen();
200007da:	f7ff fe05 	bl	200003e8 <graphic_clear_screen>
#endif
    p->set_speed(p, 4, 1);
200007de:	68fb      	ldr	r3, [r7, #12]
200007e0:	6a1b      	ldr	r3, [r3, #32]
200007e2:	68f8      	ldr	r0, [r7, #12]
200007e4:	2201      	movs	r2, #1
200007e6:	2104      	movs	r1, #4
200007e8:	4798      	blx	r3
    while(1) {
        p->move(p);
200007ea:	68fb      	ldr	r3, [r7, #12]
200007ec:	69db      	ldr	r3, [r3, #28]
200007ee:	68fa      	ldr	r2, [r7, #12]
200007f0:	0010      	movs	r0, r2
200007f2:	4798      	blx	r3
        delay_milli(40);
200007f4:	2028      	movs	r0, #40	; 0x28
200007f6:	f7ff fc48 	bl	2000008a <delay_milli>
        p->move(p);
200007fa:	e7f6      	b.n	200007ea <main+0x26>
200007fc:	20000838 	andcs	r0, r0, r8, lsr r8
20000800:	08000209 	stmdaeq	r0, {r0, r3, r9}

20000804 <ball_geometry>:
20000804:	0000000c 	andeq	r0, r0, ip
20000808:	00000004 	andeq	r0, r0, r4
2000080c:	00000004 	andeq	r0, r0, r4
20000810:	02000100 	andeq	r0, r0, #0, 2
20000814:	01010001 	tsteq	r1, r1
20000818:	03010201 	movweq	r0, #4609	; 0x1201
2000081c:	01020002 	tsteq	r2, r2
20000820:	03020202 	movweq	r0, #8706	; 0x2202
20000824:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20000838 <ball>:
20000838:	20000804 	andcs	r0, r0, r4, lsl #16
	...
20000844:	0000000a 	andeq	r0, r0, sl
20000848:	0000000a 	andeq	r0, r0, sl
2000084c:	20000665 	andcs	r0, r0, r5, ror #12
20000850:	200006bd 			; <UNDEFINED> instruction: 0x200006bd
20000854:	20000715 	andcs	r0, r0, r5, lsl r7
20000858:	20000645 	andcs	r0, r0, r5, asr #12
2000085c:	20000508 	andcs	r0, r0, r8, lsl #10
20000860:	20000512 	andcs	r0, r0, r2, lsl r5
20000864:	2000051c 	andcs	r0, r0, ip, lsl r5
20000868:	20000526 	andcs	r0, r0, r6, lsr #10
2000086c:	20000530 	andcs	r0, r0, r0, lsr r5
20000870:	2000053a 	andcs	r0, r0, sl, lsr r5
20000874:	20000544 	andcs	r0, r0, r4, asr #10
20000878:	2000054e 	andcs	r0, r0, lr, asr #10

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000688 	andeq	r0, r0, r8, lsl #13
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000196 	muleq	r0, r6, r1
  10:	0000c90c 	andeq	ip, r0, ip, lsl #18
  14:	00002d00 	andeq	r2, r0, r0, lsl #26
	...
  24:	01700200 	cmneq	r0, r0, lsl #4
  28:	30010000 	andcc	r0, r1, r0
  2c:	00003117 	andeq	r3, r0, r7, lsl r1
  30:	08010300 	stmdaeq	r1, {r8, r9}
  34:	0000007f 	andeq	r0, r0, pc, ror r0
  38:	00007204 	andeq	r7, r0, r4, lsl #4
  3c:	34010200 	strcc	r0, [r1], #-512	; 0xfffffe00
  40:	00005c10 	andeq	r5, r0, r0, lsl ip
  44:	00780500 	rsbseq	r0, r8, r0, lsl #10
  48:	31133501 	tstcc	r3, r1, lsl #10
  4c:	00000000 	andeq	r0, r0, r0
  50:	01007905 	tsteq	r0, r5, lsl #18
  54:	00311336 	eorseq	r1, r1, r6, lsr r3
  58:	00010000 	andeq	r0, r1, r0
  5c:	00007902 	andeq	r7, r0, r2, lsl #18
  60:	03370100 	teqeq	r7, #0, 2
  64:	00000038 	andeq	r0, r0, r8, lsr r0
  68:	00016604 	andeq	r6, r1, r4, lsl #12
  6c:	3b013400 	blcc	4d074 <startup-0x1ffb2f8c>
  70:	0000a910 	andeq	sl, r0, r0, lsl r9
  74:	02c80600 	sbceq	r0, r8, #0, 12
  78:	3c010000 	stccc	0, cr0, [r1], {-0}
  7c:	0000a909 	andeq	sl, r0, r9, lsl #18
  80:	bd060000 	stclt	0, cr0, [r6, #-0]
  84:	01000000 	mrseq	r0, (UNDEF: 0)
  88:	00a9143c 	adceq	r1, r9, ip, lsr r4
  8c:	06040000 	streq	r0, [r4], -r0
  90:	000000c3 	andeq	r0, r0, r3, asr #1
  94:	a91b3c01 	ldmdbge	fp, {r0, sl, fp, ip, sp}
  98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  9c:	00787005 	rsbseq	r7, r8, r5
  a0:	b00b3d01 	andlt	r3, fp, r1, lsl #26
  a4:	0c000000 	stceq	0, cr0, [r0], {-0}
  a8:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
  ac:	00746e69 	rsbseq	r6, r4, r9, ror #28
  b0:	00005c08 	andeq	r5, r0, r8, lsl #24
  b4:	0000c000 	andeq	ip, r0, r0
  b8:	00c00900 	sbceq	r0, r0, r0, lsl #18
  bc:	00130000 	andseq	r0, r3, r0
  c0:	59070403 	stmdbpl	r7, {r0, r1, sl}
  c4:	02000001 	andeq	r0, r0, #1
  c8:	00000001 	andeq	r0, r0, r1
  cc:	68033e01 	stmdavs	r3, {r0, r9, sl, fp, ip, sp}
  d0:	02000000 	andeq	r0, r0, #0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	df0e3e01 	svcle	0x000e3e01
  dc:	0a000000 	beq	e4 <startup-0x1fffff1c>
  e0:	00006804 	andeq	r6, r0, r4, lsl #16
  e4:	00a10b00 	adceq	r0, r1, r0, lsl #22
  e8:	40010000 	andmi	r0, r1, r0
  ec:	0000c70a 	andeq	ip, r0, sl, lsl #14
  f0:	04030500 	streq	r0, [r3], #-1280	; 0xfffffb00
  f4:	04200008 	strteq	r0, [r0], #-8
  f8:	000002aa 	andeq	r0, r0, sl, lsr #5
  fc:	10470124 	subne	r0, r7, r4, lsr #2
 100:	0000017a 	andeq	r0, r0, sl, ror r1
 104:	6f656705 	svcvs	0x00656705
 108:	0f480100 	svceq	0x00480100
 10c:	000000d3 	ldrdeq	r0, [r0], -r3
 110:	00230600 	eoreq	r0, r3, r0, lsl #12
 114:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
 118:	0000a909 	andeq	sl, r0, r9, lsl #18
 11c:	28060400 	stmdacs	r6, {sl}
 120:	01000000 	mrseq	r0, (UNDEF: 0)
 124:	00a90f49 	adceq	r0, r9, r9, asr #30
 128:	06080000 	streq	r0, [r8], -r0
 12c:	00000097 	muleq	r0, r7, r0
 130:	a9094a01 	stmdbge	r9, {r0, r9, fp, lr}
 134:	0c000000 	stceq	0, cr0, [r0], {-0}
 138:	00009c06 	andeq	r9, r0, r6, lsl #24
 13c:	0f4a0100 	svceq	0x004a0100
 140:	000000a9 	andeq	r0, r0, r9, lsr #1
 144:	02230610 	eoreq	r0, r3, #16, 12	; 0x1000000
 148:	4b010000 	blmi	40150 <startup-0x1ffbfeb0>
 14c:	0001900c 	andeq	r9, r1, ip
 150:	35061400 	strcc	r1, [r6, #-1024]	; 0xfffffc00
 154:	01000001 	tsteq	r0, r1
 158:	01ac0c4c 			; <UNDEFINED> instruction: 0x01ac0c4c
 15c:	06180000 	ldreq	r0, [r8], -r0
 160:	00000019 	andeq	r0, r0, r9, lsl r0
 164:	c80c4d01 	stmdagt	ip, {r0, r8, sl, fp, lr}
 168:	1c000001 	stcne	0, cr0, [r0], {1}
 16c:	00008d06 	andeq	r8, r0, r6, lsl #26
 170:	0c4e0100 	stfeqe	f0, [lr], {-0}
 174:	000001ee 	andeq	r0, r0, lr, ror #3
 178:	850c0020 	strhi	r0, [ip, #-32]	; 0xffffffe0
 17c:	0d000001 	stceq	0, cr0, [r0, #-4]
 180:	00000185 	andeq	r0, r0, r5, lsl #3
 184:	8b040a00 	blhi	10298c <startup-0x1fefd674>
 188:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 18c:	000002fc 	strdeq	r0, [r0], -ip
 190:	017a040a 	cmneq	sl, sl, lsl #8
 194:	a10c0000 	mrsge	r0, (UNDEF: 12)
 198:	0d000001 	stceq	0, cr0, [r0, #-4]
 19c:	000001a1 	andeq	r0, r0, r1, lsr #3
 1a0:	a7040a00 	strge	r0, [r4, -r0, lsl #20]
 1a4:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 1a8:	000002fc 	strdeq	r0, [r0], -ip
 1ac:	0196040a 	orrseq	r0, r6, sl, lsl #8
 1b0:	bd0c0000 	stclt	0, cr0, [ip, #-0]
 1b4:	0d000001 	stceq	0, cr0, [r0, #-4]
 1b8:	000001bd 			; <UNDEFINED> instruction: 0x000001bd
 1bc:	c3040a00 	movwgt	r0, #18944	; 0x4a00
 1c0:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 1c4:	000002fc 	strdeq	r0, [r0], -ip
 1c8:	01b2040a 			; <UNDEFINED> instruction: 0x01b2040a
 1cc:	e30c0000 	movw	r0, #49152	; 0xc000
 1d0:	0d000001 	stceq	0, cr0, [r0, #-4]
 1d4:	000001e3 	andeq	r0, r0, r3, ror #3
 1d8:	0000a90d 	andeq	sl, r0, sp, lsl #18
 1dc:	00a90d00 	adceq	r0, r9, r0, lsl #26
 1e0:	0a000000 	beq	1e8 <startup-0x1ffffe18>
 1e4:	0001e904 	andeq	lr, r1, r4, lsl #18
 1e8:	02fc0e00 	rscseq	r0, ip, #0, 28
 1ec:	040a0000 	streq	r0, [sl], #-0
 1f0:	000001ce 	andeq	r0, r0, lr, asr #3
 1f4:	0002f502 	andeq	pc, r2, r2, lsl #10
 1f8:	03510100 	cmpeq	r1, #0, 2
 1fc:	000000f7 	strdeq	r0, [r0], -r7
 200:	0002f402 	andeq	pc, r2, r2, lsl #8
 204:	0c510100 	ldfeqe	f0, [r1], {-0}
 208:	0000020c 	andeq	r0, r0, ip, lsl #4
 20c:	00f7040a 	rscseq	r0, r7, sl, lsl #8
 210:	1e0f0000 	cdpne	0, 0, cr0, cr15, cr0, {0}
 214:	01000002 	tsteq	r0, r2
 218:	f40f017e 	vst4.16	{d0,d2,d4,d6}, [pc :256], lr
 21c:	05000001 	streq	r0, [r0, #-1]
 220:	00083803 	andeq	r3, r8, r3, lsl #16
 224:	01001020 	tsteq	r0, r0, lsr #32
 228:	96010000 	strls	r0, [r1], -r0
 22c:	00a90501 	adceq	r0, r9, r1, lsl #10
 230:	07c40000 	strbeq	r0, [r4, r0]
 234:	003c2000 	eorseq	r2, ip, r0
 238:	9c010000 	stcls	0, cr0, [r1], {-0}
 23c:	0000026f 	andeq	r0, r0, pc, ror #4
 240:	00021211 	andeq	r1, r2, r1, lsl r2
 244:	01960100 	orrseq	r0, r6, r0, lsl #2
 248:	0000a90e 	andeq	sl, r0, lr, lsl #18
 24c:	6c910200 	lfmvs	f0, 4, [r1], {0}
 250:	00001e11 	andeq	r1, r0, r1, lsl lr
 254:	01960100 	orrseq	r0, r6, r0, lsl #2
 258:	00026f1b 	andeq	r6, r2, fp, lsl pc
 25c:	68910200 	ldmvs	r1, {r9}
 260:	01007012 	tsteq	r0, r2, lsl r0
 264:	000d0198 	muleq	sp, r8, r1
 268:	02000002 	andeq	r0, r0, #2
 26c:	0a007491 	beq	1d4b8 <startup-0x1ffe2b48>
 270:	00027504 	andeq	r7, r2, r4, lsl #10
 274:	7b040a00 	blvc	102a7c <startup-0x1fefd584>
 278:	03000002 	movweq	r0, #2
 27c:	00880801 	addeq	r0, r8, r1, lsl #16
 280:	50130000 	andspl	r0, r3, r0
 284:	01000001 	tsteq	r0, r1
 288:	9c06018c 	stflss	f0, [r6], {140}	; 0x8c
 28c:	28200007 	stmdacs	r0!, {r0, r1, r2}
 290:	01000000 	mrseq	r0, (UNDEF: 0)
 294:	02d2149c 	sbcseq	r1, r2, #156, 8	; 0x9c000000
 298:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
 29c:	07140601 	ldreq	r0, [r4, -r1, lsl #12]
 2a0:	00882000 	addeq	r2, r8, r0
 2a4:	9c010000 	stcls	0, cr0, [r1], {-0}
 2a8:	000002bd 			; <UNDEFINED> instruction: 0x000002bd
 2ac:	0002d711 	andeq	sp, r2, r1, lsl r7
 2b0:	016e0100 	cmneq	lr, r0, lsl #2
 2b4:	0002001a 	andeq	r0, r2, sl, lsl r0
 2b8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 2bc:	02911400 	addseq	r1, r1, #0, 8
 2c0:	67010000 	strvs	r0, [r1, -r0]
 2c4:	06bc0601 	ldrteq	r0, [ip], r1, lsl #12
 2c8:	00582000 	subseq	r2, r8, r0
 2cc:	9c010000 	stcls	0, cr0, [r1], {-0}
 2d0:	000002fb 	strdeq	r0, [r0], -fp
 2d4:	01004f15 	tsteq	r0, r5, lsl pc
 2d8:	001b0167 	andseq	r0, fp, r7, ror #2
 2dc:	02000002 	andeq	r0, r0, #2
 2e0:	c4166c91 	ldrgt	r6, [r6], #-3217	; 0xfffff36f
 2e4:	46200006 	strtmi	r0, [r0], -r6
 2e8:	12000000 	andne	r0, r0, #0
 2ec:	69010069 	stmdbvs	r1, {r0, r3, r5, r6}
 2f0:	00a90d01 	adceq	r0, r9, r1, lsl #26
 2f4:	91020000 	mrsls	r0, (UNDEF: 2)
 2f8:	14000074 	strne	r0, [r0], #-116	; 0xffffff8c
 2fc:	000002af 	andeq	r0, r0, pc, lsr #5
 300:	06016001 	streq	r6, [r1], -r1
 304:	20000664 	andcs	r0, r0, r4, ror #12
 308:	00000058 	andeq	r0, r0, r8, asr r0
 30c:	03399c01 	teqeq	r9, #256	; 0x100
 310:	4f150000 	svcmi	0x00150000
 314:	01600100 	cmneq	r0, r0, lsl #2
 318:	0002001a 	andeq	r0, r2, sl, lsl r0
 31c:	6c910200 	lfmvs	f0, 4, [r1], {0}
 320:	00066c16 	andeq	r6, r6, r6, lsl ip
 324:	00004620 	andeq	r4, r0, r0, lsr #12
 328:	00691200 	rsbeq	r1, r9, r0, lsl #4
 32c:	0d016201 	sfmeq	f6, 4, [r1, #-4]
 330:	000000a9 	andeq	r0, r0, r9, lsr #1
 334:	00749102 	rsbseq	r9, r4, r2, lsl #2
 338:	02581700 	subseq	r1, r8, #0, 14
 33c:	5a010000 	bpl	40344 <startup-0x1ffbfcbc>
 340:	06440601 	strbeq	r0, [r4], -r1, lsl #12
 344:	00202000 	eoreq	r2, r0, r0
 348:	9c010000 	stcls	0, cr0, [r1], {-0}
 34c:	0000037f 	andeq	r0, r0, pc, ror r3
 350:	01006f15 	tsteq	r0, r5, lsl pc
 354:	001f015a 	andseq	r0, pc, sl, asr r1	; <UNPREDICTABLE>
 358:	02000002 	andeq	r0, r0, #2
 35c:	17117491 			; <UNDEFINED> instruction: 0x17117491
 360:	01000002 	tsteq	r0, r2
 364:	a926015a 	stmdbge	r6!, {r1, r3, r4, r6, r8}
 368:	02000000 	andeq	r0, r0, #0
 36c:	12117091 	andsne	r7, r1, #145	; 0x91
 370:	01000000 	mrseq	r0, (UNDEF: 0)
 374:	a932015a 	ldmdbge	r2!, {r1, r3, r4, r6, r8}
 378:	02000000 	andeq	r0, r0, #0
 37c:	14006c91 	strne	r6, [r0], #-3217	; 0xfffff36f
 380:	0000006c 	andeq	r0, r0, ip, rrx
 384:	06011f01 	streq	r1, [r1], -r1, lsl #30
 388:	200004ac 	andcs	r0, r0, ip, lsr #9
 38c:	00000198 	muleq	r0, r8, r1
 390:	04019c01 	streq	r9, [r1], #-3073	; 0xfffff3ff
 394:	78150000 	ldmdavc	r5, {}	; <UNPREDICTABLE>
 398:	011f0100 	tsteq	pc, r0, lsl #2
 39c:	0000a910 	andeq	sl, r0, r0, lsl r9
 3a0:	54910200 	ldrpl	r0, [r1], #512	; 0x200
 3a4:	01007915 	tsteq	r0, r5, lsl r9
 3a8:	a917011f 	ldmdbge	r7, {r0, r1, r2, r3, r4, r8}
 3ac:	02000000 	andeq	r0, r0, #0
 3b0:	73155091 	tstvc	r5, #145	; 0x91
 3b4:	01007465 	tsteq	r0, r5, ror #8
 3b8:	a91e011f 	ldmdbge	lr, {r0, r1, r2, r3, r4, r8}
 3bc:	02000000 	andeq	r0, r0, #0
 3c0:	280f4c91 	stmdacs	pc, {r0, r4, r7, sl, fp, lr}	; <UNPREDICTABLE>
 3c4:	01000002 	tsteq	r0, r2
 3c8:	250d0121 	strcs	r0, [sp, #-289]	; 0xfffffedf
 3cc:	02000000 	andeq	r0, r0, #0
 3d0:	63126791 	tstvs	r2, #38010880	; 0x2440000
 3d4:	01210100 			; <UNDEFINED> instruction: 0x01210100
 3d8:	00002513 	andeq	r2, r0, r3, lsl r5
 3dc:	5f910200 	svcpl	0x00910200
 3e0:	00017f0f 	andeq	r7, r1, pc, lsl #30
 3e4:	01210100 			; <UNDEFINED> instruction: 0x01210100
 3e8:	00002516 	andeq	r2, r0, r6, lsl r5
 3ec:	66910200 	ldrvs	r0, [r1], r0, lsl #4
 3f0:	00022d0f 	andeq	r2, r2, pc, lsl #26
 3f4:	01220100 			; <UNDEFINED> instruction: 0x01220100
 3f8:	0000a909 	andeq	sl, r0, r9, lsl #18
 3fc:	60910200 	addsvs	r0, r1, r0, lsl #4
 400:	01111800 	tsteq	r1, r0, lsl #16
 404:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
 408:	04500601 	ldrbeq	r0, [r0], #-1537	; 0xfffff9ff
 40c:	005c2000 	subseq	r2, ip, r0
 410:	9c010000 	stcls	0, cr0, [r1], {-0}
 414:	00027c14 	andeq	r7, r2, r4, lsl ip
 418:	01010100 	mrseq	r0, (UNDEF: 17)
 41c:	0003e806 	andeq	lr, r3, r6, lsl #16
 420:	00006820 	andeq	r6, r0, r0, lsr #16
 424:	489c0100 	ldmmi	ip, {r8}
 428:	12000004 	andne	r0, r0, #4
 42c:	03010069 	movweq	r0, #4201	; 0x1069
 430:	00250d01 	eoreq	r0, r5, r1, lsl #26
 434:	91020000 	mrsls	r0, (UNDEF: 2)
 438:	006a1277 	rsbeq	r1, sl, r7, ror r2
 43c:	10010301 	andne	r0, r1, r1, lsl #6
 440:	00000025 	andeq	r0, r0, r5, lsr #32
 444:	00769102 	rsbseq	r9, r6, r2, lsl #2
 448:	0002de19 	andeq	sp, r2, r9, lsl lr
 44c:	06f80100 	ldrbteq	r0, [r8], r0, lsl #2
 450:	200003a2 	andcs	r0, r0, r2, lsr #7
 454:	00000046 	andeq	r0, r0, r6, asr #32
 458:	047d9c01 	ldrbteq	r9, [sp], #-3073	; 0xfffff3ff
 45c:	ec1a0000 	ldc	0, cr0, [sl], {-0}
 460:	01000002 	tsteq	r0, r2
 464:	002524f8 	strdeq	r2, [r5], -r8	; <UNPREDICTABLE>
 468:	91020000 	mrsls	r0, (UNDEF: 2)
 46c:	017f1a77 	cmneq	pc, r7, ror sl	; <UNPREDICTABLE>
 470:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
 474:	00002535 	andeq	r2, r0, r5, lsr r5
 478:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 47c:	02451900 	subeq	r1, r5, #0, 18
 480:	ef010000 	svc	0x00010000
 484:	00035c06 	andeq	r5, r3, r6, lsl #24
 488:	00004620 	andeq	r4, r0, r0, lsr #12
 48c:	b29c0100 	addslt	r0, ip, #0, 2
 490:	1a000004 	bne	4a8 <startup-0x1ffffb58>
 494:	00000067 	andeq	r0, r0, r7, rrx
 498:	2521ef01 	strcs	lr, [r1, #-3841]!	; 0xfffff0ff
 49c:	02000000 	andeq	r0, r0, #0
 4a0:	7f1a7791 	svcvc	0x001a7791
 4a4:	01000001 	tsteq	r0, r1
 4a8:	00252fef 	eoreq	r2, r5, pc, ror #31
 4ac:	91020000 	mrsls	r0, (UNDEF: 2)
 4b0:	af1b0076 	svcge	0x001b0076
 4b4:	01000000 	mrseq	r0, (UNDEF: 0)
 4b8:	02ee0ddc 	rsceq	r0, lr, #220, 26	; 0x3700
 4bc:	006e2000 	rsbeq	r2, lr, r0
 4c0:	9c010000 	stcls	0, cr0, [r1], {-0}
 4c4:	000004e7 	andeq	r0, r0, r7, ror #9
 4c8:	0002331a 	andeq	r3, r2, sl, lsl r3
 4cc:	23dc0100 	bicscs	r0, ip, #0, 2
 4d0:	00000025 	andeq	r0, r0, r5, lsr #32
 4d4:	1a779102 	bne	1de48e4 <startup-0x1e21b71c>
 4d8:	0000017f 	andeq	r0, r0, pc, ror r1
 4dc:	2532dc01 	ldrcs	sp, [r2, #-3073]!	; 0xfffff3ff
 4e0:	02000000 	andeq	r0, r0, #0
 4e4:	1c007691 	stcne	6, cr7, [r0], {145}	; 0x91
 4e8:	0000005a 	andeq	r0, r0, sl, asr r0
 4ec:	2510d601 	ldrcs	sp, [r0, #-1537]	; 0xfffff9ff
 4f0:	c4000000 	strgt	r0, [r0], #-0
 4f4:	2a200002 	bcs	800504 <startup-0x1f7ffafc>
 4f8:	01000000 	mrseq	r0, (UNDEF: 0)
 4fc:	0005119c 	muleq	r5, ip, r1
 500:	017f1a00 	cmneq	pc, r0, lsl #20
 504:	d6010000 	strle	r0, [r1], -r0
 508:	0000252a 	andeq	r2, r0, sl, lsr #10
 50c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 510:	02bb1c00 	adcseq	r1, fp, #0, 24
 514:	bd010000 	stclt	0, cr0, [r1, #-0]
 518:	00002510 	andeq	r2, r0, r0, lsl r5
 51c:	00023000 	andeq	r3, r2, r0
 520:	00009420 	andeq	r9, r0, r0, lsr #8
 524:	489c0100 	ldmmi	ip, {r8}
 528:	1a000005 	bne	544 <startup-0x1ffffabc>
 52c:	0000017f 	andeq	r0, r0, pc, ror r1
 530:	2525bd01 	strcs	fp, [r5, #-3329]!	; 0xfffff2ff
 534:	02000000 	andeq	r0, r0, #0
 538:	631d6f91 	tstvs	sp, #580	; 0x244
 53c:	0dbf0100 	ldfeqs	f0, [pc]	; 544 <startup-0x1ffffabc>
 540:	00000025 	andeq	r0, r0, r5, lsr #32
 544:	00779102 	rsbseq	r9, r7, r2, lsl #2
 548:	0002691b 	andeq	r6, r2, fp, lsl r9
 54c:	0da70100 	stfeqs	f0, [r7]
 550:	200001c2 	andcs	r0, r0, r2, asr #3
 554:	0000006e 	andeq	r0, r0, lr, rrx
 558:	056c9c01 	strbeq	r9, [ip, #-3073]!	; 0xfffff3ff
 55c:	631d0000 	tstvs	sp, #0
 560:	0da90100 	stfeqs	f0, [r9]
 564:	00000025 	andeq	r0, r0, r5, lsr #32
 568:	00779102 	rsbseq	r9, r7, r2, lsl #2
 56c:	00017819 	andeq	r7, r1, r9, lsl r8
 570:	06940100 	ldreq	r0, [r4], r0, lsl #2
 574:	20000168 	andcs	r0, r0, r8, ror #2
 578:	0000005a 	andeq	r0, r0, sl, asr r0
 57c:	05929c01 	ldreq	r9, [r2, #3073]	; 0xc01
 580:	7f1a0000 	svcvc	0x001a0000
 584:	01000001 	tsteq	r0, r1
 588:	00252094 	mlaeq	r5, r4, r0, r2
 58c:	91020000 	mrsls	r0, (UNDEF: 2)
 590:	241e0077 	ldrcs	r0, [lr], #-119	; 0xffffff89
 594:	01000001 	tsteq	r0, r1
 598:	0118068b 	tsteq	r8, fp, lsl #13
 59c:	00502000 	subseq	r2, r0, r0
 5a0:	9c010000 	stcls	0, cr0, [r1], {-0}
 5a4:	000005c3 	andeq	r0, r0, r3, asr #11
 5a8:	0100781f 	tsteq	r0, pc, lsl r8
 5ac:	0025258b 	eoreq	r2, r5, fp, lsl #11
 5b0:	91020000 	mrsls	r0, (UNDEF: 2)
 5b4:	00631d6f 	rsbeq	r1, r3, pc, ror #26
 5b8:	250d8d01 	strcs	r8, [sp, #-3329]	; 0xfffff2ff
 5bc:	02000000 	andeq	r0, r0, #0
 5c0:	1e007791 	mcrne	7, 0, r7, cr0, cr1, {4}
 5c4:	0000013b 	andeq	r0, r0, fp, lsr r1
 5c8:	c6068201 	strgt	r8, [r6], -r1, lsl #4
 5cc:	52200000 	eorpl	r0, r0, #0
 5d0:	01000000 	mrseq	r0, (UNDEF: 0)
 5d4:	0005f49c 	muleq	r5, ip, r4
 5d8:	00781f00 	rsbseq	r1, r8, r0, lsl #30
 5dc:	25238201 	strcs	r8, [r3, #-513]!	; 0xfffffdff
 5e0:	02000000 	andeq	r0, r0, #0
 5e4:	631d6f91 	tstvs	sp, #580	; 0x244
 5e8:	0d840100 	stfeqs	f0, [r4]
 5ec:	00000025 	andeq	r0, r0, r5, lsr #32
 5f0:	00779102 	rsbseq	r9, r7, r2, lsl #2
 5f4:	00029e20 	andeq	r9, r2, r0, lsr #28
 5f8:	067a0100 	ldrbteq	r0, [sl], -r0, lsl #2
 5fc:	200000b4 	strhcs	r0, [r0], -r4
 600:	00000012 	andeq	r0, r0, r2, lsl r0
 604:	39199c01 	ldmdbcc	r9, {r0, sl, fp, ip, pc}
 608:	01000002 	tsteq	r0, r2
 60c:	008a066e 	addeq	r0, sl, lr, ror #12
 610:	002a2000 	eoreq	r2, sl, r0
 614:	9c010000 	stcls	0, cr0, [r1], {-0}
 618:	0000062b 	andeq	r0, r0, fp, lsr #12
 61c:	00736d1f 	rsbseq	r6, r3, pc, lsl sp
 620:	c01f6e01 	andsgt	r6, pc, r1, lsl #28
 624:	02000000 	andeq	r0, r0, #0
 628:	19007491 	stmdbne	r0, {r0, r4, r7, sl, ip, sp, lr}
 62c:	00000105 	andeq	r0, r0, r5, lsl #2
 630:	54066001 	strpl	r6, [r6], #-1
 634:	36200000 	strtcc	r0, [r0], -r0
 638:	01000000 	mrseq	r0, (UNDEF: 0)
 63c:	0006679c 	muleq	r6, ip, r7
 640:	73751f00 	cmnvc	r5, #0, 30
 644:	1f600100 	svcne	0x00600100
 648:	000000c0 	andeq	r0, r0, r0, asr #1
 64c:	166c9102 	strbtne	r9, [ip], -r2, lsl #2
 650:	2000005c 	andcs	r0, r0, ip, asr r0
 654:	00000024 	andeq	r0, r0, r4, lsr #32
 658:	0100691d 	tsteq	r0, sp, lsl r9
 65c:	00a90d66 	adceq	r0, r9, r6, ror #26
 660:	91020000 	mrsls	r0, (UNDEF: 2)
 664:	21000074 	tstcs	r0, r4, ror r0
 668:	0000018a 	andeq	r0, r0, sl, lsl #3
 66c:	10065401 	andne	r5, r6, r1, lsl #8
 670:	44200000 	strtmi	r0, [r0], #-0
 674:	01000000 	mrseq	r0, (UNDEF: 0)
 678:	000a219c 	muleq	sl, ip, r1
 67c:	02010000 	andeq	r0, r1, #0
 680:	00000048 	andeq	r0, r0, r8, asr #32
 684:	00000c20 	andeq	r0, r0, r0, lsr #24
 688:	009c0100 	addseq	r0, ip, r0, lsl #2

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13490b39 	movtne	r0, #39737	; 0x9b39
  20:	24030000 	strcs	r0, [r3], #-0
  24:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  28:	000e030b 	andeq	r0, lr, fp, lsl #6
  2c:	01130400 	tsteq	r3, r0, lsl #8
  30:	0b0b0e03 	bleq	2c3844 <startup-0x1fd3c7bc>
  34:	0b3b0b3a 	bleq	ec2d24 <startup-0x1f13d2dc>
  38:	13010b39 	movwne	r0, #6969	; 0x1b39
  3c:	0d050000 	stceq	0, cr0, [r5, #-0]
  40:	3a080300 	bcc	200c48 <startup-0x1fdff3b8>
  44:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  48:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  4c:	0600000b 	streq	r0, [r0], -fp
  50:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  54:	0b3b0b3a 	bleq	ec2d44 <startup-0x1f13d2bc>
  58:	13490b39 	movtne	r0, #39737	; 0x9b39
  5c:	00000b38 	andeq	r0, r0, r8, lsr fp
  60:	0b002407 	bleq	9084 <startup-0x1fff6f7c>
  64:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  68:	08000008 	stmdaeq	r0, {r3}
  6c:	13490101 	movtne	r0, #37121	; 0x9101
  70:	00001301 	andeq	r1, r0, r1, lsl #6
  74:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
  78:	000b2f13 	andeq	r2, fp, r3, lsl pc
  7c:	000f0a00 	andeq	r0, pc, r0, lsl #20
  80:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  84:	340b0000 	strcc	r0, [fp], #-0
  88:	3a0e0300 	bcc	380c90 <startup-0x1fc7f370>
  8c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  90:	3f13490b 	svccc	0x0013490b
  94:	00180219 	andseq	r0, r8, r9, lsl r2
  98:	01150c00 	tsteq	r5, r0, lsl #24
  9c:	13011927 	movwne	r1, #6439	; 0x1927
  a0:	050d0000 	streq	r0, [sp, #-0]
  a4:	00134900 	andseq	r4, r3, r0, lsl #18
  a8:	00130e00 	andseq	r0, r3, r0, lsl #28
  ac:	193c0e03 	ldmdbne	ip!, {r0, r1, r9, sl, fp}
  b0:	340f0000 	strcc	r0, [pc], #-0	; b8 <startup-0x1fffff48>
  b4:	3a0e0300 	bcc	380cbc <startup-0x1fc7f344>
  b8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  bc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  c0:	10000018 	andne	r0, r0, r8, lsl r0
  c4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  c8:	0b3a0e03 	bleq	e838dc <startup-0x1f17c724>
  cc:	0b39053b 	bleq	e415c0 <startup-0x1f1bea40>
  d0:	13491927 	movtne	r1, #39207	; 0x9927
  d4:	06120111 			; <UNDEFINED> instruction: 0x06120111
  d8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  dc:	00130119 	andseq	r0, r3, r9, lsl r1
  e0:	00051100 	andeq	r1, r5, r0, lsl #2
  e4:	0b3a0e03 	bleq	e838f8 <startup-0x1f17c708>
  e8:	0b39053b 	bleq	e415dc <startup-0x1f1bea24>
  ec:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  f0:	34120000 	ldrcc	r0, [r2], #-0
  f4:	3a080300 	bcc	200cfc <startup-0x1fdff304>
  f8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  fc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 100:	13000018 	movwne	r0, #24
 104:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 108:	0b3a0e03 	bleq	e8391c <startup-0x1f17c6e4>
 10c:	0b39053b 	bleq	e41600 <startup-0x1f1bea00>
 110:	01111927 	tsteq	r1, r7, lsr #18
 114:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 118:	00194297 	mulseq	r9, r7, r2
 11c:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
 120:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 124:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 128:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 12c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 130:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 134:	00130119 	andseq	r0, r3, r9, lsl r1
 138:	00051500 	andeq	r1, r5, r0, lsl #10
 13c:	0b3a0803 	bleq	e82150 <startup-0x1f17deb0>
 140:	0b39053b 	bleq	e41634 <startup-0x1f1be9cc>
 144:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 148:	0b160000 	bleq	580150 <startup-0x1fa7feb0>
 14c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 150:	17000006 	strne	r0, [r0, -r6]
 154:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 158:	0b3a0e03 	bleq	e8396c <startup-0x1f17c694>
 15c:	0b39053b 	bleq	e41650 <startup-0x1f1be9b0>
 160:	01111927 	tsteq	r1, r7, lsr #18
 164:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 168:	01194297 			; <UNDEFINED> instruction: 0x01194297
 16c:	18000013 	stmdane	r0, {r0, r1, r4}
 170:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 174:	0b3a0e03 	bleq	e83988 <startup-0x1f17c678>
 178:	0b39053b 	bleq	e4166c <startup-0x1f1be994>
 17c:	01111927 	tsteq	r1, r7, lsr #18
 180:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 184:	00194296 	mulseq	r9, r6, r2
 188:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
 18c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 190:	0b3b0b3a 	bleq	ec2e80 <startup-0x1f13d180>
 194:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 198:	06120111 			; <UNDEFINED> instruction: 0x06120111
 19c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1a0:	00130119 	andseq	r0, r3, r9, lsl r1
 1a4:	00051a00 	andeq	r1, r5, r0, lsl #20
 1a8:	0b3a0e03 	bleq	e839bc <startup-0x1f17c644>
 1ac:	0b390b3b 	bleq	e42ea0 <startup-0x1f1bd160>
 1b0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1b4:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
 1b8:	3a0e0301 	bcc	380dc4 <startup-0x1fc7f23c>
 1bc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1c0:	1119270b 	tstne	r9, fp, lsl #14
 1c4:	40061201 	andmi	r1, r6, r1, lsl #4
 1c8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1cc:	00001301 	andeq	r1, r0, r1, lsl #6
 1d0:	03012e1c 	movweq	r2, #7708	; 0x1e1c
 1d4:	3b0b3a0e 	blcc	2cea14 <startup-0x1fd315ec>
 1d8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 1dc:	11134919 	tstne	r3, r9, lsl r9
 1e0:	40061201 	andmi	r1, r6, r1, lsl #4
 1e4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1e8:	00001301 	andeq	r1, r0, r1, lsl #6
 1ec:	0300341d 	movweq	r3, #1053	; 0x41d
 1f0:	3b0b3a08 	blcc	2cea18 <startup-0x1fd315e8>
 1f4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 1f8:	00180213 	andseq	r0, r8, r3, lsl r2
 1fc:	012e1e00 			; <UNDEFINED> instruction: 0x012e1e00
 200:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 204:	0b3b0b3a 	bleq	ec2ef4 <startup-0x1f13d10c>
 208:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 20c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 210:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 214:	00130119 	andseq	r0, r3, r9, lsl r1
 218:	00051f00 	andeq	r1, r5, r0, lsl #30
 21c:	0b3a0803 	bleq	e82230 <startup-0x1f17ddd0>
 220:	0b390b3b 	bleq	e42f14 <startup-0x1f1bd0ec>
 224:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 228:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
 22c:	03193f00 	tsteq	r9, #0, 30
 230:	3b0b3a0e 	blcc	2cea70 <startup-0x1fd31590>
 234:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 238:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 23c:	96184006 	ldrls	r4, [r8], -r6
 240:	00001942 	andeq	r1, r0, r2, asr #18
 244:	3f002e21 	svccc	0x00002e21
 248:	3a0e0319 	bcc	380eb4 <startup-0x1fc7f14c>
 24c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 250:	1119270b 	tstne	r9, fp, lsl #14
 254:	40061201 	andmi	r1, r6, r1, lsl #4
 258:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 25c:	Address 0x0000025c is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000007f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000800 	andcs	r0, r0, r0, lsl #16
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000430 	andeq	r0, r0, r0, lsr r4
   4:	004d0003 	subeq	r0, sp, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	696e654c 	stmdbvs	lr!, {r2, r3, r6, r8, sl, sp, lr}^
  28:	65442f61 	strbvs	r2, [r4, #-3937]	; 0xfffff09f
  2c:	6f746b73 	svcvs	0x00746b73
  30:	4f4d2f70 	svcmi	0x004d2f70
  34:	6f572d50 	svcvs	0x00572d50
  38:	70736b72 	rsbsvc	r6, r3, r2, ror fp
  3c:	2f656361 	svccs	0x00656361
  40:	5f707055 	svcpl	0x00707055
  44:	00325f33 	eorseq	r5, r2, r3, lsr pc
  48:	61747300 	cmnvs	r4, r0, lsl #6
  4c:	70757472 	rsbsvc	r7, r5, r2, ror r4
  50:	0100632e 	tsteq	r0, lr, lsr #6
  54:	05000000 	streq	r0, [r0, #-0]
  58:	02050001 	andeq	r0, r5, #1
  5c:	20000000 	andcs	r0, r0, r0
  60:	13050514 	movwne	r0, #21780	; 0x5514
  64:	052f2121 	streq	r2, [pc, #-289]!	; ffffff4b <ball+0xdffff713>
  68:	03022101 	movweq	r2, #8449	; 0x2101
  6c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
  70:	02050001 	andeq	r0, r5, #1
  74:	20000010 	andcs	r0, r0, r0, lsl r0
  78:	0100d403 	tsteq	r0, r3, lsl #8
  7c:	05300505 	ldreq	r0, [r0, #-1285]!	; 0xfffffafb
  80:	0505200f 	streq	r2, [r5, #-15]
  84:	200f052f 	andcs	r0, pc, pc, lsr #10
  88:	052f0505 	streq	r0, [pc, #-1285]!	; fffffb8b <ball+0xdffff353>
  8c:	0505200e 	streq	r2, [r5, #-14]
  90:	200f052f 	andcs	r0, pc, pc, lsr #10
  94:	052f0a05 	streq	r0, [pc, #-2565]!	; fffff697 <ball+0xdfffee5f>
  98:	0402000c 	streq	r0, [r2], #-12
  9c:	16052001 	strne	r2, [r5], -r1
  a0:	01040200 	mrseq	r0, R12_usr
  a4:	000a052e 	andeq	r0, sl, lr, lsr #10
  a8:	3c010402 	cfstrscc	mvf0, [r1], {2}
  ac:	05220505 	streq	r0, [r2, #-1285]!	; 0xfffffafb
  b0:	0105200f 	tsteq	r5, pc
  b4:	0d05a12f 	stfeqd	f2, [r5, #-188]	; 0xffffff44
  b8:	2e05054f 	cfsh32cs	mvfx0, mvfx5, #47
  bc:	02000905 	andeq	r0, r0, #81920	; 0x14000
  c0:	00210304 	eoreq	r0, r1, r4, lsl #6
  c4:	2f030402 	svccs	0x00030402
  c8:	03040200 	movweq	r0, #16896	; 0x4200
  cc:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
  d0:	1d052f03 	stcne	15, cr2, [r5, #-12]
  d4:	03040200 	movweq	r0, #16896	; 0x4200
  d8:	0016052a 	andseq	r0, r6, sl, lsr #10
  dc:	3c010402 	cfstrscc	mvf0, [r1], {2}
  e0:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
  e4:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
  e8:	055b4201 	ldrbeq	r4, [fp, #-513]	; 0xfffffdff
  ec:	09054f0a 	stmdbeq	r5, {r1, r3, r8, r9, sl, fp, lr}
  f0:	590b0521 	stmdbpl	fp, {r0, r5, r8, sl}
  f4:	053a0a05 	ldreq	r0, [sl, #-2565]!	; 0xfffff5fb
  f8:	055b4001 	ldrbeq	r4, [fp, #-1]
  fc:	052f2f05 	streq	r2, [pc, #-3845]!	; fffff1ff <ball+0xdfffe9c7>
 100:	05412f01 	strbeq	r2, [r1, #-3841]	; 0xfffff0ff
 104:	07056809 	streq	r6, [r5, -r9, lsl #16]
 108:	15054b20 	strne	r4, [r5, #-2848]	; 0xfffff4e0
 10c:	66070567 	strvs	r0, [r7], -r7, ror #10
 110:	05750505 	ldrbeq	r0, [r5, #-1285]!	; 0xfffffafb
 114:	01052013 	tsteq	r5, r3, lsl r0
 118:	0905773d 	stmdbeq	r5, {r0, r2, r3, r4, r5, r8, r9, sl, ip, sp, lr}
 11c:	20070568 	andcs	r0, r7, r8, ror #10
 120:	0505674b 	streq	r6, [r5, #-1867]	; 0xfffff8b5
 124:	201305bb 			; <UNDEFINED> instruction: 0x201305bb
 128:	773d0105 	ldrvc	r0, [sp, -r5, lsl #2]!
 12c:	05670505 	strbeq	r0, [r7, #-1285]!	; 0xfffffafb
 130:	ba100301 	blt	400d3c <startup-0x1fbff2c4>
 134:	72030905 	andvc	r0, r3, #81920	; 0x14000
 138:	3d223d20 	stccc	13, cr3, [r2, #-128]!	; 0xffffff80
 13c:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
 140:	01053d22 	tsteq	r5, r2, lsr #26
 144:	05054c22 	streq	r4, [r5, #-3106]	; 0xfffff3de
 148:	11053d3f 	tstne	r5, pc, lsr sp
 14c:	2f050520 	svccs	0x00050520
 150:	09053d3d 	stmdbeq	r5, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 154:	1c053d31 	stcne	13, cr3, [r5], {49}	; 0x31
 158:	3c0b052f 	cfstr32cc	mvfx0, [fp], {47}	; 0x2f
 15c:	3d4b0905 	vstrcc.16	s1, [fp, #-10]	; <UNPREDICTABLE>
 160:	052f0b05 	streq	r0, [pc, #-2821]!	; fffff663 <ball+0xdfffee2b>
 164:	0d054509 	cfstr32eq	mvfx4, [r5, #-36]	; 0xffffffdc
 168:	22050526 	andcs	r0, r5, #159383552	; 0x9800000
 16c:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
 170:	05bd2f01 	ldreq	r2, [sp, #3841]!	; 0xf01
 174:	053d6805 	ldreq	r6, [sp, #-2053]!	; 0xfffff7fb
 178:	05052011 	streq	r2, [r5, #-17]	; 0xffffffef
 17c:	2f593d2f 	svccs	0x00593d2f
 180:	2f09053d 	svccs	0x0009053d
 184:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
 188:	053d4b05 	ldreq	r4, [sp, #-2821]!	; 0xfffff4fb
 18c:	13052011 	movwne	r2, #20497	; 0x5011
 190:	4a070530 	bmi	1c1658 <startup-0x1fe3e9a8>
 194:	3d210905 			; <UNDEFINED> instruction: 0x3d210905
 198:	05301305 	ldreq	r1, [r0, #-773]!	; 0xfffffcfb
 19c:	09054a07 	stmdbeq	r5, {r0, r1, r2, r9, fp, lr}
 1a0:	0c053d21 	stceq	13, cr3, [r5], {33}	; 0x21
 1a4:	3d010530 	cfstr32cc	mvfx0, [r1, #-192]	; 0xffffff40
 1a8:	670505cb 	strvs	r0, [r5, -fp, asr #11]
 1ac:	05590c05 	ldrbeq	r0, [r9, #-3077]	; 0xfffff3fb
 1b0:	054d6701 	strbeq	r6, [sp, #-1793]	; 0xfffff8ff
 1b4:	14059105 	strne	r9, [r5], #-261	; 0xfffffefb
 1b8:	3d050520 	cfstr32cc	mvfx0, [r5, #-128]	; 0xffffff80
 1bc:	2f3d2f59 	svccs	0x003d2f59
 1c0:	053e1305 	ldreq	r1, [lr, #-773]!	; 0xfffffcfb
 1c4:	09054a07 	stmdbeq	r5, {r0, r1, r2, r9, fp, lr}
 1c8:	13053d21 	movwne	r3, #23841	; 0x5d21
 1cc:	4a070530 	bmi	1c1694 <startup-0x1fe3e96c>
 1d0:	3d210905 			; <UNDEFINED> instruction: 0x3d210905
 1d4:	77300105 	ldrvc	r0, [r0, -r5, lsl #2]!
 1d8:	3d910505 	cfldr32cc	mvfx0, [r1, #20]
 1dc:	053d3d59 	ldreq	r3, [sp, #-3417]!	; 0xfffff2a7
 1e0:	054d8301 	strbeq	r8, [sp, #-769]	; 0xfffffcff
 1e4:	593d9105 	ldmdbpl	sp!, {r0, r2, r8, ip, pc}
 1e8:	01053d3d 	tsteq	r5, sp, lsr sp
 1ec:	0b054d83 	bleq	153800 <startup-0x1feac800>
 1f0:	3c05053e 	cfstr32cc	mvfx0, [r5], {62}	; 0x3e
 1f4:	9f210905 	svcls	0x00210905
 1f8:	054b0f05 	strbeq	r0, [fp, #-3845]	; 0xfffff0fb
 1fc:	0d053c09 	stceq	12, cr3, [r5, #-36]	; 0xffffffdc
 200:	03040200 	movweq	r0, #16896	; 0x4200
 204:	001e0521 	andseq	r0, lr, r1, lsr #10
 208:	49030402 	stmdbmi	r3, {r1, sl}
 20c:	02000905 	andeq	r0, r0, #81920	; 0x14000
 210:	05580104 	ldrbeq	r0, [r8, #-260]	; 0xfffffefc
 214:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
 218:	05054702 	streq	r4, [r5, #-1794]	; 0xfffff8fe
 21c:	01040200 	mrseq	r0, R12_usr
 220:	51010558 	tstpl	r1, r8, asr r5
 224:	2f05055c 	svccs	0x0005055c
 228:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 22c:	4b4b3d3d 	blmi	12cf728 <startup-0x1ed308d8>
 230:	054b4b4b 	strbeq	r4, [fp, #-2891]	; 0xfffff4b5
 234:	053f3e01 	ldreq	r3, [pc, #-3585]!	; fffff43b <ball+0xdfffec03>
 238:	10056907 	andne	r6, r5, r7, lsl #18
 23c:	01040200 	mrseq	r0, R12_usr
 240:	001b054a 	andseq	r0, fp, sl, asr #10
 244:	4a020402 	bmi	81254 <startup-0x1ff7edac>
 248:	02002805 	andeq	r2, r0, #327680	; 0x50000
 24c:	054a0304 	strbeq	r0, [sl, #-772]	; 0xfffffcfc
 250:	0b054d10 	bleq	153698 <startup-0x1feac968>
 254:	5a0f052e 	bpl	3c1714 <startup-0x1fc3e8ec>
 258:	052e1405 	streq	r1, [lr, #-1029]!	; 0xfffffbfb
 25c:	0905e60e 	stmdbeq	r5, {r1, r2, r3, r9, sl, sp, lr, pc}
 260:	220e054b 	andcs	r0, lr, #314572800	; 0x12c00000
 264:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
 268:	0905220e 	stmdbeq	r5, {r1, r2, r3, r9, sp}
 26c:	220e054b 	andcs	r0, lr, #314572800	; 0x12c00000
 270:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
 274:	0905220e 	stmdbeq	r5, {r1, r2, r3, r9, sp}
 278:	220e054b 	andcs	r0, lr, #314572800	; 0x12c00000
 27c:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
 280:	0905220e 	stmdbeq	r5, {r1, r2, r3, r9, sp}
 284:	220e054b 	andcs	r0, lr, #314572800	; 0x12c00000
 288:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
 28c:	0e052307 	cdpeq	3, 0, cr2, cr5, cr7, {0}
 290:	6707053d 	smladxvs	r7, sp, r5, r0
 294:	053d1405 	ldreq	r1, [sp, #-1029]!	; 0xfffffbfb
 298:	14054b0b 	strne	r4, [r5], #-2827	; 0xfffff4f5
 29c:	4b0b054c 	blmi	2c17d4 <startup-0x1fd3e82c>
 2a0:	053f2705 	ldreq	r2, [pc, #-1797]!	; fffffba3 <ball+0xdffff36b>
 2a4:	28055805 	stmdacs	r5, {r0, r2, fp, ip, lr}
 2a8:	66050583 	strvs	r0, [r5], -r3, lsl #11
 2ac:	05750905 	ldrbeq	r0, [r5, #-2309]!	; 0xfffff6fb
 2b0:	05059127 	streq	r9, [r5, #-295]	; 0xfffffed9
 2b4:	75070558 	strvc	r0, [r7, #-1368]	; 0xfffffaa8
 2b8:	923d0e05 	eorsls	r0, sp, #5, 28	; 0x50
 2bc:	9f910505 	svcls	0x00910505
 2c0:	4e030905 	vmlami.f16	s0, s6, s10	; <UNPREDICTABLE>
 2c4:	03010558 	movweq	r0, #5464	; 0x1558
 2c8:	05772034 	ldrbeq	r2, [r7, #-52]!	; 0xffffffcc
 2cc:	053d670d 	ldreq	r6, [sp, #-1805]!	; 0xfffff8f3
 2d0:	054d3d01 	strbeq	r3, [sp, #-3329]	; 0xfffff2ff
 2d4:	05054b0d 	streq	r4, [r5, #-2829]	; 0xfffff4f3
 2d8:	0010052e 	andseq	r0, r0, lr, lsr #10
 2dc:	21030402 	tstcs	r3, r2, lsl #8
 2e0:	02001a05 	andeq	r1, r0, #20480	; 0x5000
 2e4:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 2e8:	04020026 	streq	r0, [r2], #-38	; 0xffffffda
 2ec:	09052e03 	stmdbeq	r5, {r0, r1, r9, sl, fp, sp}
 2f0:	03040200 	movweq	r0, #16896	; 0x4200
 2f4:	002b0566 	eoreq	r0, fp, r6, ror #10
 2f8:	20030402 	andcs	r0, r3, r2, lsl #8
 2fc:	02003505 	andeq	r3, r0, #20971520	; 0x1400000
 300:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 304:	04020041 	streq	r0, [r2], #-65	; 0xffffffbf
 308:	09052e03 	stmdbeq	r5, {r0, r1, r9, sl, fp, sp}
 30c:	03040200 	movweq	r0, #16896	; 0x4200
 310:	00250566 	eoreq	r0, r5, r6, ror #10
 314:	57030402 	strpl	r0, [r3, -r2, lsl #8]
 318:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 31c:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 320:	055b3f01 	ldrbeq	r3, [fp, #-3841]	; 0xfffff0ff
 324:	05054b0d 	streq	r4, [r5, #-2829]	; 0xfffff4f3
 328:	0010052e 	andseq	r0, r0, lr, lsr #10
 32c:	21030402 	tstcs	r3, r2, lsl #8
 330:	02001a05 	andeq	r1, r0, #20480	; 0x5000
 334:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 338:	04020026 	streq	r0, [r2], #-38	; 0xffffffda
 33c:	09052e03 	stmdbeq	r5, {r0, r1, r9, sl, fp, sp}
 340:	03040200 	movweq	r0, #16896	; 0x4200
 344:	002b0566 	eoreq	r0, fp, r6, ror #10
 348:	20030402 	andcs	r0, r3, r2, lsl #8
 34c:	02003505 	andeq	r3, r0, #20971520	; 0x1400000
 350:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 354:	04020041 	streq	r0, [r2], #-65	; 0xffffffbf
 358:	09052e03 	stmdbeq	r5, {r0, r1, r9, sl, fp, sp}
 35c:	03040200 	movweq	r0, #16896	; 0x4200
 360:	00250566 	eoreq	r0, r5, r6, ror #10
 364:	57030402 	strpl	r0, [r3, -r2, lsl #8]
 368:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 36c:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 370:	055b3f01 	ldrbeq	r3, [fp, #-3841]	; 0xfffff0ff
 374:	12054b05 	andne	r4, r5, #5120	; 0x1400
 378:	2e1b054b 	cfmac32cs	mvfx0, mvfx11, mvfx11
 37c:	3d2e1205 	sfmcc	f1, 4, [lr, #-20]!	; 0xffffffec
 380:	052e1b05 	streq	r1, [lr, #-2821]!	; 0xfffff4fb
 384:	05052e12 	streq	r2, [r5, #-3602]	; 0xfffff1ee
 388:	4b0e053e 	blmi	381888 <startup-0x1fc7e778>
 38c:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
 390:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
 394:	32052e01 	andcc	r2, r5, #1, 28
 398:	01040200 	mrseq	r0, R12_usr
 39c:	0037052e 	eorseq	r0, r7, lr, lsr #10
 3a0:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 3a4:	02002a05 	andeq	r2, r0, #20480	; 0x5000
 3a8:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 3ac:	04020019 	streq	r0, [r2], #-25	; 0xffffffe7
 3b0:	20052001 	andcs	r2, r5, r1
 3b4:	2e18052f 	cfmul64cs	mvdx0, mvdx8, mvdx15
 3b8:	05201605 	streq	r1, [r0, #-1541]!	; 0xfffff9fb
 3bc:	0705300e 	streq	r3, [r5, -lr]
 3c0:	0023052e 	eoreq	r0, r3, lr, lsr #10
 3c4:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 3c8:	02003205 	andeq	r3, r0, #1342177280	; 0x50000000
 3cc:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 3d0:	04020037 	streq	r0, [r2], #-55	; 0xffffffc9
 3d4:	2a052e01 	bcs	14bbe0 <startup-0x1feb4420>
 3d8:	01040200 	mrseq	r0, R12_usr
 3dc:	00190520 	andseq	r0, r9, r0, lsr #10
 3e0:	20010402 	andcs	r0, r1, r2, lsl #8
 3e4:	052f1f05 	streq	r1, [pc, #-3845]!	; fffff4e7 <ball+0xdfffecaf>
 3e8:	16052e18 			; <UNDEFINED> instruction: 0x16052e18
 3ec:	30050520 	andcc	r0, r5, r0, lsr #10
 3f0:	034b0105 	movteq	r0, #45317	; 0xb105
 3f4:	03054a11 	movweq	r4, #23057	; 0x5a11
 3f8:	20240530 	eorcs	r0, r4, r0, lsr r5
 3fc:	052f0305 	streq	r0, [pc, #-773]!	; ff <startup-0x1fffff01>
 400:	11053005 	tstne	r5, r5
 404:	2f010520 	svccs	0x00010520
 408:	590d05a2 	stmdbpl	sp, {r1, r5, r7, r8, sl}
 40c:	2f2f0505 	svccs	0x002f0505
 410:	30060530 	andcc	r0, r6, r0, lsr r5
 414:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 418:	0402000a 	streq	r0, [r2], #-10
 41c:	09054c01 	stmdbeq	r5, {r0, sl, fp, lr}
 420:	01040200 	mrseq	r0, R12_usr
 424:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
 428:	02003d01 	andeq	r3, r0, #1, 26	; 0x40
 42c:	023b0104 	eorseq	r0, fp, #4, 2
 430:	01010005 	tsteq	r1, r5

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	4f454750 	svcmi	0x00454750
   4:	5254454d 	subspl	r4, r4, #322961408	; 0x13400000
   8:	74730059 	ldrbtvc	r0, [r3], #-89	; 0xffffffa7
   c:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  10:	70730070 	rsbsvc	r0, r3, r0, ror r0
  14:	59646565 	stmdbpl	r4!, {r0, r2, r5, r6, r8, sl, sp, lr}^
  18:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
  1c:	72610065 	rsbvc	r0, r1, #101	; 0x65
  20:	64007667 	strvs	r7, [r0], #-1639	; 0xfffff999
  24:	00787269 	rsbseq	r7, r8, r9, ror #4
  28:	79726964 	ldmdbvc	r2!, {r2, r5, r6, r8, fp, sp, lr}^
  2c:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
  30:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  34:	654c5c73 	strbvs	r5, [ip, #-3187]	; 0xfffff38d
  38:	5c61696e 			; <UNDEFINED> instruction: 0x5c61696e
  3c:	6b736544 	blvs	1cd9554 <startup-0x1e326aac>
  40:	5c706f74 	ldclpl	15, cr6, [r0], #-464	; 0xfffffe30
  44:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
  48:	6b726f57 	blvs	1c9bdac <startup-0x1e364254>
  4c:	63617073 	cmnvs	r1, #115	; 0x73
  50:	70555c65 	subsvc	r5, r5, r5, ror #24
  54:	5f335f70 	svcpl	0x00335f70
  58:	72670032 	rsbvc	r0, r7, #50	; 0x32
  5c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  60:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
  64:	645f6461 	ldrbvs	r6, [pc], #-1121	; 6c <startup-0x1fffff94>
  68:	00617461 	rsbeq	r7, r1, r1, ror #8
  6c:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
  70:	5074006c 	rsbspl	r0, r4, ip, rrx
  74:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
  78:	494f5000 	stmdbmi	pc, {ip, lr}^	; <UNPREDICTABLE>
  7c:	7500544e 	strvc	r5, [r0, #-1102]	; 0xfffffbb2
  80:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  84:	2064656e 	rsbcs	r6, r4, lr, ror #10
  88:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
  8c:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
  90:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
  94:	70006465 	andvc	r6, r0, r5, ror #8
  98:	0078736f 	rsbseq	r7, r8, pc, ror #6
  9c:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
  a0:	6c616200 	sfmvs	f6, 2, [r1], #-0
  a4:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xfffff094
  a8:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
  ac:	67007972 	smlsdxvs	r0, r2, r9, r7
  b0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  b4:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
  b8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  bc:	7a697300 	bvc	1a5ccc4 <startup-0x1e5a333c>
  c0:	73005865 	movwvc	r5, #2149	; 0x865
  c4:	59657a69 	stmdbpl	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
  c8:	2f3a4300 	svccs	0x003a4300
  cc:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  d0:	654c2f73 	strbvs	r2, [ip, #-3955]	; 0xfffff08d
  d4:	2f61696e 	svccs	0x0061696e
  d8:	6b736544 	blvs	1cd95f0 <startup-0x1e326a10>
  dc:	2f706f74 	svccs	0x00706f74
  e0:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
  e4:	6b726f57 	blvs	1c9be48 <startup-0x1e3641b8>
  e8:	63617073 	cmnvs	r1, #115	; 0x73
  ec:	70552f65 	subsvc	r2, r5, r5, ror #30
  f0:	5f335f70 	svcpl	0x00335f70
  f4:	74732f32 	ldrbtvc	r2, [r3], #-3890	; 0xfffff0ce
  f8:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  fc:	00632e70 	rsbeq	r2, r3, r0, ror lr
 100:	6e69616d 	powvsez	f6, f1, #5.0
 104:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 108:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 4e <startup-0x1fffffb2>	; <UNPREDICTABLE>
 10c:	6f726369 	svcvs	0x00726369
 110:	61726700 	cmnvs	r2, r0, lsl #14
 114:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 118:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 11c:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
 120:	00657a69 	rsbeq	r7, r5, r9, ror #20
 124:	70617267 	rsbvc	r7, r1, r7, ror #4
 128:	5f636968 	svcpl	0x00636968
 12c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 130:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 134:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 138:	67007261 	strvs	r7, [r0, -r1, ror #4]
 13c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 140:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 144:	5f6c7274 	svcpl	0x006c7274
 148:	5f746962 	svcpl	0x00746962
 14c:	00746573 	rsbseq	r6, r4, r3, ror r5
 150:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 154:	7070615f 	rsbsvc	r6, r0, pc, asr r1
 158:	736e7500 	cmnvc	lr, #0, 10
 15c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 160:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 164:	47740074 			; <UNDEFINED> instruction: 0x47740074
 168:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 16c:	00797274 	rsbseq	r7, r9, r4, ror r2
 170:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 174:	00745f38 	rsbseq	r5, r4, r8, lsr pc
 178:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 17c:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
 180:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 184:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 188:	65640072 	strbvs	r0, [r4, #-114]!	; 0xffffff8e
 18c:	5f79616c 	svcpl	0x0079616c
 190:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
 194:	4e470073 	mcrmi	0, 2, r0, cr7, cr3, {3}
 198:	39432055 	stmdbcc	r3, {r0, r2, r4, r6, sp}^
 19c:	2e392039 	mrccs	0, 1, r2, cr9, cr9, {1}
 1a0:	20312e32 	eorscs	r2, r1, r2, lsr lr
 1a4:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
 1a8:	35323031 	ldrcc	r3, [r2, #-49]!	; 0xffffffcf
 1ac:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
 1b0:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
 1b4:	5b202965 	blpl	80a750 <startup-0x1f7f58b0>
 1b8:	2f4d5241 	svccs	0x004d5241
 1bc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 1c0:	72622d39 	rsbvc	r2, r2, #3648	; 0xe40
 1c4:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
 1c8:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
 1cc:	6f697369 	svcvs	0x00697369
 1d0:	3732206e 	ldrcc	r2, [r2, -lr, rrx]!
 1d4:	39393537 	ldmdbcc	r9!, {r0, r1, r2, r4, r5, r8, sl, ip, sp}
 1d8:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
 1dc:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
 1e0:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
 1e4:	616f6c66 	cmnvs	pc, r6, ror #24
 1e8:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
 1ec:	6f733d69 	svcvs	0x00733d69
 1f0:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
 1f4:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
 1f8:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
 1fc:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
 200:	672d206d 	strvs	r2, [sp, -sp, rrx]!
 204:	304f2d20 	subcc	r2, pc, r0, lsr #26
 208:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
 20c:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
 210:	72610039 	rsbvc	r0, r1, #57	; 0x39
 214:	73006367 	movwvc	r6, #871	; 0x367
 218:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 21c:	61620058 	qdsubvs	r0, r8, r2
 220:	64006c6c 	strvs	r6, [r0], #-3180	; 0xfffff394
 224:	00776172 	rsbseq	r6, r7, r2, ror r1
 228:	6b73616d 	blvs	1cd87e4 <startup-0x1e32781c>
 22c:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
 230:	76007865 	strvc	r7, [r0], -r5, ror #16
 234:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 238:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 23c:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 182 <startup-0x1ffffe7e>	; <UNPREDICTABLE>
 240:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
 244:	61726700 	cmnvs	r2, r0, lsl #14
 248:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 24c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 250:	645f6574 	ldrbvs	r6, [pc], #-1396	; 258 <startup-0x1ffffda8>
 254:	00617461 	rsbeq	r7, r1, r1, ror #8
 258:	5f746573 	svcpl	0x00746573
 25c:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 260:	735f7463 	cmpvc	pc, #1660944384	; 0x63000000
 264:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 268:	61726700 	cmnvs	r2, r0, lsl #14
 26c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 270:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 274:	65725f74 	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
 278:	00796461 	rsbseq	r6, r9, r1, ror #8
 27c:	70617267 	rsbvc	r7, r1, r7, ror #4
 280:	5f636968 	svcpl	0x00636968
 284:	61656c63 	cmnvs	r5, r3, ror #24
 288:	63735f72 	cmnvs	r3, #456	; 0x1c8
 28c:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 290:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 294:	6f5f7261 	svcvs	0x005f7261
 298:	63656a62 	cmnvs	r5, #401408	; 0x62000
 29c:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
 2a0:	5f79616c 	svcpl	0x0079616c
 2a4:	6e303035 	mrcvs	0, 1, r3, cr0, cr5, {1}
 2a8:	4f740073 	svcmi	0x00740073
 2ac:	64006a62 	strvs	r6, [r0], #-2658	; 0xfffff59e
 2b0:	5f776172 	svcpl	0x00776172
 2b4:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 2b8:	67007463 	strvs	r7, [r0, -r3, ror #8]
 2bc:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2c0:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 2c4:	00646165 	rsbeq	r6, r4, r5, ror #2
 2c8:	706d756e 	rsbvc	r7, sp, lr, ror #10
 2cc:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 2d0:	6f6d0073 	svcvs	0x006d0073
 2d4:	6f5f6576 	svcvs	0x005f6576
 2d8:	63656a62 	cmnvs	r5, #401408	; 0x62000
 2dc:	72670074 	rsbvc	r0, r7, #116	; 0x74
 2e0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2e4:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 2e8:	5f657469 	svcpl	0x00657469
 2ec:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 2f0:	00646e61 	rsbeq	r6, r4, r1, ror #28
 2f4:	4a424f50 	bmi	109403c <startup-0x1ef6bfc4>
 2f8:	00544345 	subseq	r4, r4, r5, asr #6
 2fc:	6a626f74 	bvs	189c0d4 <startup-0x1e763f2c>
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000044 	andeq	r0, r0, r4, asr #32
  30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  34:	41018e02 	tstmi	r1, r2, lsl #28
  38:	0000070d 	andeq	r0, r0, sp, lsl #14
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000054 	andcs	r0, r0, r4, asr r0
  48:	00000036 	andeq	r0, r0, r6, lsr r0
  4c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  50:	41018e02 	tstmi	r1, r2, lsl #28
  54:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  58:	00000007 	andeq	r0, r0, r7
  5c:	0000001c 	andeq	r0, r0, ip, lsl r0
  60:	00000000 	andeq	r0, r0, r0
  64:	2000008a 	andcs	r0, r0, sl, lsl #1
  68:	0000002a 	andeq	r0, r0, sl, lsr #32
  6c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  70:	41018e02 	tstmi	r1, r2, lsl #28
  74:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  78:	00000007 	andeq	r0, r0, r7
  7c:	00000018 	andeq	r0, r0, r8, lsl r0
  80:	00000000 	andeq	r0, r0, r0
  84:	200000b4 	strhcs	r0, [r0], -r4
  88:	00000012 	andeq	r0, r0, r2, lsl r0
  8c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  90:	41018e02 	tstmi	r1, r2, lsl #28
  94:	0000070d 	andeq	r0, r0, sp, lsl #14
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	200000c6 	andcs	r0, r0, r6, asr #1
  a4:	00000052 	andeq	r0, r0, r2, asr r0
  a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ac:	41018e02 	tstmi	r1, r2, lsl #28
  b0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  b4:	00000007 	andeq	r0, r0, r7
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	20000118 	andcs	r0, r0, r8, lsl r1
  c4:	00000050 	andeq	r0, r0, r0, asr r0
  c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  cc:	41018e02 	tstmi	r1, r2, lsl #28
  d0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  d4:	00000007 	andeq	r0, r0, r7
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000000 	andeq	r0, r0, r0
  e0:	20000168 	andcs	r0, r0, r8, ror #2
  e4:	0000005a 	andeq	r0, r0, sl, asr r0
  e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ec:	41018e02 	tstmi	r1, r2, lsl #28
  f0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  f4:	00000007 	andeq	r0, r0, r7
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	200001c2 	andcs	r0, r0, r2, asr #3
 104:	0000006e 	andeq	r0, r0, lr, rrx
 108:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 10c:	41018e02 	tstmi	r1, r2, lsl #28
 110:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 114:	00000007 	andeq	r0, r0, r7
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	00000000 	andeq	r0, r0, r0
 120:	20000230 	andcs	r0, r0, r0, lsr r2
 124:	00000094 	muleq	r0, r4, r0
 128:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 12c:	41018e02 	tstmi	r1, r2, lsl #28
 130:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 134:	00000007 	andeq	r0, r0, r7
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	00000000 	andeq	r0, r0, r0
 140:	200002c4 	andcs	r0, r0, r4, asr #5
 144:	0000002a 	andeq	r0, r0, sl, lsr #32
 148:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 14c:	41018e02 	tstmi	r1, r2, lsl #28
 150:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 154:	00000007 	andeq	r0, r0, r7
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	00000000 	andeq	r0, r0, r0
 160:	200002ee 	andcs	r0, r0, lr, ror #5
 164:	0000006e 	andeq	r0, r0, lr, rrx
 168:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 16c:	41018e02 	tstmi	r1, r2, lsl #28
 170:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 174:	00000007 	andeq	r0, r0, r7
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	00000000 	andeq	r0, r0, r0
 180:	2000035c 	andcs	r0, r0, ip, asr r3
 184:	00000046 	andeq	r0, r0, r6, asr #32
 188:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 18c:	41018e02 	tstmi	r1, r2, lsl #28
 190:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 194:	00000007 	andeq	r0, r0, r7
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	00000000 	andeq	r0, r0, r0
 1a0:	200003a2 	andcs	r0, r0, r2, lsr #7
 1a4:	00000046 	andeq	r0, r0, r6, asr #32
 1a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ac:	41018e02 	tstmi	r1, r2, lsl #28
 1b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1b4:	00000007 	andeq	r0, r0, r7
 1b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1bc:	00000000 	andeq	r0, r0, r0
 1c0:	200003e8 	andcs	r0, r0, r8, ror #7
 1c4:	00000068 	andeq	r0, r0, r8, rrx
 1c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1cc:	41018e02 	tstmi	r1, r2, lsl #28
 1d0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1d4:	00000007 	andeq	r0, r0, r7
 1d8:	00000018 	andeq	r0, r0, r8, lsl r0
 1dc:	00000000 	andeq	r0, r0, r0
 1e0:	20000450 	andcs	r0, r0, r0, asr r4
 1e4:	0000005c 	andeq	r0, r0, ip, asr r0
 1e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ec:	41018e02 	tstmi	r1, r2, lsl #28
 1f0:	0000070d 	andeq	r0, r0, sp, lsl #14
 1f4:	00000020 	andeq	r0, r0, r0, lsr #32
 1f8:	00000000 	andeq	r0, r0, r0
 1fc:	200004ac 	andcs	r0, r0, ip, lsr #9
 200:	00000198 	muleq	r0, r8, r1
 204:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 208:	86048505 	strhi	r8, [r4], -r5, lsl #10
 20c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 210:	380e4101 	stmdacc	lr, {r0, r8, lr}
 214:	00070d41 	andeq	r0, r7, r1, asr #26
 218:	0000001c 	andeq	r0, r0, ip, lsl r0
 21c:	00000000 	andeq	r0, r0, r0
 220:	20000644 	andcs	r0, r0, r4, asr #12
 224:	00000020 	andeq	r0, r0, r0, lsr #32
 228:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 22c:	41018e02 	tstmi	r1, r2, lsl #28
 230:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 234:	00000007 	andeq	r0, r0, r7
 238:	0000001c 	andeq	r0, r0, ip, lsl r0
 23c:	00000000 	andeq	r0, r0, r0
 240:	20000664 	andcs	r0, r0, r4, ror #12
 244:	00000058 	andeq	r0, r0, r8, asr r0
 248:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 24c:	41018e02 	tstmi	r1, r2, lsl #28
 250:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 254:	00000007 	andeq	r0, r0, r7
 258:	0000001c 	andeq	r0, r0, ip, lsl r0
 25c:	00000000 	andeq	r0, r0, r0
 260:	200006bc 			; <UNDEFINED> instruction: 0x200006bc
 264:	00000058 	andeq	r0, r0, r8, asr r0
 268:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 26c:	41018e02 	tstmi	r1, r2, lsl #28
 270:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 274:	00000007 	andeq	r0, r0, r7
 278:	0000001c 	andeq	r0, r0, ip, lsl r0
 27c:	00000000 	andeq	r0, r0, r0
 280:	20000714 	andcs	r0, r0, r4, lsl r7
 284:	00000088 	andeq	r0, r0, r8, lsl #1
 288:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 28c:	41018e02 	tstmi	r1, r2, lsl #28
 290:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 294:	00000007 	andeq	r0, r0, r7
 298:	00000018 	andeq	r0, r0, r8, lsl r0
 29c:	00000000 	andeq	r0, r0, r0
 2a0:	2000079c 	mulcs	r0, ip, r7
 2a4:	00000028 	andeq	r0, r0, r8, lsr #32
 2a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2ac:	41018e02 	tstmi	r1, r2, lsl #28
 2b0:	0000070d 	andeq	r0, r0, sp, lsl #14
 2b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b8:	00000000 	andeq	r0, r0, r0
 2bc:	200007c4 	andcs	r0, r0, r4, asr #15
 2c0:	0000003c 	andeq	r0, r0, ip, lsr r0
 2c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2c8:	41018e02 	tstmi	r1, r2, lsl #28
 2cc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 2d0:	00000007 	andeq	r0, r0, r7
