
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
// ########################################################## STARTUP #######################################################################################
__attribute__((naked)) __attribute__((section(".start_section"))) void startup(void)
{
    __asm__ volatile(" LDR R0,=0x2001C000\n"); /* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
    __asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
    __asm__ volatile(" BL main\n");   /* call main */
20000004:	f000 fb76 	bl	200006f4 <main>
    __asm__ volatile(".L1: B .L1\n"); /* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:
typedef unsigned char uint8_t;

#define USBDM
// ############################################################ DELAYS ########################################################################################
void delay_250ns(void)
{
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
    /* SystemCoreClock = 168000000 */
    *STK_CTRL = 0;
20000014:	4b0c      	ldr	r3, [pc, #48]	; (20000048 <delay_250ns+0x38>)
20000016:	2200      	movs	r2, #0
20000018:	601a      	str	r2, [r3, #0]
    *STK_LOAD = ((168 / 4) - 1);
2000001a:	4b0c      	ldr	r3, [pc, #48]	; (2000004c <delay_250ns+0x3c>)
2000001c:	2229      	movs	r2, #41	; 0x29
2000001e:	601a      	str	r2, [r3, #0]
    *STK_VAL = 0;
20000020:	4b0b      	ldr	r3, [pc, #44]	; (20000050 <delay_250ns+0x40>)
20000022:	2200      	movs	r2, #0
20000024:	601a      	str	r2, [r3, #0]
    *STK_CTRL = 5;
20000026:	4b08      	ldr	r3, [pc, #32]	; (20000048 <delay_250ns+0x38>)
20000028:	2205      	movs	r2, #5
2000002a:	601a      	str	r2, [r3, #0]
    while((*STK_CTRL & 0x10000) == 0)
2000002c:	46c0      	nop			; (mov r8, r8)
2000002e:	4b06      	ldr	r3, [pc, #24]	; (20000048 <delay_250ns+0x38>)
20000030:	681a      	ldr	r2, [r3, #0]
20000032:	2380      	movs	r3, #128	; 0x80
20000034:	025b      	lsls	r3, r3, #9
20000036:	4013      	ands	r3, r2
20000038:	d0f9      	beq.n	2000002e <delay_250ns+0x1e>
        ;
    *STK_CTRL = 0;
2000003a:	4b03      	ldr	r3, [pc, #12]	; (20000048 <delay_250ns+0x38>)
2000003c:	2200      	movs	r2, #0
2000003e:	601a      	str	r2, [r3, #0]
}
20000040:	46c0      	nop			; (mov r8, r8)
20000042:	46bd      	mov	sp, r7
20000044:	bd80      	pop	{r7, pc}
20000046:	46c0      	nop			; (mov r8, r8)
20000048:	e000e010 	and	lr, r0, r0, lsl r0
2000004c:	e000e014 	and	lr, r0, r4, lsl r0
20000050:	e000e018 	and	lr, r0, r8, lsl r0

20000054 <delay_micro>:

void delay_micro(unsigned int us)
{
20000054:	b580      	push	{r7, lr}
20000056:	b084      	sub	sp, #16
20000058:	af00      	add	r7, sp, #0
2000005a:	6078      	str	r0, [r7, #4]
#ifdef SIMULATOR
    us = us / 1000;
    us++;
#endif
   for (int i = 0; i < us; i++) {
2000005c:	2300      	movs	r3, #0
2000005e:	60fb      	str	r3, [r7, #12]
20000060:	e00a      	b.n	20000078 <delay_micro+0x24>
		delay_250ns();
20000062:	f7ff ffd5 	bl	20000010 <delay_250ns>
		delay_250ns();
20000066:	f7ff ffd3 	bl	20000010 <delay_250ns>
		delay_250ns();
2000006a:	f7ff ffd1 	bl	20000010 <delay_250ns>
		delay_250ns();
2000006e:	f7ff ffcf 	bl	20000010 <delay_250ns>
   for (int i = 0; i < us; i++) {
20000072:	68fb      	ldr	r3, [r7, #12]
20000074:	3301      	adds	r3, #1
20000076:	60fb      	str	r3, [r7, #12]
20000078:	68fb      	ldr	r3, [r7, #12]
2000007a:	687a      	ldr	r2, [r7, #4]
2000007c:	429a      	cmp	r2, r3
2000007e:	d8f0      	bhi.n	20000062 <delay_micro+0xe>
		}
}
20000080:	46c0      	nop			; (mov r8, r8)
20000082:	46c0      	nop			; (mov r8, r8)
20000084:	46bd      	mov	sp, r7
20000086:	b004      	add	sp, #16
20000088:	bd80      	pop	{r7, pc}

2000008a <delay_milli>:

void delay_milli(unsigned int ms)
{
2000008a:	b580      	push	{r7, lr}
2000008c:	b082      	sub	sp, #8
2000008e:	af00      	add	r7, sp, #0
20000090:	6078      	str	r0, [r7, #4]
#ifdef SIMULATOR
    ms = ms / 1000;
    ms++;
#endif
    while(ms > 0) {
20000092:	e007      	b.n	200000a4 <delay_milli+0x1a>
        delay_micro(1000);
20000094:	23fa      	movs	r3, #250	; 0xfa
20000096:	009b      	lsls	r3, r3, #2
20000098:	0018      	movs	r0, r3
2000009a:	f7ff ffdb 	bl	20000054 <delay_micro>
        ms--;
2000009e:	687b      	ldr	r3, [r7, #4]
200000a0:	3b01      	subs	r3, #1
200000a2:	607b      	str	r3, [r7, #4]
    while(ms > 0) {
200000a4:	687b      	ldr	r3, [r7, #4]
200000a6:	2b00      	cmp	r3, #0
200000a8:	d1f4      	bne.n	20000094 <delay_milli+0xa>
    }
}
200000aa:	46c0      	nop			; (mov r8, r8)
200000ac:	46c0      	nop			; (mov r8, r8)
200000ae:	46bd      	mov	sp, r7
200000b0:	b002      	add	sp, #8
200000b2:	bd80      	pop	{r7, pc}

200000b4 <delay_500ns>:

void delay_500ns(void)
{
200000b4:	b580      	push	{r7, lr}
200000b6:	af00      	add	r7, sp, #0
    delay_250ns();
200000b8:	f7ff ffaa 	bl	20000010 <delay_250ns>
    delay_250ns();
200000bc:	f7ff ffa8 	bl	20000010 <delay_250ns>
}
200000c0:	46c0      	nop			; (mov r8, r8)
200000c2:	46bd      	mov	sp, r7
200000c4:	bd80      	pop	{r7, pc}

200000c6 <graphic_ctrl_bit_set>:

// ############################################################ FUNTCIONS ########################################################################################


void graphic_ctrl_bit_set(uint8_t x)
{
200000c6:	b580      	push	{r7, lr}
200000c8:	b084      	sub	sp, #16
200000ca:	af00      	add	r7, sp, #0
200000cc:	0002      	movs	r2, r0
200000ce:	1dfb      	adds	r3, r7, #7
200000d0:	701a      	strb	r2, [r3, #0]
    uint8_t c;
    c = *GPIO_ODR_LOW;
200000d2:	4a10      	ldr	r2, [pc, #64]	; (20000114 <graphic_ctrl_bit_set+0x4e>)
200000d4:	200f      	movs	r0, #15
200000d6:	183b      	adds	r3, r7, r0
200000d8:	7812      	ldrb	r2, [r2, #0]
200000da:	701a      	strb	r2, [r3, #0]
    c &= ~B_SELECT;
200000dc:	183b      	adds	r3, r7, r0
200000de:	183a      	adds	r2, r7, r0
200000e0:	7812      	ldrb	r2, [r2, #0]
200000e2:	2104      	movs	r1, #4
200000e4:	438a      	bics	r2, r1
200000e6:	701a      	strb	r2, [r3, #0]
    c |= (~B_SELECT & x);
200000e8:	1dfb      	adds	r3, r7, #7
200000ea:	781b      	ldrb	r3, [r3, #0]
200000ec:	b25b      	sxtb	r3, r3
200000ee:	2204      	movs	r2, #4
200000f0:	4393      	bics	r3, r2
200000f2:	b25a      	sxtb	r2, r3
200000f4:	183b      	adds	r3, r7, r0
200000f6:	781b      	ldrb	r3, [r3, #0]
200000f8:	b25b      	sxtb	r3, r3
200000fa:	4313      	orrs	r3, r2
200000fc:	b25a      	sxtb	r2, r3
200000fe:	183b      	adds	r3, r7, r0
20000100:	701a      	strb	r2, [r3, #0]
    *GPIO_ODR_LOW = c;
20000102:	4a04      	ldr	r2, [pc, #16]	; (20000114 <graphic_ctrl_bit_set+0x4e>)
20000104:	183b      	adds	r3, r7, r0
20000106:	781b      	ldrb	r3, [r3, #0]
20000108:	7013      	strb	r3, [r2, #0]
}
2000010a:	46c0      	nop			; (mov r8, r8)
2000010c:	46bd      	mov	sp, r7
2000010e:	b004      	add	sp, #16
20000110:	bd80      	pop	{r7, pc}
20000112:	46c0      	nop			; (mov r8, r8)
20000114:	40021014 	andmi	r1, r2, r4, lsl r0

20000118 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x)
{
20000118:	b580      	push	{r7, lr}
2000011a:	b084      	sub	sp, #16
2000011c:	af00      	add	r7, sp, #0
2000011e:	0002      	movs	r2, r0
20000120:	1dfb      	adds	r3, r7, #7
20000122:	701a      	strb	r2, [r3, #0]
    uint8_t c;
    c = *GPIO_ODR_LOW;
20000124:	4a0f      	ldr	r2, [pc, #60]	; (20000164 <graphic_ctrl_bit_clear+0x4c>)
20000126:	200f      	movs	r0, #15
20000128:	183b      	adds	r3, r7, r0
2000012a:	7812      	ldrb	r2, [r2, #0]
2000012c:	701a      	strb	r2, [r3, #0]
    c &= ~B_SELECT;
2000012e:	183b      	adds	r3, r7, r0
20000130:	183a      	adds	r2, r7, r0
20000132:	7812      	ldrb	r2, [r2, #0]
20000134:	2104      	movs	r1, #4
20000136:	438a      	bics	r2, r1
20000138:	701a      	strb	r2, [r3, #0]
    c &= ~x;
2000013a:	1dfb      	adds	r3, r7, #7
2000013c:	781b      	ldrb	r3, [r3, #0]
2000013e:	b25b      	sxtb	r3, r3
20000140:	43db      	mvns	r3, r3
20000142:	b25b      	sxtb	r3, r3
20000144:	183a      	adds	r2, r7, r0
20000146:	7812      	ldrb	r2, [r2, #0]
20000148:	b252      	sxtb	r2, r2
2000014a:	4013      	ands	r3, r2
2000014c:	b25a      	sxtb	r2, r3
2000014e:	183b      	adds	r3, r7, r0
20000150:	701a      	strb	r2, [r3, #0]
    *GPIO_ODR_LOW = c;
20000152:	4a04      	ldr	r2, [pc, #16]	; (20000164 <graphic_ctrl_bit_clear+0x4c>)
20000154:	183b      	adds	r3, r7, r0
20000156:	781b      	ldrb	r3, [r3, #0]
20000158:	7013      	strb	r3, [r2, #0]
}
2000015a:	46c0      	nop			; (mov r8, r8)
2000015c:	46bd      	mov	sp, r7
2000015e:	b004      	add	sp, #16
20000160:	bd80      	pop	{r7, pc}
20000162:	46c0      	nop			; (mov r8, r8)
20000164:	40021014 	andmi	r1, r2, r4, lsl r0

20000168 <select_controller>:

void select_controller(uint8_t controller)
{
20000168:	b580      	push	{r7, lr}
2000016a:	b082      	sub	sp, #8
2000016c:	af00      	add	r7, sp, #0
2000016e:	0002      	movs	r2, r0
20000170:	1dfb      	adds	r3, r7, #7
20000172:	701a      	strb	r2, [r3, #0]
    switch(controller) {
20000174:	1dfb      	adds	r3, r7, #7
20000176:	781b      	ldrb	r3, [r3, #0]
20000178:	2b18      	cmp	r3, #24
2000017a:	d01a      	beq.n	200001b2 <select_controller+0x4a>
2000017c:	dc1d      	bgt.n	200001ba <select_controller+0x52>
2000017e:	2b10      	cmp	r3, #16
20000180:	d010      	beq.n	200001a4 <select_controller+0x3c>
20000182:	dc1a      	bgt.n	200001ba <select_controller+0x52>
20000184:	2b00      	cmp	r3, #0
20000186:	d002      	beq.n	2000018e <select_controller+0x26>
20000188:	2b08      	cmp	r3, #8
2000018a:	d004      	beq.n	20000196 <select_controller+0x2e>
        break;
    case B_CS1 | B_CS2:
        graphic_ctrl_bit_set(B_CS1 | B_CS2);
        break;
    }
}
2000018c:	e015      	b.n	200001ba <select_controller+0x52>
        graphic_ctrl_bit_clear(B_CS1 | B_CS2);
2000018e:	2018      	movs	r0, #24
20000190:	f7ff ffc2 	bl	20000118 <graphic_ctrl_bit_clear>
        break;
20000194:	e011      	b.n	200001ba <select_controller+0x52>
        graphic_ctrl_bit_set(B_CS1);
20000196:	2008      	movs	r0, #8
20000198:	f7ff ff95 	bl	200000c6 <graphic_ctrl_bit_set>
        graphic_ctrl_bit_clear(B_CS2);
2000019c:	2010      	movs	r0, #16
2000019e:	f7ff ffbb 	bl	20000118 <graphic_ctrl_bit_clear>
        break;
200001a2:	e00a      	b.n	200001ba <select_controller+0x52>
        graphic_ctrl_bit_set(B_CS2);
200001a4:	2010      	movs	r0, #16
200001a6:	f7ff ff8e 	bl	200000c6 <graphic_ctrl_bit_set>
        graphic_ctrl_bit_clear(B_CS1);
200001aa:	2008      	movs	r0, #8
200001ac:	f7ff ffb4 	bl	20000118 <graphic_ctrl_bit_clear>
        break;
200001b0:	e003      	b.n	200001ba <select_controller+0x52>
        graphic_ctrl_bit_set(B_CS1 | B_CS2);
200001b2:	2018      	movs	r0, #24
200001b4:	f7ff ff87 	bl	200000c6 <graphic_ctrl_bit_set>
        break;
200001b8:	46c0      	nop			; (mov r8, r8)
}
200001ba:	46c0      	nop			; (mov r8, r8)
200001bc:	46bd      	mov	sp, r7
200001be:	b002      	add	sp, #8
200001c0:	bd80      	pop	{r7, pc}

200001c2 <graphic_initialize>:

void graphic_initialize(void)
{
200001c2:	b580      	push	{r7, lr}
200001c4:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_set(B_E);
200001c6:	2040      	movs	r0, #64	; 0x40
200001c8:	f7ff ff7d 	bl	200000c6 <graphic_ctrl_bit_set>
    delay_micro(10);
200001cc:	200a      	movs	r0, #10
200001ce:	f7ff ff41 	bl	20000054 <delay_micro>
    graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
200001d2:	2078      	movs	r0, #120	; 0x78
200001d4:	f7ff ffa0 	bl	20000118 <graphic_ctrl_bit_clear>
    delay_milli(30);
200001d8:	201e      	movs	r0, #30
200001da:	f7ff ff56 	bl	2000008a <delay_milli>
    graphic_ctrl_bit_set(B_RST);
200001de:	2020      	movs	r0, #32
200001e0:	f7ff ff71 	bl	200000c6 <graphic_ctrl_bit_set>
    delay_milli(100);
200001e4:	2064      	movs	r0, #100	; 0x64
200001e6:	f7ff ff50 	bl	2000008a <delay_milli>
    graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
200001ea:	2118      	movs	r1, #24
200001ec:	203e      	movs	r0, #62	; 0x3e
200001ee:	f000 f906 	bl	200003fe <graphic_write_command>
    graphic_write_command(LCD_ON, B_CS1 | B_CS2);
200001f2:	2118      	movs	r1, #24
200001f4:	203f      	movs	r0, #63	; 0x3f
200001f6:	f000 f902 	bl	200003fe <graphic_write_command>
    graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
200001fa:	2118      	movs	r1, #24
200001fc:	20c0      	movs	r0, #192	; 0xc0
200001fe:	f000 f8fe 	bl	200003fe <graphic_write_command>
    graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
20000202:	2118      	movs	r1, #24
20000204:	2040      	movs	r0, #64	; 0x40
20000206:	f000 f8fa 	bl	200003fe <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
2000020a:	2118      	movs	r1, #24
2000020c:	20b8      	movs	r0, #184	; 0xb8
2000020e:	f000 f8f6 	bl	200003fe <graphic_write_command>
    select_controller(0);
20000212:	2000      	movs	r0, #0
20000214:	f7ff ffa8 	bl	20000168 <select_controller>
}
20000218:	46c0      	nop			; (mov r8, r8)
2000021a:	46bd      	mov	sp, r7
2000021c:	bd80      	pop	{r7, pc}

2000021e <graphic_wait_ready>:

static void graphic_wait_ready(void)
{
2000021e:	b580      	push	{r7, lr}
20000220:	b082      	sub	sp, #8
20000222:	af00      	add	r7, sp, #0
    uint8_t c;

    graphic_ctrl_bit_clear(B_E);
20000224:	2040      	movs	r0, #64	; 0x40
20000226:	f7ff ff77 	bl	20000118 <graphic_ctrl_bit_clear>
    *GPIO_MODER = 0x00005555; // 15-8 inputs, 7-0 outputs
2000022a:	4b14      	ldr	r3, [pc, #80]	; (2000027c <graphic_wait_ready+0x5e>)
2000022c:	4a14      	ldr	r2, [pc, #80]	; (20000280 <graphic_wait_ready+0x62>)
2000022e:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_RS);
20000230:	2001      	movs	r0, #1
20000232:	f7ff ff71 	bl	20000118 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RW);
20000236:	2002      	movs	r0, #2
20000238:	f7ff ff45 	bl	200000c6 <graphic_ctrl_bit_set>
    delay_500ns();
2000023c:	f7ff ff3a 	bl	200000b4 <delay_500ns>

    while(1) {
        graphic_ctrl_bit_set(B_E);
20000240:	2040      	movs	r0, #64	; 0x40
20000242:	f7ff ff40 	bl	200000c6 <graphic_ctrl_bit_set>
        delay_500ns();
20000246:	f7ff ff35 	bl	200000b4 <delay_500ns>
        c = *GPIO_IDR_HIGH & LCD_BUSY;
2000024a:	4b0e      	ldr	r3, [pc, #56]	; (20000284 <graphic_wait_ready+0x66>)
2000024c:	781b      	ldrb	r3, [r3, #0]
2000024e:	b2da      	uxtb	r2, r3
20000250:	1dfb      	adds	r3, r7, #7
20000252:	217f      	movs	r1, #127	; 0x7f
20000254:	438a      	bics	r2, r1
20000256:	701a      	strb	r2, [r3, #0]
        graphic_ctrl_bit_clear(B_E);
20000258:	2040      	movs	r0, #64	; 0x40
2000025a:	f7ff ff5d 	bl	20000118 <graphic_ctrl_bit_clear>
        delay_500ns();
2000025e:	f7ff ff29 	bl	200000b4 <delay_500ns>
        if(c == 0)
20000262:	1dfb      	adds	r3, r7, #7
20000264:	781b      	ldrb	r3, [r3, #0]
20000266:	2b00      	cmp	r3, #0
20000268:	d000      	beq.n	2000026c <graphic_wait_ready+0x4e>
        graphic_ctrl_bit_set(B_E);
2000026a:	e7e9      	b.n	20000240 <graphic_wait_ready+0x22>
            break;
2000026c:	46c0      	nop			; (mov r8, r8)
    }
    *GPIO_MODER = 0x55555555; // 15-0 outputs
2000026e:	4b03      	ldr	r3, [pc, #12]	; (2000027c <graphic_wait_ready+0x5e>)
20000270:	4a05      	ldr	r2, [pc, #20]	; (20000288 <graphic_wait_ready+0x6a>)
20000272:	601a      	str	r2, [r3, #0]
}
20000274:	46c0      	nop			; (mov r8, r8)
20000276:	46bd      	mov	sp, r7
20000278:	b002      	add	sp, #8
2000027a:	bd80      	pop	{r7, pc}
2000027c:	40021000 	andmi	r1, r2, r0
20000280:	00005555 	andeq	r5, r0, r5, asr r5
20000284:	40021011 	andmi	r1, r2, r1, lsl r0
20000288:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000028c <graphic_read>:

static uint8_t graphic_read(uint8_t controller)
{
2000028c:	b580      	push	{r7, lr}
2000028e:	b084      	sub	sp, #16
20000290:	af00      	add	r7, sp, #0
20000292:	0002      	movs	r2, r0
20000294:	1dfb      	adds	r3, r7, #7
20000296:	701a      	strb	r2, [r3, #0]
    uint8_t c;
    graphic_ctrl_bit_clear(B_E);
20000298:	2040      	movs	r0, #64	; 0x40
2000029a:	f7ff ff3d 	bl	20000118 <graphic_ctrl_bit_clear>
    *GPIO_MODER = 0x00005555; // 15-8 inputs, 7-0 outputs
2000029e:	4b1c      	ldr	r3, [pc, #112]	; (20000310 <graphic_read+0x84>)
200002a0:	4a1c      	ldr	r2, [pc, #112]	; (20000314 <graphic_read+0x88>)
200002a2:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_set(B_RS | B_RW);
200002a4:	2003      	movs	r0, #3
200002a6:	f7ff ff0e 	bl	200000c6 <graphic_ctrl_bit_set>
    select_controller(controller);
200002aa:	1dfb      	adds	r3, r7, #7
200002ac:	781b      	ldrb	r3, [r3, #0]
200002ae:	0018      	movs	r0, r3
200002b0:	f7ff ff5a 	bl	20000168 <select_controller>
    delay_500ns();
200002b4:	f7ff fefe 	bl	200000b4 <delay_500ns>
    graphic_ctrl_bit_set(B_E);
200002b8:	2040      	movs	r0, #64	; 0x40
200002ba:	f7ff ff04 	bl	200000c6 <graphic_ctrl_bit_set>
    delay_500ns();
200002be:	f7ff fef9 	bl	200000b4 <delay_500ns>
    c = *GPIO_IDR_HIGH;
200002c2:	4a15      	ldr	r2, [pc, #84]	; (20000318 <graphic_read+0x8c>)
200002c4:	230f      	movs	r3, #15
200002c6:	18fb      	adds	r3, r7, r3
200002c8:	7812      	ldrb	r2, [r2, #0]
200002ca:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
200002cc:	2040      	movs	r0, #64	; 0x40
200002ce:	f7ff ff23 	bl	20000118 <graphic_ctrl_bit_clear>
    *GPIO_MODER = 0x55555555; // 15-0 outputs
200002d2:	4b0f      	ldr	r3, [pc, #60]	; (20000310 <graphic_read+0x84>)
200002d4:	4a11      	ldr	r2, [pc, #68]	; (2000031c <graphic_read+0x90>)
200002d6:	601a      	str	r2, [r3, #0]

    if(controller & B_CS1) {
200002d8:	1dfb      	adds	r3, r7, #7
200002da:	781b      	ldrb	r3, [r3, #0]
200002dc:	2208      	movs	r2, #8
200002de:	4013      	ands	r3, r2
200002e0:	d004      	beq.n	200002ec <graphic_read+0x60>
        select_controller(B_CS1);
200002e2:	2008      	movs	r0, #8
200002e4:	f7ff ff40 	bl	20000168 <select_controller>
        graphic_wait_ready();
200002e8:	f7ff ff99 	bl	2000021e <graphic_wait_ready>
    }
    if(controller & B_CS2) {
200002ec:	1dfb      	adds	r3, r7, #7
200002ee:	781b      	ldrb	r3, [r3, #0]
200002f0:	2210      	movs	r2, #16
200002f2:	4013      	ands	r3, r2
200002f4:	d004      	beq.n	20000300 <graphic_read+0x74>
        select_controller(B_CS2);
200002f6:	2010      	movs	r0, #16
200002f8:	f7ff ff36 	bl	20000168 <select_controller>
        graphic_wait_ready();
200002fc:	f7ff ff8f 	bl	2000021e <graphic_wait_ready>
    }
    return c;
20000300:	230f      	movs	r3, #15
20000302:	18fb      	adds	r3, r7, r3
20000304:	781b      	ldrb	r3, [r3, #0]
}
20000306:	0018      	movs	r0, r3
20000308:	46bd      	mov	sp, r7
2000030a:	b004      	add	sp, #16
2000030c:	bd80      	pop	{r7, pc}
2000030e:	46c0      	nop			; (mov r8, r8)
20000310:	40021000 	andmi	r1, r2, r0
20000314:	00005555 	andeq	r5, r0, r5, asr r5
20000318:	40021011 	andmi	r1, r2, r1, lsl r0
2000031c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000320 <graphic_read_data>:

static uint8_t graphic_read_data(uint8_t controller)
{
20000320:	b580      	push	{r7, lr}
20000322:	b082      	sub	sp, #8
20000324:	af00      	add	r7, sp, #0
20000326:	0002      	movs	r2, r0
20000328:	1dfb      	adds	r3, r7, #7
2000032a:	701a      	strb	r2, [r3, #0]
    graphic_read(controller);
2000032c:	1dfb      	adds	r3, r7, #7
2000032e:	781b      	ldrb	r3, [r3, #0]
20000330:	0018      	movs	r0, r3
20000332:	f7ff ffab 	bl	2000028c <graphic_read>
    return graphic_read(controller);
20000336:	1dfb      	adds	r3, r7, #7
20000338:	781b      	ldrb	r3, [r3, #0]
2000033a:	0018      	movs	r0, r3
2000033c:	f7ff ffa6 	bl	2000028c <graphic_read>
20000340:	0003      	movs	r3, r0
}
20000342:	0018      	movs	r0, r3
20000344:	46bd      	mov	sp, r7
20000346:	b002      	add	sp, #8
20000348:	bd80      	pop	{r7, pc}

2000034a <graphic_write>:

static void graphic_write(uint8_t value, uint8_t controller)
{
2000034a:	b580      	push	{r7, lr}
2000034c:	b082      	sub	sp, #8
2000034e:	af00      	add	r7, sp, #0
20000350:	0002      	movs	r2, r0
20000352:	1dfb      	adds	r3, r7, #7
20000354:	701a      	strb	r2, [r3, #0]
20000356:	1dbb      	adds	r3, r7, #6
20000358:	1c0a      	adds	r2, r1, #0
2000035a:	701a      	strb	r2, [r3, #0]
    *GPIO_ODR_HIGH = value;
2000035c:	4a15      	ldr	r2, [pc, #84]	; (200003b4 <graphic_write+0x6a>)
2000035e:	1dfb      	adds	r3, r7, #7
20000360:	781b      	ldrb	r3, [r3, #0]
20000362:	7013      	strb	r3, [r2, #0]
    select_controller(controller);
20000364:	1dbb      	adds	r3, r7, #6
20000366:	781b      	ldrb	r3, [r3, #0]
20000368:	0018      	movs	r0, r3
2000036a:	f7ff fefd 	bl	20000168 <select_controller>
    delay_500ns();
2000036e:	f7ff fea1 	bl	200000b4 <delay_500ns>
    graphic_ctrl_bit_set(B_E);
20000372:	2040      	movs	r0, #64	; 0x40
20000374:	f7ff fea7 	bl	200000c6 <graphic_ctrl_bit_set>
    delay_500ns();
20000378:	f7ff fe9c 	bl	200000b4 <delay_500ns>
    graphic_ctrl_bit_clear(B_E);
2000037c:	2040      	movs	r0, #64	; 0x40
2000037e:	f7ff fecb 	bl	20000118 <graphic_ctrl_bit_clear>

    if(controller & B_CS1) {
20000382:	1dbb      	adds	r3, r7, #6
20000384:	781b      	ldrb	r3, [r3, #0]
20000386:	2208      	movs	r2, #8
20000388:	4013      	ands	r3, r2
2000038a:	d004      	beq.n	20000396 <graphic_write+0x4c>
        select_controller(B_CS1);
2000038c:	2008      	movs	r0, #8
2000038e:	f7ff feeb 	bl	20000168 <select_controller>
        graphic_wait_ready();
20000392:	f7ff ff44 	bl	2000021e <graphic_wait_ready>
    }
    if(controller & B_CS2) {
20000396:	1dbb      	adds	r3, r7, #6
20000398:	781b      	ldrb	r3, [r3, #0]
2000039a:	2210      	movs	r2, #16
2000039c:	4013      	ands	r3, r2
2000039e:	d004      	beq.n	200003aa <graphic_write+0x60>
        select_controller(B_CS2);
200003a0:	2010      	movs	r0, #16
200003a2:	f7ff fee1 	bl	20000168 <select_controller>
        graphic_wait_ready();
200003a6:	f7ff ff3a 	bl	2000021e <graphic_wait_ready>
    }
}
200003aa:	46c0      	nop			; (mov r8, r8)
200003ac:	46bd      	mov	sp, r7
200003ae:	b002      	add	sp, #8
200003b0:	bd80      	pop	{r7, pc}
200003b2:	46c0      	nop			; (mov r8, r8)
200003b4:	40021015 	andmi	r1, r2, r5, lsl r0

200003b8 <graphic_write_data>:

 void graphic_write_data(uint8_t data, uint8_t controller)
{
200003b8:	b580      	push	{r7, lr}
200003ba:	b082      	sub	sp, #8
200003bc:	af00      	add	r7, sp, #0
200003be:	0002      	movs	r2, r0
200003c0:	1dfb      	adds	r3, r7, #7
200003c2:	701a      	strb	r2, [r3, #0]
200003c4:	1dbb      	adds	r3, r7, #6
200003c6:	1c0a      	adds	r2, r1, #0
200003c8:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
200003ca:	2040      	movs	r0, #64	; 0x40
200003cc:	f7ff fea4 	bl	20000118 <graphic_ctrl_bit_clear>
	select_controller(controller);
200003d0:	1dbb      	adds	r3, r7, #6
200003d2:	781b      	ldrb	r3, [r3, #0]
200003d4:	0018      	movs	r0, r3
200003d6:	f7ff fec7 	bl	20000168 <select_controller>
	graphic_ctrl_bit_set(B_RS);
200003da:	2001      	movs	r0, #1
200003dc:	f7ff fe73 	bl	200000c6 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
200003e0:	2002      	movs	r0, #2
200003e2:	f7ff fe99 	bl	20000118 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
200003e6:	1dbb      	adds	r3, r7, #6
200003e8:	781a      	ldrb	r2, [r3, #0]
200003ea:	1dfb      	adds	r3, r7, #7
200003ec:	781b      	ldrb	r3, [r3, #0]
200003ee:	0011      	movs	r1, r2
200003f0:	0018      	movs	r0, r3
200003f2:	f7ff ffaa 	bl	2000034a <graphic_write>
}
200003f6:	46c0      	nop			; (mov r8, r8)
200003f8:	46bd      	mov	sp, r7
200003fa:	b002      	add	sp, #8
200003fc:	bd80      	pop	{r7, pc}

200003fe <graphic_write_command>:

 void graphic_write_command(uint8_t command, uint8_t controller)
{
200003fe:	b580      	push	{r7, lr}
20000400:	b082      	sub	sp, #8
20000402:	af00      	add	r7, sp, #0
20000404:	0002      	movs	r2, r0
20000406:	1dfb      	adds	r3, r7, #7
20000408:	701a      	strb	r2, [r3, #0]
2000040a:	1dbb      	adds	r3, r7, #6
2000040c:	1c0a      	adds	r2, r1, #0
2000040e:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000410:	2040      	movs	r0, #64	; 0x40
20000412:	f7ff fe81 	bl	20000118 <graphic_ctrl_bit_clear>
    select_controller(controller);
20000416:	1dbb      	adds	r3, r7, #6
20000418:	781b      	ldrb	r3, [r3, #0]
2000041a:	0018      	movs	r0, r3
2000041c:	f7ff fea4 	bl	20000168 <select_controller>
    graphic_ctrl_bit_clear(B_RS);
20000420:	2001      	movs	r0, #1
20000422:	f7ff fe79 	bl	20000118 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RW);
20000426:	2002      	movs	r0, #2
20000428:	f7ff fe76 	bl	20000118 <graphic_ctrl_bit_clear>
    	graphic_write(command, controller);
2000042c:	1dbb      	adds	r3, r7, #6
2000042e:	781a      	ldrb	r2, [r3, #0]
20000430:	1dfb      	adds	r3, r7, #7
20000432:	781b      	ldrb	r3, [r3, #0]
20000434:	0011      	movs	r1, r2
20000436:	0018      	movs	r0, r3
20000438:	f7ff ff87 	bl	2000034a <graphic_write>
    
}
2000043c:	46c0      	nop			; (mov r8, r8)
2000043e:	46bd      	mov	sp, r7
20000440:	b002      	add	sp, #8
20000442:	bd80      	pop	{r7, pc}

20000444 <graphic_clear_screen>:

void graphic_clear_screen(void)
{
20000444:	b580      	push	{r7, lr}
20000446:	b082      	sub	sp, #8
20000448:	af00      	add	r7, sp, #0
    uint8_t i, j;
    for(j = 0; j < 8; j++) {
2000044a:	1dbb      	adds	r3, r7, #6
2000044c:	2200      	movs	r2, #0
2000044e:	701a      	strb	r2, [r3, #0]
20000450:	e023      	b.n	2000049a <graphic_clear_screen+0x56>
        graphic_write_command(LCD_SET_PAGE | j, B_CS1 | B_CS2);
20000452:	1dbb      	adds	r3, r7, #6
20000454:	781b      	ldrb	r3, [r3, #0]
20000456:	2248      	movs	r2, #72	; 0x48
20000458:	4252      	negs	r2, r2
2000045a:	4313      	orrs	r3, r2
2000045c:	b2db      	uxtb	r3, r3
2000045e:	2118      	movs	r1, #24
20000460:	0018      	movs	r0, r3
20000462:	f7ff ffcc 	bl	200003fe <graphic_write_command>
        graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
20000466:	2118      	movs	r1, #24
20000468:	2040      	movs	r0, #64	; 0x40
2000046a:	f7ff ffc8 	bl	200003fe <graphic_write_command>
        for(i = 0; i <= 63; i++) {
2000046e:	1dfb      	adds	r3, r7, #7
20000470:	2200      	movs	r2, #0
20000472:	701a      	strb	r2, [r3, #0]
20000474:	e008      	b.n	20000488 <graphic_clear_screen+0x44>
            graphic_write_data(0, B_CS1 | B_CS2);
20000476:	2118      	movs	r1, #24
20000478:	2000      	movs	r0, #0
2000047a:	f7ff ff9d 	bl	200003b8 <graphic_write_data>
        for(i = 0; i <= 63; i++) {
2000047e:	1dfb      	adds	r3, r7, #7
20000480:	781a      	ldrb	r2, [r3, #0]
20000482:	1dfb      	adds	r3, r7, #7
20000484:	3201      	adds	r2, #1
20000486:	701a      	strb	r2, [r3, #0]
20000488:	1dfb      	adds	r3, r7, #7
2000048a:	781b      	ldrb	r3, [r3, #0]
2000048c:	2b3f      	cmp	r3, #63	; 0x3f
2000048e:	d9f2      	bls.n	20000476 <graphic_clear_screen+0x32>
    for(j = 0; j < 8; j++) {
20000490:	1dbb      	adds	r3, r7, #6
20000492:	781a      	ldrb	r2, [r3, #0]
20000494:	1dbb      	adds	r3, r7, #6
20000496:	3201      	adds	r2, #1
20000498:	701a      	strb	r2, [r3, #0]
2000049a:	1dbb      	adds	r3, r7, #6
2000049c:	781b      	ldrb	r3, [r3, #0]
2000049e:	2b07      	cmp	r3, #7
200004a0:	d9d7      	bls.n	20000452 <graphic_clear_screen+0xe>
        }
    }
}
200004a2:	46c0      	nop			; (mov r8, r8)
200004a4:	46c0      	nop			; (mov r8, r8)
200004a6:	46bd      	mov	sp, r7
200004a8:	b002      	add	sp, #8
200004aa:	bd80      	pop	{r7, pc}

200004ac <pixel>:

void pixel(int x, int y, int set)
{
200004ac:	b5f0      	push	{r4, r5, r6, r7, lr}
200004ae:	b089      	sub	sp, #36	; 0x24
200004b0:	af00      	add	r7, sp, #0
200004b2:	60f8      	str	r0, [r7, #12]
200004b4:	60b9      	str	r1, [r7, #8]
200004b6:	607a      	str	r2, [r7, #4]
    uint8_t mask, c, controller;
    int index;
    if((x < 1) || (y < 1) || (x > 128) || (y > 64))
200004b8:	68fb      	ldr	r3, [r7, #12]
200004ba:	2b00      	cmp	r3, #0
200004bc:	dc00      	bgt.n	200004c0 <pixel+0x14>
200004be:	e0b5      	b.n	2000062c <pixel+0x180>
200004c0:	68bb      	ldr	r3, [r7, #8]
200004c2:	2b00      	cmp	r3, #0
200004c4:	dc00      	bgt.n	200004c8 <pixel+0x1c>
200004c6:	e0b1      	b.n	2000062c <pixel+0x180>
200004c8:	68fb      	ldr	r3, [r7, #12]
200004ca:	2b80      	cmp	r3, #128	; 0x80
200004cc:	dd00      	ble.n	200004d0 <pixel+0x24>
200004ce:	e0ad      	b.n	2000062c <pixel+0x180>
200004d0:	68bb      	ldr	r3, [r7, #8]
200004d2:	2b40      	cmp	r3, #64	; 0x40
200004d4:	dd00      	ble.n	200004d8 <pixel+0x2c>
200004d6:	e0a9      	b.n	2000062c <pixel+0x180>
        return;

    index = (y - 1) / 8;
200004d8:	68bb      	ldr	r3, [r7, #8]
200004da:	3b01      	subs	r3, #1
200004dc:	2b00      	cmp	r3, #0
200004de:	da00      	bge.n	200004e2 <pixel+0x36>
200004e0:	3307      	adds	r3, #7
200004e2:	10db      	asrs	r3, r3, #3
200004e4:	61bb      	str	r3, [r7, #24]

    switch((y - 1) % 8) {
200004e6:	68bb      	ldr	r3, [r7, #8]
200004e8:	3b01      	subs	r3, #1
200004ea:	4a52      	ldr	r2, [pc, #328]	; (20000634 <pixel+0x188>)
200004ec:	4013      	ands	r3, r2
200004ee:	d504      	bpl.n	200004fa <pixel+0x4e>
200004f0:	3b01      	subs	r3, #1
200004f2:	2208      	movs	r2, #8
200004f4:	4252      	negs	r2, r2
200004f6:	4313      	orrs	r3, r2
200004f8:	3301      	adds	r3, #1
200004fa:	2b07      	cmp	r3, #7
200004fc:	d82c      	bhi.n	20000558 <pixel+0xac>
200004fe:	009a      	lsls	r2, r3, #2
20000500:	4b4d      	ldr	r3, [pc, #308]	; (20000638 <pixel+0x18c>)
20000502:	18d3      	adds	r3, r2, r3
20000504:	681b      	ldr	r3, [r3, #0]
20000506:	469f      	mov	pc, r3
    case 0:
        mask = 1;
20000508:	231f      	movs	r3, #31
2000050a:	18fb      	adds	r3, r7, r3
2000050c:	2201      	movs	r2, #1
2000050e:	701a      	strb	r2, [r3, #0]
        break;
20000510:	e022      	b.n	20000558 <pixel+0xac>
    case 1:
        mask = 2;
20000512:	231f      	movs	r3, #31
20000514:	18fb      	adds	r3, r7, r3
20000516:	2202      	movs	r2, #2
20000518:	701a      	strb	r2, [r3, #0]
        break;
2000051a:	e01d      	b.n	20000558 <pixel+0xac>
    case 2:
        mask = 4;
2000051c:	231f      	movs	r3, #31
2000051e:	18fb      	adds	r3, r7, r3
20000520:	2204      	movs	r2, #4
20000522:	701a      	strb	r2, [r3, #0]
        break;
20000524:	e018      	b.n	20000558 <pixel+0xac>
    case 3:
        mask = 8;
20000526:	231f      	movs	r3, #31
20000528:	18fb      	adds	r3, r7, r3
2000052a:	2208      	movs	r2, #8
2000052c:	701a      	strb	r2, [r3, #0]
        break;
2000052e:	e013      	b.n	20000558 <pixel+0xac>
    case 4:
        mask = 0x10;
20000530:	231f      	movs	r3, #31
20000532:	18fb      	adds	r3, r7, r3
20000534:	2210      	movs	r2, #16
20000536:	701a      	strb	r2, [r3, #0]
        break;
20000538:	e00e      	b.n	20000558 <pixel+0xac>
    case 5:
        mask = 0x20;
2000053a:	231f      	movs	r3, #31
2000053c:	18fb      	adds	r3, r7, r3
2000053e:	2220      	movs	r2, #32
20000540:	701a      	strb	r2, [r3, #0]
        break;
20000542:	e009      	b.n	20000558 <pixel+0xac>
    case 6:
        mask = 0x40;
20000544:	231f      	movs	r3, #31
20000546:	18fb      	adds	r3, r7, r3
20000548:	2240      	movs	r2, #64	; 0x40
2000054a:	701a      	strb	r2, [r3, #0]
        break;
2000054c:	e004      	b.n	20000558 <pixel+0xac>
    case 7:
        mask = 0x80;
2000054e:	231f      	movs	r3, #31
20000550:	18fb      	adds	r3, r7, r3
20000552:	2280      	movs	r2, #128	; 0x80
20000554:	701a      	strb	r2, [r3, #0]
        break;
20000556:	46c0      	nop			; (mov r8, r8)
    }

    if(set == 0)
20000558:	687b      	ldr	r3, [r7, #4]
2000055a:	2b00      	cmp	r3, #0
2000055c:	d105      	bne.n	2000056a <pixel+0xbe>
        mask = ~mask;
2000055e:	221f      	movs	r2, #31
20000560:	18bb      	adds	r3, r7, r2
20000562:	18ba      	adds	r2, r7, r2
20000564:	7812      	ldrb	r2, [r2, #0]
20000566:	43d2      	mvns	r2, r2
20000568:	701a      	strb	r2, [r3, #0]
    if(x > 64) {
2000056a:	68fb      	ldr	r3, [r7, #12]
2000056c:	2b40      	cmp	r3, #64	; 0x40
2000056e:	dd07      	ble.n	20000580 <pixel+0xd4>
        controller = B_CS2;
20000570:	231e      	movs	r3, #30
20000572:	18fb      	adds	r3, r7, r3
20000574:	2210      	movs	r2, #16
20000576:	701a      	strb	r2, [r3, #0]
        x = x - 65;
20000578:	68fb      	ldr	r3, [r7, #12]
2000057a:	3b41      	subs	r3, #65	; 0x41
2000057c:	60fb      	str	r3, [r7, #12]
2000057e:	e006      	b.n	2000058e <pixel+0xe2>
    } else {
        controller = B_CS1;
20000580:	231e      	movs	r3, #30
20000582:	18fb      	adds	r3, r7, r3
20000584:	2208      	movs	r2, #8
20000586:	701a      	strb	r2, [r3, #0]
        x = x - 1;
20000588:	68fb      	ldr	r3, [r7, #12]
2000058a:	3b01      	subs	r3, #1
2000058c:	60fb      	str	r3, [r7, #12]
    }

    graphic_write_command(LCD_SET_ADD | x, controller);
2000058e:	68fb      	ldr	r3, [r7, #12]
20000590:	b25b      	sxtb	r3, r3
20000592:	2240      	movs	r2, #64	; 0x40
20000594:	4313      	orrs	r3, r2
20000596:	b25b      	sxtb	r3, r3
20000598:	b2da      	uxtb	r2, r3
2000059a:	251e      	movs	r5, #30
2000059c:	197b      	adds	r3, r7, r5
2000059e:	781b      	ldrb	r3, [r3, #0]
200005a0:	0019      	movs	r1, r3
200005a2:	0010      	movs	r0, r2
200005a4:	f7ff ff2b 	bl	200003fe <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE | index, controller);
200005a8:	69bb      	ldr	r3, [r7, #24]
200005aa:	b25b      	sxtb	r3, r3
200005ac:	2248      	movs	r2, #72	; 0x48
200005ae:	4252      	negs	r2, r2
200005b0:	4313      	orrs	r3, r2
200005b2:	b25b      	sxtb	r3, r3
200005b4:	b2da      	uxtb	r2, r3
200005b6:	197b      	adds	r3, r7, r5
200005b8:	781b      	ldrb	r3, [r3, #0]
200005ba:	0019      	movs	r1, r3
200005bc:	0010      	movs	r0, r2
200005be:	f7ff ff1e 	bl	200003fe <graphic_write_command>
    c = graphic_read_data(controller);
200005c2:	2617      	movs	r6, #23
200005c4:	19bc      	adds	r4, r7, r6
200005c6:	197b      	adds	r3, r7, r5
200005c8:	781b      	ldrb	r3, [r3, #0]
200005ca:	0018      	movs	r0, r3
200005cc:	f7ff fea8 	bl	20000320 <graphic_read_data>
200005d0:	0003      	movs	r3, r0
200005d2:	7023      	strb	r3, [r4, #0]
    graphic_write_command(LCD_SET_ADD | x, controller);
200005d4:	68fb      	ldr	r3, [r7, #12]
200005d6:	b25b      	sxtb	r3, r3
200005d8:	2240      	movs	r2, #64	; 0x40
200005da:	4313      	orrs	r3, r2
200005dc:	b25b      	sxtb	r3, r3
200005de:	b2da      	uxtb	r2, r3
200005e0:	197b      	adds	r3, r7, r5
200005e2:	781b      	ldrb	r3, [r3, #0]
200005e4:	0019      	movs	r1, r3
200005e6:	0010      	movs	r0, r2
200005e8:	f7ff ff09 	bl	200003fe <graphic_write_command>
    if(set)
200005ec:	687b      	ldr	r3, [r7, #4]
200005ee:	2b00      	cmp	r3, #0
200005f0:	d008      	beq.n	20000604 <pixel+0x158>
        mask = mask | c;
200005f2:	221f      	movs	r2, #31
200005f4:	18bb      	adds	r3, r7, r2
200005f6:	18b9      	adds	r1, r7, r2
200005f8:	19ba      	adds	r2, r7, r6
200005fa:	7809      	ldrb	r1, [r1, #0]
200005fc:	7812      	ldrb	r2, [r2, #0]
200005fe:	430a      	orrs	r2, r1
20000600:	701a      	strb	r2, [r3, #0]
20000602:	e008      	b.n	20000616 <pixel+0x16a>
    else
        mask = mask & c;
20000604:	221f      	movs	r2, #31
20000606:	18bb      	adds	r3, r7, r2
20000608:	18ba      	adds	r2, r7, r2
2000060a:	2117      	movs	r1, #23
2000060c:	1879      	adds	r1, r7, r1
2000060e:	7812      	ldrb	r2, [r2, #0]
20000610:	7809      	ldrb	r1, [r1, #0]
20000612:	400a      	ands	r2, r1
20000614:	701a      	strb	r2, [r3, #0]
    graphic_write_data(mask, controller);
20000616:	231e      	movs	r3, #30
20000618:	18fb      	adds	r3, r7, r3
2000061a:	781a      	ldrb	r2, [r3, #0]
2000061c:	231f      	movs	r3, #31
2000061e:	18fb      	adds	r3, r7, r3
20000620:	781b      	ldrb	r3, [r3, #0]
20000622:	0011      	movs	r1, r2
20000624:	0018      	movs	r0, r3
20000626:	f7ff fec7 	bl	200003b8 <graphic_write_data>
2000062a:	e000      	b.n	2000062e <pixel+0x182>
        return;
2000062c:	46c0      	nop			; (mov r8, r8)
}
2000062e:	46bd      	mov	sp, r7
20000630:	b009      	add	sp, #36	; 0x24
20000632:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000634:	80000007 	andhi	r0, r0, r7
20000638:	20000714 	andcs	r0, r0, r4, lsl r7

2000063c <pixelate>:

void pixelate (void) {
2000063c:	b580      	push	{r7, lr}
2000063e:	b082      	sub	sp, #8
20000640:	af00      	add	r7, sp, #0
    unsigned i;

         for(i = 0; i < 128; i++) {
20000642:	2300      	movs	r3, #0
20000644:	607b      	str	r3, [r7, #4]
20000646:	e008      	b.n	2000065a <pixelate+0x1e>
        pixel(i, 10, 1);
20000648:	687b      	ldr	r3, [r7, #4]
2000064a:	2201      	movs	r2, #1
2000064c:	210a      	movs	r1, #10
2000064e:	0018      	movs	r0, r3
20000650:	f7ff ff2c 	bl	200004ac <pixel>
         for(i = 0; i < 128; i++) {
20000654:	687b      	ldr	r3, [r7, #4]
20000656:	3301      	adds	r3, #1
20000658:	607b      	str	r3, [r7, #4]
2000065a:	687b      	ldr	r3, [r7, #4]
2000065c:	2b7f      	cmp	r3, #127	; 0x7f
2000065e:	d9f3      	bls.n	20000648 <pixelate+0xc>
    }
    for(i = 0; i < 64; i++) {
20000660:	2300      	movs	r3, #0
20000662:	607b      	str	r3, [r7, #4]
20000664:	e008      	b.n	20000678 <pixelate+0x3c>
        pixel(10, i, 1);
20000666:	687b      	ldr	r3, [r7, #4]
20000668:	2201      	movs	r2, #1
2000066a:	0019      	movs	r1, r3
2000066c:	200a      	movs	r0, #10
2000066e:	f7ff ff1d 	bl	200004ac <pixel>
    for(i = 0; i < 64; i++) {
20000672:	687b      	ldr	r3, [r7, #4]
20000674:	3301      	adds	r3, #1
20000676:	607b      	str	r3, [r7, #4]
20000678:	687b      	ldr	r3, [r7, #4]
2000067a:	2b3f      	cmp	r3, #63	; 0x3f
2000067c:	d9f3      	bls.n	20000666 <pixelate+0x2a>
    }
    delay_milli(500);
2000067e:	23fa      	movs	r3, #250	; 0xfa
20000680:	005b      	lsls	r3, r3, #1
20000682:	0018      	movs	r0, r3
20000684:	f7ff fd01 	bl	2000008a <delay_milli>
    for(i = 0; i < 128; i++) {
20000688:	2300      	movs	r3, #0
2000068a:	607b      	str	r3, [r7, #4]
2000068c:	e008      	b.n	200006a0 <pixelate+0x64>
        pixel(i, 10, 0);
2000068e:	687b      	ldr	r3, [r7, #4]
20000690:	2200      	movs	r2, #0
20000692:	210a      	movs	r1, #10
20000694:	0018      	movs	r0, r3
20000696:	f7ff ff09 	bl	200004ac <pixel>
    for(i = 0; i < 128; i++) {
2000069a:	687b      	ldr	r3, [r7, #4]
2000069c:	3301      	adds	r3, #1
2000069e:	607b      	str	r3, [r7, #4]
200006a0:	687b      	ldr	r3, [r7, #4]
200006a2:	2b7f      	cmp	r3, #127	; 0x7f
200006a4:	d9f3      	bls.n	2000068e <pixelate+0x52>
    }
    for(i = 0; i < 64; i++) {
200006a6:	2300      	movs	r3, #0
200006a8:	607b      	str	r3, [r7, #4]
200006aa:	e008      	b.n	200006be <pixelate+0x82>
        pixel(10, i, 0);
200006ac:	687b      	ldr	r3, [r7, #4]
200006ae:	2200      	movs	r2, #0
200006b0:	0019      	movs	r1, r3
200006b2:	200a      	movs	r0, #10
200006b4:	f7ff fefa 	bl	200004ac <pixel>
    for(i = 0; i < 64; i++) {
200006b8:	687b      	ldr	r3, [r7, #4]
200006ba:	3301      	adds	r3, #1
200006bc:	607b      	str	r3, [r7, #4]
200006be:	687b      	ldr	r3, [r7, #4]
200006c0:	2b3f      	cmp	r3, #63	; 0x3f
200006c2:	d9f3      	bls.n	200006ac <pixelate+0x70>
    }
    }
200006c4:	46c0      	nop			; (mov r8, r8)
200006c6:	46c0      	nop			; (mov r8, r8)
200006c8:	46bd      	mov	sp, r7
200006ca:	b002      	add	sp, #8
200006cc:	bd80      	pop	{r7, pc}

200006ce <init_app>:

// ################################################################## MAIN #########################################################################

void init_app(void)
{
200006ce:	b580      	push	{r7, lr}
200006d0:	af00      	add	r7, sp, #0
      #ifdef USBDM
	 *( (unsigned long *) 0x40023830) = 0x18;
200006d2:	4b05      	ldr	r3, [pc, #20]	; (200006e8 <init_app+0x1a>)
200006d4:	2218      	movs	r2, #24
200006d6:	601a      	str	r2, [r3, #0]
	 __asm volatile( " LDR R0,=0x08000209\n BLX R0 \n");
200006d8:	480d      	ldr	r0, [pc, #52]	; (20000710 <main+0x1c>)
200006da:	4780      	blx	r0
#endif
    *GPIO_MODER = 0x55555555;
200006dc:	4b03      	ldr	r3, [pc, #12]	; (200006ec <init_app+0x1e>)
200006de:	4a04      	ldr	r2, [pc, #16]	; (200006f0 <init_app+0x22>)
200006e0:	601a      	str	r2, [r3, #0]
}
200006e2:	46c0      	nop			; (mov r8, r8)
200006e4:	46bd      	mov	sp, r7
200006e6:	bd80      	pop	{r7, pc}
200006e8:	40023830 	andmi	r3, r2, r0, lsr r8
200006ec:	40021000 	andmi	r1, r2, r0
200006f0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200006f4 <main>:

void main(void)
{
200006f4:	b580      	push	{r7, lr}
200006f6:	af00      	add	r7, sp, #0
    init_app();
200006f8:	f7ff ffe9 	bl	200006ce <init_app>
    graphic_initialize();
200006fc:	f7ff fd61 	bl	200001c2 <graphic_initialize>
#ifndef SIMULATOR
    graphic_clear_screen();
20000700:	f7ff fea0 	bl	20000444 <graphic_clear_screen>
#endif
    pixelate(); 
20000704:	f7ff ff9a 	bl	2000063c <pixelate>
   
20000708:	46c0      	nop			; (mov r8, r8)
2000070a:	46bd      	mov	sp, r7
2000070c:	bd80      	pop	{r7, pc}
2000070e:	02090000 	andeq	r0, r9, #0
20000712:	05080800 	streq	r0, [r8, #-2048]	; 0xfffff800
20000716:	05122000 	ldreq	r2, [r2, #-0]
2000071a:	051c2000 	ldreq	r2, [ip, #-0]
2000071e:	05262000 	streq	r2, [r6, #-0]!
20000722:	05302000 	ldreq	r2, [r0, #-0]!
20000726:	053a2000 	ldreq	r2, [sl, #-0]!
2000072a:	05442000 	strbeq	r2, [r4, #-0]
2000072e:	054e2000 	strbeq	r2, [lr, #-0]
20000732:	Address 0x20000732 is out of bounds.


Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000003aa 	andeq	r0, r0, sl, lsr #7
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000084 	andeq	r0, r0, r4, lsl #1
  10:	0000350c 	andeq	r3, r0, ip, lsl #10
  14:	0001da00 	andeq	sp, r1, r0, lsl #20
	...
  24:	01740200 	cmneq	r4, r0, lsl #4
  28:	30010000 	andcc	r0, r1, r0
  2c:	00003117 	andeq	r3, r0, r7, lsl r1
  30:	08010300 	stmdaeq	r1, {r8, r9}
  34:	0000017c 	andeq	r0, r0, ip, ror r1
  38:	00019f04 	andeq	r9, r1, r4, lsl #30
  3c:	01560100 	cmpeq	r6, r0, lsl #2
  40:	0006f406 	andeq	pc, r6, r6, lsl #8
  44:	00001a20 	andeq	r1, r0, r0, lsr #20
  48:	059c0100 	ldreq	r0, [ip, #256]	; 0x100
  4c:	000001be 			; <UNDEFINED> instruction: 0x000001be
  50:	06014d01 	streq	r4, [r1], -r1, lsl #26
  54:	200006ce 	andcs	r0, r0, lr, asr #13
  58:	00000026 	andeq	r0, r0, r6, lsr #32
  5c:	1c069c01 	stcne	12, cr9, [r6], {1}
  60:	01000002 	tsteq	r0, r2
  64:	3c060139 	stfccs	f0, [r6], {57}	; 0x39
  68:	92200006 	eorls	r0, r0, #6
  6c:	01000000 	mrseq	r0, (UNDEF: 0)
  70:	0000849c 	muleq	r0, ip, r4
  74:	00690700 	rsbeq	r0, r9, r0, lsl #14
  78:	0e013a01 	vmlaeq.f32	s6, s2, s2
  7c:	00000084 	andeq	r0, r0, r4, lsl #1
  80:	00749102 	rsbseq	r9, r4, r2, lsl #2
  84:	12070403 	andne	r0, r7, #50331648	; 0x3000000
  88:	06000000 	streq	r0, [r0], -r0
  8c:	0000007e 	andeq	r0, r0, lr, ror r0
  90:	06010001 	streq	r0, [r1], -r1
  94:	200004ac 	andcs	r0, r0, ip, lsr #9
  98:	00000190 	muleq	r0, r0, r1
  9c:	010d9c01 	tsteq	sp, r1, lsl #24
  a0:	78080000 	stmdavc	r8, {}	; <UNPREDICTABLE>
  a4:	01000100 	mrseq	r0, (UNDEF: 16)
  a8:	00010d10 	andeq	r0, r1, r0, lsl sp
  ac:	54910200 	ldrpl	r0, [r1], #512	; 0x200
  b0:	01007908 	tsteq	r0, r8, lsl #18
  b4:	0d170100 	ldfeqs	f0, [r7, #-0]
  b8:	02000001 	andeq	r0, r0, #1
  bc:	73085091 	movwvc	r5, #32913	; 0x8091
  c0:	01007465 	tsteq	r0, r5, ror #8
  c4:	0d1e0100 	ldfeqs	f0, [lr, #-0]
  c8:	02000001 	andeq	r0, r0, #1
  cc:	6f094c91 	svcvs	0x00094c91
  d0:	01000001 	tsteq	r0, r1
  d4:	250d0102 	strcs	r0, [sp, #-258]	; 0xfffffefe
  d8:	02000000 	andeq	r0, r0, #0
  dc:	63076791 	movwvs	r6, #30609	; 0x7791
  e0:	01020100 	mrseq	r0, (UNDEF: 18)
  e4:	00002513 	andeq	r2, r0, r3, lsl r5
  e8:	5f910200 	svcpl	0x00910200
  ec:	00011e09 	andeq	r1, r1, r9, lsl #28
  f0:	01020100 	mrseq	r0, (UNDEF: 18)
  f4:	00002516 	andeq	r2, r0, r6, lsl r5
  f8:	66910200 	ldrvs	r0, [r1], r0, lsl #4
  fc:	0001c709 	andeq	ip, r1, r9, lsl #14
 100:	01030100 	mrseq	r0, (UNDEF: 19)
 104:	00010d09 	andeq	r0, r1, r9, lsl #26
 108:	60910200 	addsvs	r0, r1, r0, lsl #4
 10c:	05040a00 	streq	r0, [r4, #-2560]	; 0xfffff600
 110:	00746e69 	rsbseq	r6, r4, r9, ror #28
 114:	0002070b 	andeq	r0, r2, fp, lsl #14
 118:	06f40100 	ldrbteq	r0, [r4], r0, lsl #2
 11c:	20000444 	andcs	r0, r0, r4, asr #8
 120:	00000068 	andeq	r0, r0, r8, rrx
 124:	01459c01 	cmpeq	r5, r1, lsl #24
 128:	690c0000 	stmdbvs	ip, {}	; <UNPREDICTABLE>
 12c:	0df60100 	ldfeqe	f0, [r6]
 130:	00000025 	andeq	r0, r0, r5, lsr #32
 134:	0c779102 	ldfeqp	f1, [r7], #-8
 138:	f601006a 			; <UNDEFINED> instruction: 0xf601006a
 13c:	00002510 	andeq	r2, r0, r0, lsl r5
 140:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 144:	001f0b00 	andseq	r0, pc, r0, lsl #22
 148:	ea010000 	b	40150 <startup-0x1ffbfeb0>
 14c:	0003fe07 	andeq	pc, r3, r7, lsl #28
 150:	00004620 	andeq	r4, r0, r0, lsr #12
 154:	7a9c0100 	bvc	fe70055c <main+0xde6ffe68>
 158:	0d000001 	stceq	0, cr0, [r0, #-4]
 15c:	0000002d 	andeq	r0, r0, sp, lsr #32
 160:	2525ea01 	strcs	lr, [r5, #-2561]!	; 0xfffff5ff
 164:	02000000 	andeq	r0, r0, #0
 168:	1e0d7791 	mcrne	7, 0, r7, cr13, cr1, {4}
 16c:	01000001 	tsteq	r0, r1
 170:	002536ea 	eoreq	r3, r5, sl, ror #13
 174:	91020000 	mrsls	r0, (UNDEF: 2)
 178:	540b0076 	strpl	r0, [fp], #-118	; 0xffffff8a
 17c:	01000001 	tsteq	r0, r1
 180:	03b807e1 			; <UNDEFINED> instruction: 0x03b807e1
 184:	00462000 	subeq	r2, r6, r0
 188:	9c010000 	stcls	0, cr0, [r1], {-0}
 18c:	000001af 	andeq	r0, r0, pc, lsr #3
 190:	0000790d 	andeq	r7, r0, sp, lsl #18
 194:	22e10100 	rsccs	r0, r1, #0, 2
 198:	00000025 	andeq	r0, r0, r5, lsr #32
 19c:	0d779102 	ldfeqp	f1, [r7, #-8]!
 1a0:	0000011e 	andeq	r0, r0, lr, lsl r1
 1a4:	2530e101 	ldrcs	lr, [r0, #-257]!	; 0xfffffeff
 1a8:	02000000 	andeq	r0, r0, #0
 1ac:	0e007691 	mcreq	6, 0, r7, cr0, cr1, {4}
 1b0:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
 1b4:	4a0dce01 	bmi	3739c0 <startup-0x1fc8c640>
 1b8:	6e200003 	cdpvs	0, 2, cr0, cr0, cr3, {0}
 1bc:	01000000 	mrseq	r0, (UNDEF: 0)
 1c0:	0001e49c 	muleq	r1, ip, r4
 1c4:	000c0d00 	andeq	r0, ip, r0, lsl #26
 1c8:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
 1cc:	00002523 	andeq	r2, r0, r3, lsr #10
 1d0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 1d4:	00011e0d 	andeq	r1, r1, sp, lsl #28
 1d8:	32ce0100 	sbccc	r0, lr, #0, 2
 1dc:	00000025 	andeq	r0, r0, r5, lsr #32
 1e0:	00769102 	rsbseq	r9, r6, r2, lsl #2
 1e4:	00006c0f 	andeq	r6, r0, pc, lsl #24
 1e8:	10c80100 	sbcne	r0, r8, r0, lsl #2
 1ec:	00000025 	andeq	r0, r0, r5, lsr #32
 1f0:	20000320 	andcs	r0, r0, r0, lsr #6
 1f4:	0000002a 	andeq	r0, r0, sl, lsr #32
 1f8:	020e9c01 	andeq	r9, lr, #256	; 0x100
 1fc:	1e0d0000 	cdpne	0, 0, cr0, cr13, cr0, {0}
 200:	01000001 	tsteq	r0, r1
 204:	00252ac8 	eoreq	r2, r5, r8, asr #21
 208:	91020000 	mrsls	r0, (UNDEF: 2)
 20c:	cd0f0077 	stcgt	0, cr0, [pc, #-476]	; 38 <startup-0x1fffffc8>
 210:	01000001 	tsteq	r0, r1
 214:	002510af 	eoreq	r1, r5, pc, lsr #1
 218:	028c0000 	addeq	r0, ip, #0
 21c:	00942000 	addseq	r2, r4, r0
 220:	9c010000 	stcls	0, cr0, [r1], {-0}
 224:	00000245 	andeq	r0, r0, r5, asr #4
 228:	00011e0d 	andeq	r1, r1, sp, lsl #28
 22c:	25af0100 	strcs	r0, [pc, #256]!	; 334 <startup-0x1ffffccc>
 230:	00000025 	andeq	r0, r0, r5, lsr #32
 234:	0c6f9102 	stfeqp	f1, [pc], #-8	; 234 <startup-0x1ffffdcc>
 238:	b1010063 	tstlt	r1, r3, rrx
 23c:	0000250d 	andeq	r2, r0, sp, lsl #10
 240:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 244:	01410e00 	cmpeq	r1, r0, lsl #28
 248:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
 24c:	00021e0d 	andeq	r1, r2, sp, lsl #28
 250:	00006e20 	andeq	r6, r0, r0, lsr #28
 254:	699c0100 	ldmibvs	ip, {r8}
 258:	0c000002 	stceq	0, cr0, [r0], {2}
 25c:	9b010063 	blls	403f0 <startup-0x1ffbfc10>
 260:	0000250d 	andeq	r2, r0, sp, lsl #10
 264:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 268:	02250b00 	eoreq	r0, r5, #0, 22
 26c:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
 270:	0001c206 	andeq	ip, r1, r6, lsl #4
 274:	00005c20 	andeq	r5, r0, r0, lsr #24
 278:	8e9c0100 	fmlhie	f0, f4, f0
 27c:	10000002 	andne	r0, r0, r2
 280:	0000001f 	andeq	r0, r0, pc, lsl r0
 284:	0d059101 	stfeqd	f1, [r5, #-4]
 288:	11000001 	tstne	r0, r1
 28c:	170b0000 	strne	r0, [fp, -r0]
 290:	01000001 	tsteq	r0, r1
 294:	01680675 	smceq	32869	; 0x8065
 298:	005a2000 	subseq	r2, sl, r0
 29c:	9c010000 	stcls	0, cr0, [r1], {-0}
 2a0:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
 2a4:	00011e0d 	andeq	r1, r1, sp, lsl #28
 2a8:	20750100 	rsbscs	r0, r5, r0, lsl #2
 2ac:	00000025 	andeq	r0, r0, r5, lsr #32
 2b0:	00779102 	rsbseq	r9, r7, r2, lsl #2
 2b4:	00010012 	andeq	r0, r1, r2, lsl r0
 2b8:	066c0100 	strbteq	r0, [ip], -r0, lsl #2
 2bc:	20000118 	andcs	r0, r0, r8, lsl r1
 2c0:	00000050 	andeq	r0, r0, r0, asr r0
 2c4:	02e59c01 	rsceq	r9, r5, #256	; 0x100
 2c8:	78130000 	ldmdavc	r3, {}	; <UNPREDICTABLE>
 2cc:	256c0100 	strbcs	r0, [ip, #-256]!	; 0xffffff00
 2d0:	00000025 	andeq	r0, r0, r5, lsr #32
 2d4:	0c6f9102 	stfeqp	f1, [pc], #-8	; 2d4 <startup-0x1ffffd2c>
 2d8:	6e010063 	cdpvs	0, 0, cr0, cr1, cr3, {3}
 2dc:	0000250d 	andeq	r2, r0, sp, lsl #10
 2e0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 2e4:	018a1200 	orreq	r1, sl, r0, lsl #4
 2e8:	63010000 	movwvs	r0, #4096	; 0x1000
 2ec:	0000c606 	andeq	ip, r0, r6, lsl #12
 2f0:	00005220 	andeq	r5, r0, r0, lsr #4
 2f4:	169c0100 	ldrne	r0, [ip], r0, lsl #2
 2f8:	13000003 	movwne	r0, #3
 2fc:	63010078 	movwvs	r0, #4216	; 0x1078
 300:	00002523 	andeq	r2, r0, r3, lsr #10
 304:	6f910200 	svcvs	0x00910200
 308:	0100630c 	tsteq	r0, ip, lsl #6
 30c:	00250d65 	eoreq	r0, r5, r5, ror #26
 310:	91020000 	mrsls	r0, (UNDEF: 2)
 314:	35140077 	ldrcc	r0, [r4, #-119]	; 0xffffff89
 318:	01000001 	tsteq	r0, r1
 31c:	00b4065a 	adcseq	r0, r4, sl, asr r6
 320:	00122000 	andseq	r2, r2, r0
 324:	9c010000 	stcls	0, cr0, [r1], {-0}
 328:	0000000b 	andeq	r0, r0, fp
 32c:	064e0100 	strbeq	r0, [lr], -r0, lsl #2
 330:	2000008a 	andcs	r0, r0, sl, lsl #1
 334:	0000002a 	andeq	r0, r0, sl, lsr #32
 338:	034d9c01 	movteq	r9, #56321	; 0xdc01
 33c:	6d130000 	ldcvs	0, cr0, [r3, #-0]
 340:	4e010073 	mcrmi	0, 0, r0, cr1, cr3, {3}
 344:	0000841f 	andeq	r8, r0, pc, lsl r4
 348:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 34c:	01a40b00 			; <UNDEFINED> instruction: 0x01a40b00
 350:	40010000 	andmi	r0, r1, r0
 354:	00005406 	andeq	r5, r0, r6, lsl #8
 358:	00003620 	andeq	r3, r0, r0, lsr #12
 35c:	899c0100 	ldmibhi	ip, {r8}
 360:	13000003 	movwne	r0, #3
 364:	01007375 	tsteq	r0, r5, ror r3
 368:	00841f40 	addeq	r1, r4, r0, asr #30
 36c:	91020000 	mrsls	r0, (UNDEF: 2)
 370:	005c156c 	subseq	r1, ip, ip, ror #10
 374:	00242000 	eoreq	r2, r4, r0
 378:	690c0000 	stmdbvs	ip, {}	; <UNPREDICTABLE>
 37c:	0d460100 	stfeqe	f0, [r6, #-0]
 380:	0000010d 	andeq	r0, r0, sp, lsl #2
 384:	00749102 	rsbseq	r9, r4, r2, lsl #2
 388:	01291600 			; <UNDEFINED> instruction: 0x01291600
 38c:	34010000 	strcc	r0, [r1], #-0
 390:	00001006 	andeq	r1, r0, r6
 394:	00004420 	andeq	r4, r0, r0, lsr #8
 398:	169c0100 	ldrne	r0, [ip], r0, lsl #2
 39c:	00000167 	andeq	r0, r0, r7, ror #2
 3a0:	00480201 	subeq	r0, r8, r1, lsl #4
 3a4:	0c200000 	stceq	0, cr0, [r0], #-0
 3a8:	01000000 	mrseq	r0, (UNDEF: 0)
 3ac:	Address 0x000003ac is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13490b39 	movtne	r0, #39737	; 0x9b39
  20:	24030000 	strcs	r0, [r3], #-0
  24:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  28:	000e030b 	andeq	r0, lr, fp, lsl #6
  2c:	002e0400 	eoreq	r0, lr, r0, lsl #8
  30:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  34:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  38:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  3c:	06120111 			; <UNDEFINED> instruction: 0x06120111
  40:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  44:	05000019 	streq	r0, [r0, #-25]	; 0xffffffe7
  48:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  4c:	0b3a0e03 	bleq	e83860 <startup-0x1f17c7a0>
  50:	0b39053b 	bleq	e41544 <startup-0x1f1beabc>
  54:	01111927 	tsteq	r1, r7, lsr #18
  58:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  5c:	00194297 	mulseq	r9, r7, r2
  60:	012e0600 			; <UNDEFINED> instruction: 0x012e0600
  64:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  68:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  6c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  70:	06120111 			; <UNDEFINED> instruction: 0x06120111
  74:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  78:	00130119 	andseq	r0, r3, r9, lsl r1
  7c:	00340700 	eorseq	r0, r4, r0, lsl #14
  80:	0b3a0803 	bleq	e82094 <startup-0x1f17df6c>
  84:	0b39053b 	bleq	e41578 <startup-0x1f1bea88>
  88:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  8c:	05080000 	streq	r0, [r8, #-0]
  90:	3a080300 	bcc	200c98 <startup-0x1fdff368>
  94:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  98:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  9c:	09000018 	stmdbeq	r0, {r3, r4}
  a0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  a4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  a8:	13490b39 	movtne	r0, #39737	; 0x9b39
  ac:	00001802 	andeq	r1, r0, r2, lsl #16
  b0:	0b00240a 	bleq	90e0 <startup-0x1fff6f20>
  b4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  b8:	0b000008 	bleq	e0 <startup-0x1fffff20>
  bc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  c0:	0b3a0e03 	bleq	e838d4 <startup-0x1f17c72c>
  c4:	0b390b3b 	bleq	e42db8 <startup-0x1f1bd248>
  c8:	01111927 	tsteq	r1, r7, lsr #18
  cc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  d0:	01194296 			; <UNDEFINED> instruction: 0x01194296
  d4:	0c000013 	stceq	0, cr0, [r0], {19}
  d8:	08030034 	stmdaeq	r3, {r2, r4, r5}
  dc:	0b3b0b3a 	bleq	ec2dcc <startup-0x1f13d234>
  e0:	13490b39 	movtne	r0, #39737	; 0x9b39
  e4:	00001802 	andeq	r1, r0, r2, lsl #16
  e8:	0300050d 	movweq	r0, #1293	; 0x50d
  ec:	3b0b3a0e 	blcc	2ce92c <startup-0x1fd316d4>
  f0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  f4:	00180213 	andseq	r0, r8, r3, lsl r2
  f8:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
  fc:	0b3a0e03 	bleq	e83910 <startup-0x1f17c6f0>
 100:	0b390b3b 	bleq	e42df4 <startup-0x1f1bd20c>
 104:	01111927 	tsteq	r1, r7, lsr #18
 108:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 10c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 110:	0f000013 	svceq	0x00000013
 114:	0e03012e 	adfeqsp	f0, f3, #0.5
 118:	0b3b0b3a 	bleq	ec2e08 <startup-0x1f13d1f8>
 11c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 120:	01111349 	tsteq	r1, r9, asr #6
 124:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 128:	01194296 			; <UNDEFINED> instruction: 0x01194296
 12c:	10000013 	andne	r0, r0, r3, lsl r0
 130:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 134:	0b3a0e03 	bleq	e83948 <startup-0x1f17c6b8>
 138:	0b390b3b 	bleq	e42e2c <startup-0x1f1bd1d4>
 13c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 140:	18110000 	ldmdane	r1, {}	; <UNPREDICTABLE>
 144:	12000000 	andne	r0, r0, #0
 148:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 14c:	0b3a0e03 	bleq	e83960 <startup-0x1f17c6a0>
 150:	0b390b3b 	bleq	e42e44 <startup-0x1f1bd1bc>
 154:	01111927 	tsteq	r1, r7, lsr #18
 158:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 15c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 160:	13000013 	movwne	r0, #19
 164:	08030005 	stmdaeq	r3, {r0, r2}
 168:	0b3b0b3a 	bleq	ec2e58 <startup-0x1f13d1a8>
 16c:	13490b39 	movtne	r0, #39737	; 0x9b39
 170:	00001802 	andeq	r1, r0, r2, lsl #16
 174:	3f002e14 	svccc	0x00002e14
 178:	3a0e0319 	bcc	380de4 <startup-0x1fc7f21c>
 17c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 180:	1119270b 	tstne	r9, fp, lsl #14
 184:	40061201 	andmi	r1, r6, r1, lsl #4
 188:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 18c:	0b150000 	bleq	540194 <startup-0x1fabfe6c>
 190:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 194:	16000006 	strne	r0, [r0], -r6
 198:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 19c:	0b3a0e03 	bleq	e839b0 <startup-0x1f17c650>
 1a0:	0b390b3b 	bleq	e42e94 <startup-0x1f1bd16c>
 1a4:	01111927 	tsteq	r1, r7, lsr #18
 1a8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1ac:	00194297 	mulseq	r9, r7, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000006fe 	strdeq	r0, [r0], -lr
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	2000070e 	andcs	r0, r0, lr, lsl #14
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000035f 	andeq	r0, r0, pc, asr r3
   4:	004d0003 	subeq	r0, sp, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	696e654c 	stmdbvs	lr!, {r2, r3, r6, r8, sl, sp, lr}^
  28:	65442f61 	strbvs	r2, [r4, #-3937]	; 0xfffff09f
  2c:	6f746b73 	svcvs	0x00746b73
  30:	4f4d2f70 	svcmi	0x004d2f70
  34:	6f572d50 	svcvs	0x00572d50
  38:	70736b72 	rsbsvc	r6, r3, r2, ror fp
  3c:	2f656361 	svccs	0x00656361
  40:	5f707055 	svcpl	0x00707055
  44:	00315f33 	eorseq	r5, r1, r3, lsr pc
  48:	61747300 	cmnvs	r4, r0, lsl #6
  4c:	70757472 	rsbsvc	r7, r5, r2, ror r4
  50:	0100632e 	tsteq	r0, lr, lsr #6
  54:	05000000 	streq	r0, [r0, #-0]
  58:	02050001 	andeq	r0, r5, #1
  5c:	20000000 	andcs	r0, r0, r0
  60:	13050514 	movwne	r0, #21780	; 0x5514
  64:	052f2121 	streq	r2, [pc, #-289]!	; ffffff4b <main+0xdffff857>
  68:	03022101 	movweq	r2, #8449	; 0x2101
  6c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
  70:	02050001 	andeq	r0, r5, #1
  74:	20000010 	andcs	r0, r0, r0, lsl r0
  78:	05013403 	streq	r3, [r1, #-1027]	; 0xfffffbfd
  7c:	0f053005 	svceq	0x00053005
  80:	2f050520 	svccs	0x00050520
  84:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
  88:	0e052f05 	cdpeq	15, 0, cr2, cr5, cr5, {0}
  8c:	2f050520 	svccs	0x00050520
  90:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
  94:	0c052f0a 	stceq	15, cr2, [r5], {10}
  98:	01040200 	mrseq	r0, R12_usr
  9c:	00160520 	andseq	r0, r6, r0, lsr #10
  a0:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
  a4:	02000a05 	andeq	r0, r0, #20480	; 0x5000
  a8:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
  ac:	0f052205 	svceq	0x00052205
  b0:	2f010520 	svccs	0x00010520
  b4:	4f0d05a1 	svcmi	0x000d05a1
  b8:	052e0405 	streq	r0, [lr, #-1029]!	; 0xfffffbfb
  bc:	04020003 	streq	r0, [r2], #-3
  c0:	02002103 	andeq	r2, r0, #-1073741824	; 0xc0000000
  c4:	002f0304 	eoreq	r0, pc, r4, lsl #6
  c8:	2f030402 	svccs	0x00030402
  cc:	03040200 	movweq	r0, #16896	; 0x4200
  d0:	001d052f 	andseq	r0, sp, pc, lsr #10
  d4:	2a030402 	bcs	c10e4 <startup-0x1ff3ef1c>
  d8:	02001605 	andeq	r1, r0, #5242880	; 0x500000
  dc:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
  e0:	04020004 	streq	r0, [r2], #-4
  e4:	01052001 	tsteq	r5, r1
  e8:	0a055b42 	beq	156df8 <startup-0x1fea9208>
  ec:	2109054f 	tstcs	r9, pc, asr #10
  f0:	05590b05 	ldrbeq	r0, [r9, #-2821]	; 0xfffff4fb
  f4:	01053a0a 	tsteq	r5, sl, lsl #20
  f8:	05055b40 	streq	r5, [r5, #-2880]	; 0xfffff4c0
  fc:	01052f2f 	tsteq	r5, pc, lsr #30
 100:	0905422f 	stmdbeq	r5, {r0, r1, r2, r3, r5, r9, lr}
 104:	20070568 	andcs	r0, r7, r8, ror #10
 108:	6715054b 	ldrvs	r0, [r5, -fp, asr #10]
 10c:	05660705 	strbeq	r0, [r6, #-1797]!	; 0xfffff8fb
 110:	13057505 	movwne	r7, #21765	; 0x5505
 114:	3d010520 	cfstr32cc	mvfx0, [r1, #-128]	; 0xffffff80
 118:	68090577 	stmdavs	r9, {r0, r1, r2, r4, r5, r6, r8, sl}
 11c:	4b200705 	blmi	801d38 <startup-0x1f7fe2c8>
 120:	bb050567 	bllt	1416c4 <startup-0x1febe93c>
 124:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
 128:	05773d01 	ldrbeq	r3, [r7, #-3329]!	; 0xfffff2ff
 12c:	01056705 	tsteq	r5, r5, lsl #14
 130:	05ba1003 	ldreq	r1, [sl, #3]!
 134:	20720309 	rsbscs	r0, r2, r9, lsl #6
 138:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
 13c:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
 140:	2201053d 	andcs	r0, r1, #255852544	; 0xf400000
 144:	2f05054d 	svccs	0x0005054d
 148:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 14c:	4b4b3d3d 	blmi	12cf648 <startup-0x1ed309b8>
 150:	054b4b4b 	strbeq	r4, [fp, #-2891]	; 0xfffff4b5
 154:	053f3d01 	ldreq	r3, [pc, #-3329]!	; fffff45b <main+0xdfffed67>
 158:	053d3f05 	ldreq	r3, [sp, #-3845]!	; 0xfffff0fb
 15c:	05052011 	streq	r2, [r5, #-17]	; 0xffffffef
 160:	053d3d2f 	ldreq	r3, [sp, #-3375]!	; 0xfffff2d1
 164:	053d3109 	ldreq	r3, [sp, #-265]!	; 0xfffffef7
 168:	0b052f1c 	bleq	14bde0 <startup-0x1feb4220>
 16c:	4b09053c 	blmi	241664 <startup-0x1fdbe99c>
 170:	2f0b053d 	svccs	0x000b053d
 174:	05450905 	strbeq	r0, [r5, #-2309]	; 0xfffff6fb
 178:	0505260d 	streq	r2, [r5, #-1549]	; 0xfffff9f3
 17c:	20110522 	andscs	r0, r1, r2, lsr #10
 180:	bd2f0105 	stflts	f0, [pc, #-20]!	; 174 <startup-0x1ffffe8c>
 184:	3d680505 	cfstr64cc	mvdx0, [r8, #-20]!	; 0xffffffec
 188:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
 18c:	593d2f05 	ldmdbpl	sp!, {r0, r2, r8, r9, sl, fp, sp}
 190:	09053d2f 	stmdbeq	r5, {r0, r1, r2, r3, r5, r8, sl, fp, ip, sp}
 194:	2007052f 	andcs	r0, r7, pc, lsr #10
 198:	3d4b0505 	cfstr64cc	mvdx0, [fp, #-20]	; 0xffffffec
 19c:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
 1a0:	07053013 	smladeq	r5, r3, r0, r3
 1a4:	2109054a 	tstcs	r9, sl, asr #10
 1a8:	3013053d 	andscc	r0, r3, sp, lsr r5
 1ac:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
 1b0:	053d2109 	ldreq	r2, [sp, #-265]!	; 0xfffffef7
 1b4:	0105300c 	tsteq	r5, ip
 1b8:	0505cb3d 	streq	ip, [r5, #-2877]	; 0xfffff4c3
 1bc:	590c0567 	stmdbpl	ip, {r0, r1, r2, r5, r6, r8, sl}
 1c0:	4d670105 	stfmie	f0, [r7, #-20]!	; 0xffffffec
 1c4:	05910505 	ldreq	r0, [r1, #1285]	; 0x505
 1c8:	05052014 	streq	r2, [r5, #-20]	; 0xffffffec
 1cc:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
 1d0:	3e13052f 	cfmul64cc	mvdx0, mvdx3, mvdx15
 1d4:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
 1d8:	053d2109 	ldreq	r2, [sp, #-265]!	; 0xfffffef7
 1dc:	07053013 	smladeq	r5, r3, r0, r3
 1e0:	2109054a 	tstcs	r9, sl, asr #10
 1e4:	3001053d 	andcc	r0, r1, sp, lsr r5
 1e8:	91050577 	tstls	r5, r7, ror r5
 1ec:	593d0205 	ldmdbpl	sp!, {r0, r2, r9}
 1f0:	01053d3d 	tsteq	r5, sp, lsr sp
 1f4:	05054d83 	streq	r4, [r5, #-3459]	; 0xfffff27d
 1f8:	05593d91 	ldrbeq	r3, [r9, #-3473]	; 0xfffff26f
 1fc:	06053d02 	streq	r3, [r5], -r2, lsl #26
 200:	8401053d 	strhi	r0, [r1], #-1341	; 0xfffffac3
 204:	3e0b054d 	cfsh32cc	mvfx0, mvfx11, #45
 208:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
 20c:	059f2109 	ldreq	r2, [pc, #265]	; 31d <startup-0x1ffffce3>
 210:	09054b0f 	stmdbeq	r5, {r0, r1, r2, r3, r8, r9, fp, lr}
 214:	000d053c 	andeq	r0, sp, ip, lsr r5
 218:	21030402 	tstcs	r3, r2, lsl #8
 21c:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
 220:	05490304 	strbeq	r0, [r9, #-772]	; 0xfffffcfc
 224:	04020009 	streq	r0, [r2], #-9
 228:	18055801 	stmdane	r5, {r0, fp, ip, lr}
 22c:	02040200 	andeq	r0, r4, #0, 4
 230:	00050547 	andeq	r0, r5, r7, asr #10
 234:	58010402 	stmdapl	r1, {r1, sl}
 238:	5b510105 	blpl	1440654 <startup-0x1ebbf9ac>
 23c:	05690705 	strbeq	r0, [r9, #-1797]!	; 0xfffff8fb
 240:	04020010 	streq	r0, [r2], #-16
 244:	1b054a01 	blne	152a50 <startup-0x1fead5b0>
 248:	02040200 	andeq	r0, r4, #0, 4
 24c:	0028054a 	eoreq	r0, r8, sl, asr #10
 250:	4a030402 	bmi	c1260 <startup-0x1ff3eda0>
 254:	054d1005 	strbeq	r1, [sp, #-5]
 258:	0f052e0b 	svceq	0x00052e0b
 25c:	2e14055a 	mrccs	5, 0, r0, cr4, cr10, {2}
 260:	05e60e05 	strbeq	r0, [r6, #3589]!	; 0xe05
 264:	0e054b09 	vmlaeq.f64	d4, d5, d9
 268:	4b090522 	blmi	2416f8 <startup-0x1fdbe908>
 26c:	05220e05 	streq	r0, [r2, #-3589]!	; 0xfffff1fb
 270:	0e054b09 	vmlaeq.f64	d4, d5, d9
 274:	4b090522 	blmi	241704 <startup-0x1fdbe8fc>
 278:	05220e05 	streq	r0, [r2, #-3589]!	; 0xfffff1fb
 27c:	0e054b09 	vmlaeq.f64	d4, d5, d9
 280:	4b090522 	blmi	241710 <startup-0x1fdbe8f0>
 284:	05220e05 	streq	r0, [r2, #-3589]!	; 0xfffff1fb
 288:	0e054b09 	vmlaeq.f64	d4, d5, d9
 28c:	4b090522 	blmi	24171c <startup-0x1fdbe8e4>
 290:	05230705 	streq	r0, [r3, #-1797]!	; 0xfffff8fb
 294:	07053d0e 	streq	r3, [r5, -lr, lsl #26]
 298:	3d140567 	cfldr32cc	mvfx0, [r4, #-412]	; 0xfffffe64
 29c:	054b0b05 	strbeq	r0, [fp, #-2821]	; 0xfffff4fb
 2a0:	0b054c14 	bleq	1532f8 <startup-0x1feacd08>
 2a4:	3f27054b 	svccc	0x0027054b
 2a8:	05580505 	ldrbeq	r0, [r8, #-1285]	; 0xfffffafb
 2ac:	05058328 	streq	r8, [r5, #-808]	; 0xfffffcd8
 2b0:	75090566 	strvc	r0, [r9, #-1382]	; 0xfffffa9a
 2b4:	05912705 	ldreq	r2, [r1, #1797]	; 0x705
 2b8:	07055805 	streq	r5, [r5, -r5, lsl #16]
 2bc:	3d0e0575 	cfstr32cc	mvfx0, [lr, #-468]	; 0xfffffe2c
 2c0:	91050592 			; <UNDEFINED> instruction: 0x91050592
 2c4:	4f030905 	svcmi	0x00030905
 2c8:	030105ac 	movweq	r0, #5548	; 0x15ac
 2cc:	16052032 			; <UNDEFINED> instruction: 0x16052032
 2d0:	3f100576 	svccc	0x00100576
 2d4:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
 2d8:	04020009 	streq	r0, [r2], #-9
 2dc:	1f052103 	svcne	0x00052103
 2e0:	03040200 	movweq	r0, #16896	; 0x4200
 2e4:	000a0565 	andeq	r0, sl, r5, ror #10
 2e8:	3c010402 	cfstrscc	mvf0, [r1], {2}
 2ec:	053f0b05 	ldreq	r0, [pc, #-2821]!	; fffff7ef <main+0xdffff0fb>
 2f0:	09052e05 	stmdbeq	r5, {r0, r2, r9, sl, fp, sp}
 2f4:	03040200 	movweq	r0, #16896	; 0x4200
 2f8:	00190521 	andseq	r0, r9, r1, lsr #10
 2fc:	65030402 	strvs	r0, [r3, #-1026]	; 0xfffffbfe
 300:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 304:	3f3c0104 	svccc	0x003c0104
 308:	05590b05 	ldrbeq	r0, [r9, #-2821]	; 0xfffff4fb
 30c:	09052e05 	stmdbeq	r5, {r0, r2, r9, sl, fp, sp}
 310:	03040200 	movweq	r0, #16896	; 0x4200
 314:	001a0521 	andseq	r0, sl, r1, lsr #10
 318:	65030402 	strvs	r0, [r3, #-1026]	; 0xfffffbfe
 31c:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 320:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 324:	05053f0b 	streq	r3, [r5, #-3851]	; 0xfffff0f5
 328:	0009052e 	andeq	r0, r9, lr, lsr #10
 32c:	21030402 	tstcs	r3, r2, lsl #8
 330:	02001905 	andeq	r1, r0, #81920	; 0x14000
 334:	05650304 	strbeq	r0, [r5, #-772]!	; 0xfffffcfc
 338:	04020005 	streq	r0, [r2], #-5
 33c:	053f3c01 	ldreq	r3, [pc, #-3073]!	; fffff743 <main+0xdffff04f>
 340:	03055d01 	movweq	r5, #23809	; 0x5d01
 344:	20240530 	eorcs	r0, r4, r0, lsr r5
 348:	052f0305 	streq	r0, [pc, #-773]!	; 4b <startup-0x1fffffb5>
 34c:	11053005 	tstne	r5, r5
 350:	2f010520 	svccs	0x00010520
 354:	2f050593 	svccs	0x00050593
 358:	0530302f 	ldreq	r3, [r0, #-47]!	; 0xffffffd1
 35c:	06023001 	streq	r3, [r2], -r1
 360:	Address 0x00000360 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	616c6564 	cmnvs	ip, r4, ror #10
   4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   8:	00696c6c 	rsbeq	r6, r9, ip, ror #24
   c:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
  10:	6e750065 	cdpvs	0, 7, cr0, cr5, cr5, {3}
  14:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
  18:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
  1c:	6700746e 	strvs	r7, [r0, -lr, ror #8]
  20:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  24:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
  28:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  2c:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; fffffeb8 <main+0xdffff7c4>
  30:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
  34:	2f3a4300 	svccs	0x003a4300
  38:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  3c:	654c2f73 	strbvs	r2, [ip, #-3955]	; 0xfffff08d
  40:	2f61696e 	svccs	0x0061696e
  44:	6b736544 	blvs	1cd955c <startup-0x1e326aa4>
  48:	2f706f74 	svccs	0x00706f74
  4c:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
  50:	6b726f57 	blvs	1c9bdb4 <startup-0x1e36424c>
  54:	63617073 	cmnvs	r1, #115	; 0x73
  58:	70552f65 	subsvc	r2, r5, r5, ror #30
  5c:	5f335f70 	svcpl	0x00335f70
  60:	74732f31 	ldrbtvc	r2, [r3], #-3889	; 0xfffff0cf
  64:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  68:	00632e70 	rsbeq	r2, r3, r0, ror lr
  6c:	70617267 	rsbvc	r7, r1, r7, ror #4
  70:	5f636968 	svcpl	0x00636968
  74:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
  78:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
  7c:	69700061 	ldmdbvs	r0!, {r0, r5, r6}^
  80:	006c6578 	rsbeq	r6, ip, r8, ror r5
  84:	20554e47 	subscs	r4, r5, r7, asr #28
  88:	20393943 	eorscs	r3, r9, r3, asr #18
  8c:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
  90:	30322031 	eorscc	r2, r2, r1, lsr r0
  94:	30313931 	eorscc	r3, r1, r1, lsr r9
  98:	28203532 	stmdacs	r0!, {r1, r4, r5, r8, sl, ip, sp}
  9c:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  a0:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  a4:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  a8:	72612f4d 	rsbvc	r2, r1, #308	; 0x134
  ac:	2d392d6d 	ldccs	13, cr2, [r9, #-436]!	; 0xfffffe4c
  b0:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  b4:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  b8:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  bc:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  c0:	35373732 	ldrcc	r3, [r7, #-1842]!	; 0xfffff8ce
  c4:	205d3939 	subscs	r3, sp, r9, lsr r9
  c8:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  cc:	20626d75 	rsbcs	r6, r2, r5, ror sp
  d0:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  d4:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  d8:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  dc:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  e0:	616d2d20 	cmnvs	sp, r0, lsr #26
  e4:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  e8:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  ec:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  f0:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  f4:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
  f8:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  fc:	00393963 	eorseq	r3, r9, r3, ror #18
 100:	70617267 	rsbvc	r7, r1, r7, ror #4
 104:	5f636968 	svcpl	0x00636968
 108:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 10c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 110:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 114:	73007261 	movwvc	r7, #609	; 0x261
 118:	63656c65 	cmnvs	r5, #25856	; 0x6500
 11c:	6f635f74 	svcvs	0x00635f74
 120:	6f72746e 	svcvs	0x0072746e
 124:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 128:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 12c:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 130:	736e3035 	cmnvc	lr, #53	; 0x35
 134:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 138:	355f7961 	ldrbcc	r7, [pc, #-2401]	; fffff7df <main+0xdffff0eb>
 13c:	736e3030 	cmnvc	lr, #48	; 0x30
 140:	61726700 	cmnvs	r2, r0, lsl #14
 144:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 148:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 14c:	65725f74 	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
 150:	00796461 	rsbseq	r6, r9, r1, ror #8
 154:	70617267 	rsbvc	r7, r1, r7, ror #4
 158:	5f636968 	svcpl	0x00636968
 15c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 160:	61645f65 	cmnvs	r4, r5, ror #30
 164:	73006174 	movwvc	r6, #372	; 0x174
 168:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 16c:	6d007075 	stcvs	0, cr7, [r0, #-468]	; 0xfffffe2c
 170:	006b7361 	rsbeq	r7, fp, r1, ror #6
 174:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 178:	00745f38 	rsbseq	r5, r4, r8, lsr pc
 17c:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 180:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 184:	61686320 	cmnvs	r8, r0, lsr #6
 188:	72670072 	rsbvc	r0, r7, #114	; 0x72
 18c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 190:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 194:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 198:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 19c:	6d007465 	cfstrsvs	mvf7, [r0, #-404]	; 0xfffffe6c
 1a0:	006e6961 	rsbeq	r6, lr, r1, ror #18
 1a4:	616c6564 	cmnvs	ip, r4, ror #10
 1a8:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 1ac:	006f7263 	rsbeq	r7, pc, r3, ror #4
 1b0:	70617267 	rsbvc	r7, r1, r7, ror #4
 1b4:	5f636968 	svcpl	0x00636968
 1b8:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 1bc:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
 1c0:	615f7469 	cmpvs	pc, r9, ror #8
 1c4:	69007070 	stmdbvs	r0, {r4, r5, r6, ip, sp, lr}
 1c8:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
 1cc:	61726700 	cmnvs	r2, r0, lsl #14
 1d0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 1d4:	6165725f 	cmnvs	r5, pc, asr r2
 1d8:	3a430064 	bcc	10c0370 <startup-0x1ef3fc90>
 1dc:	6573555c 	ldrbvs	r5, [r3, #-1372]!	; 0xfffffaa4
 1e0:	4c5c7372 	mrrcmi	3, 7, r7, ip, cr2
 1e4:	61696e65 	cmnvs	r9, r5, ror #28
 1e8:	7365445c 	cmnvc	r5, #92, 8	; 0x5c000000
 1ec:	706f746b 	rsbvc	r7, pc, fp, ror #8
 1f0:	504f4d5c 	subpl	r4, pc, ip, asr sp	; <UNPREDICTABLE>
 1f4:	726f572d 	rsbvc	r5, pc, #11796480	; 0xb40000
 1f8:	6170736b 	cmnvs	r0, fp, ror #6
 1fc:	555c6563 	ldrbpl	r6, [ip, #-1379]	; 0xfffffa9d
 200:	335f7070 	cmpcc	pc, #112	; 0x70
 204:	6700315f 	smlsdvs	r0, pc, r1, r3	; <UNPREDICTABLE>
 208:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 20c:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 210:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 214:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
 218:	006e6565 	rsbeq	r6, lr, r5, ror #10
 21c:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
 220:	6574616c 	ldrbvs	r6, [r4, #-364]!	; 0xfffffe94
 224:	61726700 	cmnvs	r2, r0, lsl #14
 228:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 22c:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 230:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
 234:	00657a69 	rsbeq	r7, r5, r9, ror #20

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000044 	andeq	r0, r0, r4, asr #32
  30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  34:	41018e02 	tstmi	r1, r2, lsl #28
  38:	0000070d 	andeq	r0, r0, sp, lsl #14
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000054 	andcs	r0, r0, r4, asr r0
  48:	00000036 	andeq	r0, r0, r6, lsr r0
  4c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  50:	41018e02 	tstmi	r1, r2, lsl #28
  54:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  58:	00000007 	andeq	r0, r0, r7
  5c:	0000001c 	andeq	r0, r0, ip, lsl r0
  60:	00000000 	andeq	r0, r0, r0
  64:	2000008a 	andcs	r0, r0, sl, lsl #1
  68:	0000002a 	andeq	r0, r0, sl, lsr #32
  6c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  70:	41018e02 	tstmi	r1, r2, lsl #28
  74:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  78:	00000007 	andeq	r0, r0, r7
  7c:	00000018 	andeq	r0, r0, r8, lsl r0
  80:	00000000 	andeq	r0, r0, r0
  84:	200000b4 	strhcs	r0, [r0], -r4
  88:	00000012 	andeq	r0, r0, r2, lsl r0
  8c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  90:	41018e02 	tstmi	r1, r2, lsl #28
  94:	0000070d 	andeq	r0, r0, sp, lsl #14
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	200000c6 	andcs	r0, r0, r6, asr #1
  a4:	00000052 	andeq	r0, r0, r2, asr r0
  a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ac:	41018e02 	tstmi	r1, r2, lsl #28
  b0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  b4:	00000007 	andeq	r0, r0, r7
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	20000118 	andcs	r0, r0, r8, lsl r1
  c4:	00000050 	andeq	r0, r0, r0, asr r0
  c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  cc:	41018e02 	tstmi	r1, r2, lsl #28
  d0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  d4:	00000007 	andeq	r0, r0, r7
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000000 	andeq	r0, r0, r0
  e0:	20000168 	andcs	r0, r0, r8, ror #2
  e4:	0000005a 	andeq	r0, r0, sl, asr r0
  e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ec:	41018e02 	tstmi	r1, r2, lsl #28
  f0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  f4:	00000007 	andeq	r0, r0, r7
  f8:	00000018 	andeq	r0, r0, r8, lsl r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	200001c2 	andcs	r0, r0, r2, asr #3
 104:	0000005c 	andeq	r0, r0, ip, asr r0
 108:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 10c:	41018e02 	tstmi	r1, r2, lsl #28
 110:	0000070d 	andeq	r0, r0, sp, lsl #14
 114:	0000001c 	andeq	r0, r0, ip, lsl r0
 118:	00000000 	andeq	r0, r0, r0
 11c:	2000021e 	andcs	r0, r0, lr, lsl r2
 120:	0000006e 	andeq	r0, r0, lr, rrx
 124:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 128:	41018e02 	tstmi	r1, r2, lsl #28
 12c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 130:	00000007 	andeq	r0, r0, r7
 134:	0000001c 	andeq	r0, r0, ip, lsl r0
 138:	00000000 	andeq	r0, r0, r0
 13c:	2000028c 	andcs	r0, r0, ip, lsl #5
 140:	00000094 	muleq	r0, r4, r0
 144:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 148:	41018e02 	tstmi	r1, r2, lsl #28
 14c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 150:	00000007 	andeq	r0, r0, r7
 154:	0000001c 	andeq	r0, r0, ip, lsl r0
 158:	00000000 	andeq	r0, r0, r0
 15c:	20000320 	andcs	r0, r0, r0, lsr #6
 160:	0000002a 	andeq	r0, r0, sl, lsr #32
 164:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 168:	41018e02 	tstmi	r1, r2, lsl #28
 16c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 170:	00000007 	andeq	r0, r0, r7
 174:	0000001c 	andeq	r0, r0, ip, lsl r0
 178:	00000000 	andeq	r0, r0, r0
 17c:	2000034a 	andcs	r0, r0, sl, asr #6
 180:	0000006e 	andeq	r0, r0, lr, rrx
 184:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 188:	41018e02 	tstmi	r1, r2, lsl #28
 18c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 190:	00000007 	andeq	r0, r0, r7
 194:	0000001c 	andeq	r0, r0, ip, lsl r0
 198:	00000000 	andeq	r0, r0, r0
 19c:	200003b8 			; <UNDEFINED> instruction: 0x200003b8
 1a0:	00000046 	andeq	r0, r0, r6, asr #32
 1a4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1a8:	41018e02 	tstmi	r1, r2, lsl #28
 1ac:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1b0:	00000007 	andeq	r0, r0, r7
 1b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b8:	00000000 	andeq	r0, r0, r0
 1bc:	200003fe 	strdcs	r0, [r0], -lr
 1c0:	00000046 	andeq	r0, r0, r6, asr #32
 1c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1c8:	41018e02 	tstmi	r1, r2, lsl #28
 1cc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1d0:	00000007 	andeq	r0, r0, r7
 1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d8:	00000000 	andeq	r0, r0, r0
 1dc:	20000444 	andcs	r0, r0, r4, asr #8
 1e0:	00000068 	andeq	r0, r0, r8, rrx
 1e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1e8:	41018e02 	tstmi	r1, r2, lsl #28
 1ec:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1f0:	00000007 	andeq	r0, r0, r7
 1f4:	00000020 	andeq	r0, r0, r0, lsr #32
 1f8:	00000000 	andeq	r0, r0, r0
 1fc:	200004ac 	andcs	r0, r0, ip, lsr #9
 200:	00000190 	muleq	r0, r0, r1
 204:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 208:	86048505 	strhi	r8, [r4], -r5, lsl #10
 20c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 210:	380e4101 	stmdacc	lr, {r0, r8, lr}
 214:	00070d41 	andeq	r0, r7, r1, asr #26
 218:	0000001c 	andeq	r0, r0, ip, lsl r0
 21c:	00000000 	andeq	r0, r0, r0
 220:	2000063c 	andcs	r0, r0, ip, lsr r6
 224:	00000092 	muleq	r0, r2, r0
 228:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 22c:	41018e02 	tstmi	r1, r2, lsl #28
 230:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 234:	00000007 	andeq	r0, r0, r7
 238:	00000018 	andeq	r0, r0, r8, lsl r0
 23c:	00000000 	andeq	r0, r0, r0
 240:	200006ce 	andcs	r0, r0, lr, asr #13
 244:	00000026 	andeq	r0, r0, r6, lsr #32
 248:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 24c:	41018e02 	tstmi	r1, r2, lsl #28
 250:	0000070d 	andeq	r0, r0, sp, lsl #14
 254:	00000018 	andeq	r0, r0, r8, lsl r0
 258:	00000000 	andeq	r0, r0, r0
 25c:	200006f4 	strdcs	r0, [r0], -r4
 260:	0000001a 	andeq	r0, r0, sl, lsl r0
 264:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 268:	41018e02 	tstmi	r1, r2, lsl #28
 26c:	0000070d 	andeq	r0, r0, sp, lsl #14
