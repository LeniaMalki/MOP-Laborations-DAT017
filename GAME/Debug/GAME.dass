
./Debug/GAME.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 */
void startup(void) __attribute__((naked)) __attribute__((section(".start_section")));

void startup(void)
{
    __asm volatile(" LDR R0,=0x2001C000\n" /* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f001 f800 	bl	20001008 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
                   " MOV SP,R0\n"
                   " BL main\n"   /* call main */
                   "_exit: B .\n" /* never return */
    );
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:
    // void (check_ball_collision)(struct tobj);
} OBJECT, *POBJECT;

// ############################################################ DELAYS
void delay_250ns(void)
{
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
    /* SystemCoreClock = 168000000 */
    *STK_CTRL = 0;
20000014:	4b0c      	ldr	r3, [pc, #48]	; (20000048 <delay_250ns+0x38>)
20000016:	2200      	movs	r2, #0
20000018:	601a      	str	r2, [r3, #0]
    *STK_LOAD = ((168 / 4) - 1);
2000001a:	4b0c      	ldr	r3, [pc, #48]	; (2000004c <delay_250ns+0x3c>)
2000001c:	2229      	movs	r2, #41	; 0x29
2000001e:	601a      	str	r2, [r3, #0]
    *STK_VAL = 0;
20000020:	4b0b      	ldr	r3, [pc, #44]	; (20000050 <delay_250ns+0x40>)
20000022:	2200      	movs	r2, #0
20000024:	601a      	str	r2, [r3, #0]
    *STK_CTRL = 5;
20000026:	4b08      	ldr	r3, [pc, #32]	; (20000048 <delay_250ns+0x38>)
20000028:	2205      	movs	r2, #5
2000002a:	601a      	str	r2, [r3, #0]
    while((*STK_CTRL & 0x10000) == 0)
2000002c:	46c0      	nop			; (mov r8, r8)
2000002e:	4b06      	ldr	r3, [pc, #24]	; (20000048 <delay_250ns+0x38>)
20000030:	681a      	ldr	r2, [r3, #0]
20000032:	2380      	movs	r3, #128	; 0x80
20000034:	025b      	lsls	r3, r3, #9
20000036:	4013      	ands	r3, r2
20000038:	d0f9      	beq.n	2000002e <delay_250ns+0x1e>
        ;
    *STK_CTRL = 0;
2000003a:	4b03      	ldr	r3, [pc, #12]	; (20000048 <delay_250ns+0x38>)
2000003c:	2200      	movs	r2, #0
2000003e:	601a      	str	r2, [r3, #0]
}
20000040:	46c0      	nop			; (mov r8, r8)
20000042:	46bd      	mov	sp, r7
20000044:	bd80      	pop	{r7, pc}
20000046:	46c0      	nop			; (mov r8, r8)
20000048:	e000e010 	and	lr, r0, r0, lsl r0
2000004c:	e000e014 	and	lr, r0, r4, lsl r0
20000050:	e000e018 	and	lr, r0, r8, lsl r0

20000054 <delay_micro>:

void delay_micro(unsigned int us)
{
20000054:	b580      	push	{r7, lr}
20000056:	b084      	sub	sp, #16
20000058:	af00      	add	r7, sp, #0
2000005a:	6078      	str	r0, [r7, #4]
#ifdef SIMULATOR
    us = us / 100000;
    us++;
#endif
    for(int i = 0; i < us; i++) {
2000005c:	2300      	movs	r3, #0
2000005e:	60fb      	str	r3, [r7, #12]
20000060:	e00a      	b.n	20000078 <delay_micro+0x24>
        delay_250ns();
20000062:	f7ff ffd5 	bl	20000010 <delay_250ns>
        delay_250ns();
20000066:	f7ff ffd3 	bl	20000010 <delay_250ns>
        delay_250ns();
2000006a:	f7ff ffd1 	bl	20000010 <delay_250ns>
        delay_250ns();
2000006e:	f7ff ffcf 	bl	20000010 <delay_250ns>
    for(int i = 0; i < us; i++) {
20000072:	68fb      	ldr	r3, [r7, #12]
20000074:	3301      	adds	r3, #1
20000076:	60fb      	str	r3, [r7, #12]
20000078:	68fb      	ldr	r3, [r7, #12]
2000007a:	687a      	ldr	r2, [r7, #4]
2000007c:	429a      	cmp	r2, r3
2000007e:	d8f0      	bhi.n	20000062 <delay_micro+0xe>
    }
}
20000080:	46c0      	nop			; (mov r8, r8)
20000082:	46c0      	nop			; (mov r8, r8)
20000084:	46bd      	mov	sp, r7
20000086:	b004      	add	sp, #16
20000088:	bd80      	pop	{r7, pc}

2000008a <delay_milli>:

void delay_milli(unsigned int ms)
{
2000008a:	b580      	push	{r7, lr}
2000008c:	b082      	sub	sp, #8
2000008e:	af00      	add	r7, sp, #0
20000090:	6078      	str	r0, [r7, #4]
#ifdef SIMULATOR
    ms = ms / 100000;
    ms++;
#endif
    while(ms > 0) {
20000092:	e007      	b.n	200000a4 <delay_milli+0x1a>
        delay_micro(1000);
20000094:	23fa      	movs	r3, #250	; 0xfa
20000096:	009b      	lsls	r3, r3, #2
20000098:	0018      	movs	r0, r3
2000009a:	f7ff ffdb 	bl	20000054 <delay_micro>
        ms--;
2000009e:	687b      	ldr	r3, [r7, #4]
200000a0:	3b01      	subs	r3, #1
200000a2:	607b      	str	r3, [r7, #4]
    while(ms > 0) {
200000a4:	687b      	ldr	r3, [r7, #4]
200000a6:	2b00      	cmp	r3, #0
200000a8:	d1f4      	bne.n	20000094 <delay_milli+0xa>
    }
}
200000aa:	46c0      	nop			; (mov r8, r8)
200000ac:	46c0      	nop			; (mov r8, r8)
200000ae:	46bd      	mov	sp, r7
200000b0:	b002      	add	sp, #8
200000b2:	bd80      	pop	{r7, pc}

200000b4 <delay_500ns>:

void delay_500ns(void)
{
200000b4:	b580      	push	{r7, lr}
200000b6:	af00      	add	r7, sp, #0
    delay_250ns();
200000b8:	f7ff ffaa 	bl	20000010 <delay_250ns>
    delay_250ns();
200000bc:	f7ff ffa8 	bl	20000010 <delay_250ns>
}
200000c0:	46c0      	nop			; (mov r8, r8)
200000c2:	46bd      	mov	sp, r7
200000c4:	bd80      	pop	{r7, pc}

200000c6 <ascii_ctrl_bit_set>:

// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ ASCII

void ascii_ctrl_bit_set(unsigned char x)
{
200000c6:	b580      	push	{r7, lr}
200000c8:	b084      	sub	sp, #16
200000ca:	af00      	add	r7, sp, #0
200000cc:	0002      	movs	r2, r0
200000ce:	1dfb      	adds	r3, r7, #7
200000d0:	701a      	strb	r2, [r3, #0]
    unsigned char c;
    c = *GPIO_ODR_LOW;
200000d2:	4a0c      	ldr	r2, [pc, #48]	; (20000104 <ascii_ctrl_bit_set+0x3e>)
200000d4:	210f      	movs	r1, #15
200000d6:	187b      	adds	r3, r7, r1
200000d8:	7812      	ldrb	r2, [r2, #0]
200000da:	701a      	strb	r2, [r3, #0]
    c |= (B_SELECT | x);
200000dc:	1dfa      	adds	r2, r7, #7
200000de:	187b      	adds	r3, r7, r1
200000e0:	7812      	ldrb	r2, [r2, #0]
200000e2:	781b      	ldrb	r3, [r3, #0]
200000e4:	4313      	orrs	r3, r2
200000e6:	b2da      	uxtb	r2, r3
200000e8:	0008      	movs	r0, r1
200000ea:	187b      	adds	r3, r7, r1
200000ec:	2104      	movs	r1, #4
200000ee:	430a      	orrs	r2, r1
200000f0:	701a      	strb	r2, [r3, #0]
    *GPIO_ODR_LOW = c;
200000f2:	4a04      	ldr	r2, [pc, #16]	; (20000104 <ascii_ctrl_bit_set+0x3e>)
200000f4:	183b      	adds	r3, r7, r0
200000f6:	781b      	ldrb	r3, [r3, #0]
200000f8:	7013      	strb	r3, [r2, #0]
}
200000fa:	46c0      	nop			; (mov r8, r8)
200000fc:	46bd      	mov	sp, r7
200000fe:	b004      	add	sp, #16
20000100:	bd80      	pop	{r7, pc}
20000102:	46c0      	nop			; (mov r8, r8)
20000104:	40021014 	andmi	r1, r2, r4, lsl r0

20000108 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x)
{
20000108:	b580      	push	{r7, lr}
2000010a:	b084      	sub	sp, #16
2000010c:	af00      	add	r7, sp, #0
2000010e:	0002      	movs	r2, r0
20000110:	1dfb      	adds	r3, r7, #7
20000112:	701a      	strb	r2, [r3, #0]
    unsigned char c;
    c = *GPIO_ODR_LOW;
20000114:	4a0d      	ldr	r2, [pc, #52]	; (2000014c <ascii_ctrl_bit_clear+0x44>)
20000116:	210f      	movs	r1, #15
20000118:	187b      	adds	r3, r7, r1
2000011a:	7812      	ldrb	r2, [r2, #0]
2000011c:	701a      	strb	r2, [r3, #0]
    c &= (B_SELECT | ~x);
2000011e:	1dfb      	adds	r3, r7, #7
20000120:	781b      	ldrb	r3, [r3, #0]
20000122:	b25b      	sxtb	r3, r3
20000124:	43db      	mvns	r3, r3
20000126:	b25b      	sxtb	r3, r3
20000128:	2204      	movs	r2, #4
2000012a:	4313      	orrs	r3, r2
2000012c:	b25b      	sxtb	r3, r3
2000012e:	187a      	adds	r2, r7, r1
20000130:	7812      	ldrb	r2, [r2, #0]
20000132:	b252      	sxtb	r2, r2
20000134:	4013      	ands	r3, r2
20000136:	b25a      	sxtb	r2, r3
20000138:	187b      	adds	r3, r7, r1
2000013a:	701a      	strb	r2, [r3, #0]
    *GPIO_ODR_LOW = c;
2000013c:	4a03      	ldr	r2, [pc, #12]	; (2000014c <ascii_ctrl_bit_clear+0x44>)
2000013e:	187b      	adds	r3, r7, r1
20000140:	781b      	ldrb	r3, [r3, #0]
20000142:	7013      	strb	r3, [r2, #0]
}
20000144:	46c0      	nop			; (mov r8, r8)
20000146:	46bd      	mov	sp, r7
20000148:	b004      	add	sp, #16
2000014a:	bd80      	pop	{r7, pc}
2000014c:	40021014 	andmi	r1, r2, r4, lsl r0

20000150 <ascii_write_controller>:

void ascii_write_controller(unsigned char c)
{
20000150:	b580      	push	{r7, lr}
20000152:	b082      	sub	sp, #8
20000154:	af00      	add	r7, sp, #0
20000156:	0002      	movs	r2, r0
20000158:	1dfb      	adds	r3, r7, #7
2000015a:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_set(B_E);
2000015c:	2040      	movs	r0, #64	; 0x40
2000015e:	f7ff ffb2 	bl	200000c6 <ascii_ctrl_bit_set>
    *GPIO_ODR_HIGH = c;
20000162:	4a06      	ldr	r2, [pc, #24]	; (2000017c <ascii_write_controller+0x2c>)
20000164:	1dfb      	adds	r3, r7, #7
20000166:	781b      	ldrb	r3, [r3, #0]
20000168:	7013      	strb	r3, [r2, #0]
    ascii_ctrl_bit_clear(B_E);
2000016a:	2040      	movs	r0, #64	; 0x40
2000016c:	f7ff ffcc 	bl	20000108 <ascii_ctrl_bit_clear>
    delay_250ns();
20000170:	f7ff ff4e 	bl	20000010 <delay_250ns>
}
20000174:	46c0      	nop			; (mov r8, r8)
20000176:	46bd      	mov	sp, r7
20000178:	b002      	add	sp, #8
2000017a:	bd80      	pop	{r7, pc}
2000017c:	40021015 	andmi	r1, r2, r5, lsl r0

20000180 <ascii_read_controller>:

unsigned char ascii_read_controller(void)
{
20000180:	b580      	push	{r7, lr}
20000182:	b082      	sub	sp, #8
20000184:	af00      	add	r7, sp, #0
    unsigned char c;
    ascii_ctrl_bit_set(B_E);
20000186:	2040      	movs	r0, #64	; 0x40
20000188:	f7ff ff9d 	bl	200000c6 <ascii_ctrl_bit_set>
    delay_250ns();
2000018c:	f7ff ff40 	bl	20000010 <delay_250ns>
    delay_250ns();
20000190:	f7ff ff3e 	bl	20000010 <delay_250ns>
    c = *GPIO_IDR_HIGH;
20000194:	4a06      	ldr	r2, [pc, #24]	; (200001b0 <ascii_read_controller+0x30>)
20000196:	1dfb      	adds	r3, r7, #7
20000198:	7812      	ldrb	r2, [r2, #0]
2000019a:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_E);
2000019c:	2040      	movs	r0, #64	; 0x40
2000019e:	f7ff ffb3 	bl	20000108 <ascii_ctrl_bit_clear>
    return c;
200001a2:	1dfb      	adds	r3, r7, #7
200001a4:	781b      	ldrb	r3, [r3, #0]
}
200001a6:	0018      	movs	r0, r3
200001a8:	46bd      	mov	sp, r7
200001aa:	b002      	add	sp, #8
200001ac:	bd80      	pop	{r7, pc}
200001ae:	46c0      	nop			; (mov r8, r8)
200001b0:	40021011 	andmi	r1, r2, r1, lsl r0

200001b4 <ascii_read_status>:

unsigned char ascii_read_status(void)
{
200001b4:	b590      	push	{r4, r7, lr}
200001b6:	b083      	sub	sp, #12
200001b8:	af00      	add	r7, sp, #0
    unsigned char c;
    *GPIO_MODER = 0x00005555;
200001ba:	4b0b      	ldr	r3, [pc, #44]	; (200001e8 <ascii_read_status+0x34>)
200001bc:	4a0b      	ldr	r2, [pc, #44]	; (200001ec <ascii_read_status+0x38>)
200001be:	601a      	str	r2, [r3, #0]
    ascii_ctrl_bit_set(B_RW);
200001c0:	2002      	movs	r0, #2
200001c2:	f7ff ff80 	bl	200000c6 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear(B_RS);
200001c6:	2001      	movs	r0, #1
200001c8:	f7ff ff9e 	bl	20000108 <ascii_ctrl_bit_clear>
    c = ascii_read_controller();
200001cc:	1dfc      	adds	r4, r7, #7
200001ce:	f7ff ffd7 	bl	20000180 <ascii_read_controller>
200001d2:	0003      	movs	r3, r0
200001d4:	7023      	strb	r3, [r4, #0]
    *GPIO_MODER = 0x55555555;
200001d6:	4b04      	ldr	r3, [pc, #16]	; (200001e8 <ascii_read_status+0x34>)
200001d8:	4a05      	ldr	r2, [pc, #20]	; (200001f0 <ascii_read_status+0x3c>)
200001da:	601a      	str	r2, [r3, #0]
    return c;
200001dc:	1dfb      	adds	r3, r7, #7
200001de:	781b      	ldrb	r3, [r3, #0]
}
200001e0:	0018      	movs	r0, r3
200001e2:	46bd      	mov	sp, r7
200001e4:	b003      	add	sp, #12
200001e6:	bd90      	pop	{r4, r7, pc}
200001e8:	40021000 	andmi	r1, r2, r0
200001ec:	00005555 	andeq	r5, r0, r5, asr r5
200001f0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200001f4 <ascii_read_data>:

unsigned char ascii_read_data(void)
{
200001f4:	b590      	push	{r4, r7, lr}
200001f6:	b083      	sub	sp, #12
200001f8:	af00      	add	r7, sp, #0
    *GPIO_MODER = 0x00005555;
200001fa:	4b0b      	ldr	r3, [pc, #44]	; (20000228 <ascii_read_data+0x34>)
200001fc:	4a0b      	ldr	r2, [pc, #44]	; (2000022c <ascii_read_data+0x38>)
200001fe:	601a      	str	r2, [r3, #0]
    ascii_ctrl_bit_set(B_RS);
20000200:	2001      	movs	r0, #1
20000202:	f7ff ff60 	bl	200000c6 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_set(B_RW);
20000206:	2002      	movs	r0, #2
20000208:	f7ff ff5d 	bl	200000c6 <ascii_ctrl_bit_set>
    unsigned char rv = ascii_read_controller();
2000020c:	1dfc      	adds	r4, r7, #7
2000020e:	f7ff ffb7 	bl	20000180 <ascii_read_controller>
20000212:	0003      	movs	r3, r0
20000214:	7023      	strb	r3, [r4, #0]
    *GPIO_MODER = 0x55555555;
20000216:	4b04      	ldr	r3, [pc, #16]	; (20000228 <ascii_read_data+0x34>)
20000218:	4a05      	ldr	r2, [pc, #20]	; (20000230 <ascii_read_data+0x3c>)
2000021a:	601a      	str	r2, [r3, #0]
    return rv;
2000021c:	1dfb      	adds	r3, r7, #7
2000021e:	781b      	ldrb	r3, [r3, #0]
}
20000220:	0018      	movs	r0, r3
20000222:	46bd      	mov	sp, r7
20000224:	b003      	add	sp, #12
20000226:	bd90      	pop	{r4, r7, pc}
20000228:	40021000 	andmi	r1, r2, r0
2000022c:	00005555 	andeq	r5, r0, r5, asr r5
20000230:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000234 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command)
{
20000234:	b580      	push	{r7, lr}
20000236:	b082      	sub	sp, #8
20000238:	af00      	add	r7, sp, #0
2000023a:	0002      	movs	r2, r0
2000023c:	1dfb      	adds	r3, r7, #7
2000023e:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_RS);
20000240:	2001      	movs	r0, #1
20000242:	f7ff ff61 	bl	20000108 <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_clear(B_RW);
20000246:	2002      	movs	r0, #2
20000248:	f7ff ff5e 	bl	20000108 <ascii_ctrl_bit_clear>
    ascii_write_controller(command);
2000024c:	1dfb      	adds	r3, r7, #7
2000024e:	781b      	ldrb	r3, [r3, #0]
20000250:	0018      	movs	r0, r3
20000252:	f7ff ff7d 	bl	20000150 <ascii_write_controller>
}
20000256:	46c0      	nop			; (mov r8, r8)
20000258:	46bd      	mov	sp, r7
2000025a:	b002      	add	sp, #8
2000025c:	bd80      	pop	{r7, pc}

2000025e <ascii_write_data>:

void ascii_write_data(unsigned char data)
{
2000025e:	b580      	push	{r7, lr}
20000260:	b082      	sub	sp, #8
20000262:	af00      	add	r7, sp, #0
20000264:	0002      	movs	r2, r0
20000266:	1dfb      	adds	r3, r7, #7
20000268:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_set(B_RS);
2000026a:	2001      	movs	r0, #1
2000026c:	f7ff ff2b 	bl	200000c6 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear(B_RW);
20000270:	2002      	movs	r0, #2
20000272:	f7ff ff49 	bl	20000108 <ascii_ctrl_bit_clear>
    ascii_write_controller(data);
20000276:	1dfb      	adds	r3, r7, #7
20000278:	781b      	ldrb	r3, [r3, #0]
2000027a:	0018      	movs	r0, r3
2000027c:	f7ff ff68 	bl	20000150 <ascii_write_controller>
}
20000280:	46c0      	nop			; (mov r8, r8)
20000282:	46bd      	mov	sp, r7
20000284:	b002      	add	sp, #8
20000286:	bd80      	pop	{r7, pc}

20000288 <ascii_command>:

void ascii_command(unsigned char command)
{
20000288:	b580      	push	{r7, lr}
2000028a:	b082      	sub	sp, #8
2000028c:	af00      	add	r7, sp, #0
2000028e:	0002      	movs	r2, r0
20000290:	1dfb      	adds	r3, r7, #7
20000292:	701a      	strb	r2, [r3, #0]
    while((ascii_read_status() & 0x80) == 0x80)
20000294:	46c0      	nop			; (mov r8, r8)
20000296:	f7ff ff8d 	bl	200001b4 <ascii_read_status>
2000029a:	0003      	movs	r3, r0
2000029c:	001a      	movs	r2, r3
2000029e:	2380      	movs	r3, #128	; 0x80
200002a0:	4013      	ands	r3, r2
200002a2:	2b80      	cmp	r3, #128	; 0x80
200002a4:	d0f7      	beq.n	20000296 <ascii_command+0xe>
        ;
    delay_micro(8);
200002a6:	2008      	movs	r0, #8
200002a8:	f7ff fed4 	bl	20000054 <delay_micro>
    ascii_write_cmd(command);
200002ac:	1dfb      	adds	r3, r7, #7
200002ae:	781b      	ldrb	r3, [r3, #0]
200002b0:	0018      	movs	r0, r3
200002b2:	f7ff ffbf 	bl	20000234 <ascii_write_cmd>
}
200002b6:	46c0      	nop			; (mov r8, r8)
200002b8:	46bd      	mov	sp, r7
200002ba:	b002      	add	sp, #8
200002bc:	bd80      	pop	{r7, pc}

200002be <ascii_write_char>:

void ascii_write_char(unsigned char chr)
{
200002be:	b580      	push	{r7, lr}
200002c0:	b082      	sub	sp, #8
200002c2:	af00      	add	r7, sp, #0
200002c4:	0002      	movs	r2, r0
200002c6:	1dfb      	adds	r3, r7, #7
200002c8:	701a      	strb	r2, [r3, #0]
    while(1)
        if(ascii_read_status) {
            delay_micro(8);
200002ca:	2008      	movs	r0, #8
200002cc:	f7ff fec2 	bl	20000054 <delay_micro>
            ascii_write_data(chr);
200002d0:	1dfb      	adds	r3, r7, #7
200002d2:	781b      	ldrb	r3, [r3, #0]
200002d4:	0018      	movs	r0, r3
200002d6:	f7ff ffc2 	bl	2000025e <ascii_write_data>
            delay_micro(43);
200002da:	202b      	movs	r0, #43	; 0x2b
200002dc:	f7ff feba 	bl	20000054 <delay_micro>
            break;
200002e0:	46c0      	nop			; (mov r8, r8)
        }
}
200002e2:	46c0      	nop			; (mov r8, r8)
200002e4:	46bd      	mov	sp, r7
200002e6:	b002      	add	sp, #8
200002e8:	bd80      	pop	{r7, pc}

200002ea <ascii_gotoxy>:

void ascii_gotoxy(int x, int y)
{
200002ea:	b580      	push	{r7, lr}
200002ec:	b084      	sub	sp, #16
200002ee:	af00      	add	r7, sp, #0
200002f0:	6078      	str	r0, [r7, #4]
200002f2:	6039      	str	r1, [r7, #0]
    int address = x - 1;
200002f4:	687b      	ldr	r3, [r7, #4]
200002f6:	3b01      	subs	r3, #1
200002f8:	60fb      	str	r3, [r7, #12]
    if(y == 2) {
200002fa:	683b      	ldr	r3, [r7, #0]
200002fc:	2b02      	cmp	r3, #2
200002fe:	d102      	bne.n	20000306 <ascii_gotoxy+0x1c>
        address = address + 0x40;
20000300:	68fb      	ldr	r3, [r7, #12]
20000302:	3340      	adds	r3, #64	; 0x40
20000304:	60fb      	str	r3, [r7, #12]
    }
    ascii_write_cmd(0x80 | address);
20000306:	68fb      	ldr	r3, [r7, #12]
20000308:	b25b      	sxtb	r3, r3
2000030a:	2280      	movs	r2, #128	; 0x80
2000030c:	4252      	negs	r2, r2
2000030e:	4313      	orrs	r3, r2
20000310:	b25b      	sxtb	r3, r3
20000312:	b2db      	uxtb	r3, r3
20000314:	0018      	movs	r0, r3
20000316:	f7ff ff8d 	bl	20000234 <ascii_write_cmd>
    delay_micro(39);
2000031a:	2027      	movs	r0, #39	; 0x27
2000031c:	f7ff fe9a 	bl	20000054 <delay_micro>
}
20000320:	46c0      	nop			; (mov r8, r8)
20000322:	46bd      	mov	sp, r7
20000324:	b004      	add	sp, #16
20000326:	bd80      	pop	{r7, pc}

20000328 <ascii_clear_screen>:

void ascii_clear_screen(void)
{
20000328:	b580      	push	{r7, lr}
2000032a:	b082      	sub	sp, #8
2000032c:	af00      	add	r7, sp, #0
    ascii_gotoxy(1, 1);
2000032e:	2101      	movs	r1, #1
20000330:	2001      	movs	r0, #1
20000332:	f7ff ffda 	bl	200002ea <ascii_gotoxy>
    char* t = "                         ";
20000336:	4b12      	ldr	r3, [pc, #72]	; (20000380 <ascii_clear_screen+0x58>)
20000338:	607b      	str	r3, [r7, #4]
    while(*t)
2000033a:	e006      	b.n	2000034a <ascii_clear_screen+0x22>
        ascii_write_char(*t++);
2000033c:	687b      	ldr	r3, [r7, #4]
2000033e:	1c5a      	adds	r2, r3, #1
20000340:	607a      	str	r2, [r7, #4]
20000342:	781b      	ldrb	r3, [r3, #0]
20000344:	0018      	movs	r0, r3
20000346:	f7ff ffba 	bl	200002be <ascii_write_char>
    while(*t)
2000034a:	687b      	ldr	r3, [r7, #4]
2000034c:	781b      	ldrb	r3, [r3, #0]
2000034e:	2b00      	cmp	r3, #0
20000350:	d1f4      	bne.n	2000033c <ascii_clear_screen+0x14>
    ascii_gotoxy(1, 2);
20000352:	2102      	movs	r1, #2
20000354:	2001      	movs	r0, #1
20000356:	f7ff ffc8 	bl	200002ea <ascii_gotoxy>
    t = "                         ";
2000035a:	4b09      	ldr	r3, [pc, #36]	; (20000380 <ascii_clear_screen+0x58>)
2000035c:	607b      	str	r3, [r7, #4]
    while(*t)
2000035e:	e006      	b.n	2000036e <ascii_clear_screen+0x46>
        ascii_write_char(*t++);
20000360:	687b      	ldr	r3, [r7, #4]
20000362:	1c5a      	adds	r2, r3, #1
20000364:	607a      	str	r2, [r7, #4]
20000366:	781b      	ldrb	r3, [r3, #0]
20000368:	0018      	movs	r0, r3
2000036a:	f7ff ffa8 	bl	200002be <ascii_write_char>
    while(*t)
2000036e:	687b      	ldr	r3, [r7, #4]
20000370:	781b      	ldrb	r3, [r3, #0]
20000372:	2b00      	cmp	r3, #0
20000374:	d1f4      	bne.n	20000360 <ascii_clear_screen+0x38>
}
20000376:	46c0      	nop			; (mov r8, r8)
20000378:	46c0      	nop			; (mov r8, r8)
2000037a:	46bd      	mov	sp, r7
2000037c:	b002      	add	sp, #8
2000037e:	bd80      	pop	{r7, pc}
20000380:	200011e4 	andcs	r1, r0, r4, ror #3

20000384 <graphic_ctrl_bit_set>:

// ############################################################ FUNTCIONS
void graphic_ctrl_bit_set(uint8_t x)
{
20000384:	b580      	push	{r7, lr}
20000386:	b084      	sub	sp, #16
20000388:	af00      	add	r7, sp, #0
2000038a:	0002      	movs	r2, r0
2000038c:	1dfb      	adds	r3, r7, #7
2000038e:	701a      	strb	r2, [r3, #0]
    uint8_t c;
    c = *GPIO_ODR_LOW;
20000390:	4a0f      	ldr	r2, [pc, #60]	; (200003d0 <graphic_ctrl_bit_set+0x4c>)
20000392:	200f      	movs	r0, #15
20000394:	183b      	adds	r3, r7, r0
20000396:	7812      	ldrb	r2, [r2, #0]
20000398:	701a      	strb	r2, [r3, #0]
    c &= ~B_SELECT;
2000039a:	183b      	adds	r3, r7, r0
2000039c:	183a      	adds	r2, r7, r0
2000039e:	7812      	ldrb	r2, [r2, #0]
200003a0:	2104      	movs	r1, #4
200003a2:	438a      	bics	r2, r1
200003a4:	701a      	strb	r2, [r3, #0]
    c |= (~B_SELECT & x);
200003a6:	1dfb      	adds	r3, r7, #7
200003a8:	781b      	ldrb	r3, [r3, #0]
200003aa:	b25b      	sxtb	r3, r3
200003ac:	2204      	movs	r2, #4
200003ae:	4393      	bics	r3, r2
200003b0:	b25a      	sxtb	r2, r3
200003b2:	183b      	adds	r3, r7, r0
200003b4:	781b      	ldrb	r3, [r3, #0]
200003b6:	b25b      	sxtb	r3, r3
200003b8:	4313      	orrs	r3, r2
200003ba:	b25a      	sxtb	r2, r3
200003bc:	183b      	adds	r3, r7, r0
200003be:	701a      	strb	r2, [r3, #0]
    *GPIO_ODR_LOW = c;
200003c0:	4a03      	ldr	r2, [pc, #12]	; (200003d0 <graphic_ctrl_bit_set+0x4c>)
200003c2:	183b      	adds	r3, r7, r0
200003c4:	781b      	ldrb	r3, [r3, #0]
200003c6:	7013      	strb	r3, [r2, #0]
}
200003c8:	46c0      	nop			; (mov r8, r8)
200003ca:	46bd      	mov	sp, r7
200003cc:	b004      	add	sp, #16
200003ce:	bd80      	pop	{r7, pc}
200003d0:	40021014 	andmi	r1, r2, r4, lsl r0

200003d4 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(uint8_t x)
{
200003d4:	b580      	push	{r7, lr}
200003d6:	b084      	sub	sp, #16
200003d8:	af00      	add	r7, sp, #0
200003da:	0002      	movs	r2, r0
200003dc:	1dfb      	adds	r3, r7, #7
200003de:	701a      	strb	r2, [r3, #0]
    uint8_t c;
    c = *GPIO_ODR_LOW;
200003e0:	4a0f      	ldr	r2, [pc, #60]	; (20000420 <graphic_ctrl_bit_clear+0x4c>)
200003e2:	200f      	movs	r0, #15
200003e4:	183b      	adds	r3, r7, r0
200003e6:	7812      	ldrb	r2, [r2, #0]
200003e8:	701a      	strb	r2, [r3, #0]
    c &= ~B_SELECT;
200003ea:	183b      	adds	r3, r7, r0
200003ec:	183a      	adds	r2, r7, r0
200003ee:	7812      	ldrb	r2, [r2, #0]
200003f0:	2104      	movs	r1, #4
200003f2:	438a      	bics	r2, r1
200003f4:	701a      	strb	r2, [r3, #0]
    c &= ~x;
200003f6:	1dfb      	adds	r3, r7, #7
200003f8:	781b      	ldrb	r3, [r3, #0]
200003fa:	b25b      	sxtb	r3, r3
200003fc:	43db      	mvns	r3, r3
200003fe:	b25b      	sxtb	r3, r3
20000400:	183a      	adds	r2, r7, r0
20000402:	7812      	ldrb	r2, [r2, #0]
20000404:	b252      	sxtb	r2, r2
20000406:	4013      	ands	r3, r2
20000408:	b25a      	sxtb	r2, r3
2000040a:	183b      	adds	r3, r7, r0
2000040c:	701a      	strb	r2, [r3, #0]
    *GPIO_ODR_LOW = c;
2000040e:	4a04      	ldr	r2, [pc, #16]	; (20000420 <graphic_ctrl_bit_clear+0x4c>)
20000410:	183b      	adds	r3, r7, r0
20000412:	781b      	ldrb	r3, [r3, #0]
20000414:	7013      	strb	r3, [r2, #0]
}
20000416:	46c0      	nop			; (mov r8, r8)
20000418:	46bd      	mov	sp, r7
2000041a:	b004      	add	sp, #16
2000041c:	bd80      	pop	{r7, pc}
2000041e:	46c0      	nop			; (mov r8, r8)
20000420:	40021014 	andmi	r1, r2, r4, lsl r0

20000424 <select_controller>:

void select_controller(uint8_t controller)
{
20000424:	b580      	push	{r7, lr}
20000426:	b082      	sub	sp, #8
20000428:	af00      	add	r7, sp, #0
2000042a:	0002      	movs	r2, r0
2000042c:	1dfb      	adds	r3, r7, #7
2000042e:	701a      	strb	r2, [r3, #0]
    switch(controller) {
20000430:	1dfb      	adds	r3, r7, #7
20000432:	781b      	ldrb	r3, [r3, #0]
20000434:	2b18      	cmp	r3, #24
20000436:	d01a      	beq.n	2000046e <select_controller+0x4a>
20000438:	dc1d      	bgt.n	20000476 <select_controller+0x52>
2000043a:	2b10      	cmp	r3, #16
2000043c:	d010      	beq.n	20000460 <select_controller+0x3c>
2000043e:	dc1a      	bgt.n	20000476 <select_controller+0x52>
20000440:	2b00      	cmp	r3, #0
20000442:	d002      	beq.n	2000044a <select_controller+0x26>
20000444:	2b08      	cmp	r3, #8
20000446:	d004      	beq.n	20000452 <select_controller+0x2e>
        break;
    case B_CS1 | B_CS2:
        graphic_ctrl_bit_set(B_CS1 | B_CS2);
        break;
    }
}
20000448:	e015      	b.n	20000476 <select_controller+0x52>
        graphic_ctrl_bit_clear(B_CS1 | B_CS2);
2000044a:	2018      	movs	r0, #24
2000044c:	f7ff ffc2 	bl	200003d4 <graphic_ctrl_bit_clear>
        break;
20000450:	e011      	b.n	20000476 <select_controller+0x52>
        graphic_ctrl_bit_set(B_CS1);
20000452:	2008      	movs	r0, #8
20000454:	f7ff ff96 	bl	20000384 <graphic_ctrl_bit_set>
        graphic_ctrl_bit_clear(B_CS2);
20000458:	2010      	movs	r0, #16
2000045a:	f7ff ffbb 	bl	200003d4 <graphic_ctrl_bit_clear>
        break;
2000045e:	e00a      	b.n	20000476 <select_controller+0x52>
        graphic_ctrl_bit_set(B_CS2);
20000460:	2010      	movs	r0, #16
20000462:	f7ff ff8f 	bl	20000384 <graphic_ctrl_bit_set>
        graphic_ctrl_bit_clear(B_CS1);
20000466:	2008      	movs	r0, #8
20000468:	f7ff ffb4 	bl	200003d4 <graphic_ctrl_bit_clear>
        break;
2000046c:	e003      	b.n	20000476 <select_controller+0x52>
        graphic_ctrl_bit_set(B_CS1 | B_CS2);
2000046e:	2018      	movs	r0, #24
20000470:	f7ff ff88 	bl	20000384 <graphic_ctrl_bit_set>
        break;
20000474:	46c0      	nop			; (mov r8, r8)
}
20000476:	46c0      	nop			; (mov r8, r8)
20000478:	46bd      	mov	sp, r7
2000047a:	b002      	add	sp, #8
2000047c:	bd80      	pop	{r7, pc}

2000047e <graphic_wait_ready>:
static void graphic_wait_ready(void)
{
2000047e:	b580      	push	{r7, lr}
20000480:	b082      	sub	sp, #8
20000482:	af00      	add	r7, sp, #0
    uint8_t c;

    graphic_ctrl_bit_clear(B_E);
20000484:	2040      	movs	r0, #64	; 0x40
20000486:	f7ff ffa5 	bl	200003d4 <graphic_ctrl_bit_clear>
    *GPIO_MODER = 0x00005555; // 15-8 inputs, 7-0 outputs
2000048a:	4b14      	ldr	r3, [pc, #80]	; (200004dc <graphic_wait_ready+0x5e>)
2000048c:	4a14      	ldr	r2, [pc, #80]	; (200004e0 <graphic_wait_ready+0x62>)
2000048e:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_RS);
20000490:	2001      	movs	r0, #1
20000492:	f7ff ff9f 	bl	200003d4 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RW);
20000496:	2002      	movs	r0, #2
20000498:	f7ff ff74 	bl	20000384 <graphic_ctrl_bit_set>
    delay_500ns();
2000049c:	f7ff fe0a 	bl	200000b4 <delay_500ns>

    while(1) {
        graphic_ctrl_bit_set(B_E);
200004a0:	2040      	movs	r0, #64	; 0x40
200004a2:	f7ff ff6f 	bl	20000384 <graphic_ctrl_bit_set>
        delay_500ns();
200004a6:	f7ff fe05 	bl	200000b4 <delay_500ns>
        c = *GPIO_IDR_HIGH & LCD_BUSY;
200004aa:	4b0e      	ldr	r3, [pc, #56]	; (200004e4 <graphic_wait_ready+0x66>)
200004ac:	781b      	ldrb	r3, [r3, #0]
200004ae:	b2da      	uxtb	r2, r3
200004b0:	1dfb      	adds	r3, r7, #7
200004b2:	217f      	movs	r1, #127	; 0x7f
200004b4:	438a      	bics	r2, r1
200004b6:	701a      	strb	r2, [r3, #0]
        graphic_ctrl_bit_clear(B_E);
200004b8:	2040      	movs	r0, #64	; 0x40
200004ba:	f7ff ff8b 	bl	200003d4 <graphic_ctrl_bit_clear>
        delay_500ns();
200004be:	f7ff fdf9 	bl	200000b4 <delay_500ns>
        if(c == 0)
200004c2:	1dfb      	adds	r3, r7, #7
200004c4:	781b      	ldrb	r3, [r3, #0]
200004c6:	2b00      	cmp	r3, #0
200004c8:	d000      	beq.n	200004cc <graphic_wait_ready+0x4e>
        graphic_ctrl_bit_set(B_E);
200004ca:	e7e9      	b.n	200004a0 <graphic_wait_ready+0x22>
            break;
200004cc:	46c0      	nop			; (mov r8, r8)
    }
    *GPIO_MODER = 0x55555555; // 15-0 outputs
200004ce:	4b03      	ldr	r3, [pc, #12]	; (200004dc <graphic_wait_ready+0x5e>)
200004d0:	4a05      	ldr	r2, [pc, #20]	; (200004e8 <graphic_wait_ready+0x6a>)
200004d2:	601a      	str	r2, [r3, #0]
}
200004d4:	46c0      	nop			; (mov r8, r8)
200004d6:	46bd      	mov	sp, r7
200004d8:	b002      	add	sp, #8
200004da:	bd80      	pop	{r7, pc}
200004dc:	40021000 	andmi	r1, r2, r0
200004e0:	00005555 	andeq	r5, r0, r5, asr r5
200004e4:	40021011 	andmi	r1, r2, r1, lsl r0
200004e8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200004ec <graphic_read>:

static uint8_t graphic_read(uint8_t controller)
{
200004ec:	b580      	push	{r7, lr}
200004ee:	b084      	sub	sp, #16
200004f0:	af00      	add	r7, sp, #0
200004f2:	0002      	movs	r2, r0
200004f4:	1dfb      	adds	r3, r7, #7
200004f6:	701a      	strb	r2, [r3, #0]
    uint8_t c;
    graphic_ctrl_bit_clear(B_E);
200004f8:	2040      	movs	r0, #64	; 0x40
200004fa:	f7ff ff6b 	bl	200003d4 <graphic_ctrl_bit_clear>
    *GPIO_MODER = 0x00005555; // 15-8 inputs, 7-0 outputs
200004fe:	4b1c      	ldr	r3, [pc, #112]	; (20000570 <graphic_read+0x84>)
20000500:	4a1c      	ldr	r2, [pc, #112]	; (20000574 <graphic_read+0x88>)
20000502:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_set(B_RS | B_RW);
20000504:	2003      	movs	r0, #3
20000506:	f7ff ff3d 	bl	20000384 <graphic_ctrl_bit_set>
    select_controller(controller);
2000050a:	1dfb      	adds	r3, r7, #7
2000050c:	781b      	ldrb	r3, [r3, #0]
2000050e:	0018      	movs	r0, r3
20000510:	f7ff ff88 	bl	20000424 <select_controller>
    delay_500ns();
20000514:	f7ff fdce 	bl	200000b4 <delay_500ns>
    graphic_ctrl_bit_set(B_E);
20000518:	2040      	movs	r0, #64	; 0x40
2000051a:	f7ff ff33 	bl	20000384 <graphic_ctrl_bit_set>
    delay_500ns();
2000051e:	f7ff fdc9 	bl	200000b4 <delay_500ns>
    c = *GPIO_IDR_HIGH;
20000522:	4a15      	ldr	r2, [pc, #84]	; (20000578 <graphic_read+0x8c>)
20000524:	230f      	movs	r3, #15
20000526:	18fb      	adds	r3, r7, r3
20000528:	7812      	ldrb	r2, [r2, #0]
2000052a:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
2000052c:	2040      	movs	r0, #64	; 0x40
2000052e:	f7ff ff51 	bl	200003d4 <graphic_ctrl_bit_clear>
    *GPIO_MODER = 0x55555555; // 15-0 outputs
20000532:	4b0f      	ldr	r3, [pc, #60]	; (20000570 <graphic_read+0x84>)
20000534:	4a11      	ldr	r2, [pc, #68]	; (2000057c <graphic_read+0x90>)
20000536:	601a      	str	r2, [r3, #0]

    if(controller & B_CS1) {
20000538:	1dfb      	adds	r3, r7, #7
2000053a:	781b      	ldrb	r3, [r3, #0]
2000053c:	2208      	movs	r2, #8
2000053e:	4013      	ands	r3, r2
20000540:	d004      	beq.n	2000054c <graphic_read+0x60>
        select_controller(B_CS1);
20000542:	2008      	movs	r0, #8
20000544:	f7ff ff6e 	bl	20000424 <select_controller>
        graphic_wait_ready();
20000548:	f7ff ff99 	bl	2000047e <graphic_wait_ready>
    }
    if(controller & B_CS2) {
2000054c:	1dfb      	adds	r3, r7, #7
2000054e:	781b      	ldrb	r3, [r3, #0]
20000550:	2210      	movs	r2, #16
20000552:	4013      	ands	r3, r2
20000554:	d004      	beq.n	20000560 <graphic_read+0x74>
        select_controller(B_CS2);
20000556:	2010      	movs	r0, #16
20000558:	f7ff ff64 	bl	20000424 <select_controller>
        graphic_wait_ready();
2000055c:	f7ff ff8f 	bl	2000047e <graphic_wait_ready>
    }
    return c;
20000560:	230f      	movs	r3, #15
20000562:	18fb      	adds	r3, r7, r3
20000564:	781b      	ldrb	r3, [r3, #0]
}
20000566:	0018      	movs	r0, r3
20000568:	46bd      	mov	sp, r7
2000056a:	b004      	add	sp, #16
2000056c:	bd80      	pop	{r7, pc}
2000056e:	46c0      	nop			; (mov r8, r8)
20000570:	40021000 	andmi	r1, r2, r0
20000574:	00005555 	andeq	r5, r0, r5, asr r5
20000578:	40021011 	andmi	r1, r2, r1, lsl r0
2000057c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000580 <graphic_read_data>:

static uint8_t graphic_read_data(uint8_t controller)
{
20000580:	b580      	push	{r7, lr}
20000582:	b082      	sub	sp, #8
20000584:	af00      	add	r7, sp, #0
20000586:	0002      	movs	r2, r0
20000588:	1dfb      	adds	r3, r7, #7
2000058a:	701a      	strb	r2, [r3, #0]
    graphic_read(controller);
2000058c:	1dfb      	adds	r3, r7, #7
2000058e:	781b      	ldrb	r3, [r3, #0]
20000590:	0018      	movs	r0, r3
20000592:	f7ff ffab 	bl	200004ec <graphic_read>
    return graphic_read(controller);
20000596:	1dfb      	adds	r3, r7, #7
20000598:	781b      	ldrb	r3, [r3, #0]
2000059a:	0018      	movs	r0, r3
2000059c:	f7ff ffa6 	bl	200004ec <graphic_read>
200005a0:	0003      	movs	r3, r0
}
200005a2:	0018      	movs	r0, r3
200005a4:	46bd      	mov	sp, r7
200005a6:	b002      	add	sp, #8
200005a8:	bd80      	pop	{r7, pc}

200005aa <graphic_write>:

static void graphic_write(uint8_t value, uint8_t controller)
{
200005aa:	b580      	push	{r7, lr}
200005ac:	b082      	sub	sp, #8
200005ae:	af00      	add	r7, sp, #0
200005b0:	0002      	movs	r2, r0
200005b2:	1dfb      	adds	r3, r7, #7
200005b4:	701a      	strb	r2, [r3, #0]
200005b6:	1dbb      	adds	r3, r7, #6
200005b8:	1c0a      	adds	r2, r1, #0
200005ba:	701a      	strb	r2, [r3, #0]
    *GPIO_ODR_HIGH = value;
200005bc:	4a15      	ldr	r2, [pc, #84]	; (20000614 <graphic_write+0x6a>)
200005be:	1dfb      	adds	r3, r7, #7
200005c0:	781b      	ldrb	r3, [r3, #0]
200005c2:	7013      	strb	r3, [r2, #0]
    select_controller(controller);
200005c4:	1dbb      	adds	r3, r7, #6
200005c6:	781b      	ldrb	r3, [r3, #0]
200005c8:	0018      	movs	r0, r3
200005ca:	f7ff ff2b 	bl	20000424 <select_controller>
    delay_500ns();
200005ce:	f7ff fd71 	bl	200000b4 <delay_500ns>
    graphic_ctrl_bit_set(B_E);
200005d2:	2040      	movs	r0, #64	; 0x40
200005d4:	f7ff fed6 	bl	20000384 <graphic_ctrl_bit_set>
    delay_500ns();
200005d8:	f7ff fd6c 	bl	200000b4 <delay_500ns>
    graphic_ctrl_bit_clear(B_E);
200005dc:	2040      	movs	r0, #64	; 0x40
200005de:	f7ff fef9 	bl	200003d4 <graphic_ctrl_bit_clear>

    if(controller & B_CS1) {
200005e2:	1dbb      	adds	r3, r7, #6
200005e4:	781b      	ldrb	r3, [r3, #0]
200005e6:	2208      	movs	r2, #8
200005e8:	4013      	ands	r3, r2
200005ea:	d004      	beq.n	200005f6 <graphic_write+0x4c>
        select_controller(B_CS1);
200005ec:	2008      	movs	r0, #8
200005ee:	f7ff ff19 	bl	20000424 <select_controller>
        graphic_wait_ready();
200005f2:	f7ff ff44 	bl	2000047e <graphic_wait_ready>
    }
    if(controller & B_CS2) {
200005f6:	1dbb      	adds	r3, r7, #6
200005f8:	781b      	ldrb	r3, [r3, #0]
200005fa:	2210      	movs	r2, #16
200005fc:	4013      	ands	r3, r2
200005fe:	d004      	beq.n	2000060a <graphic_write+0x60>
        select_controller(B_CS2);
20000600:	2010      	movs	r0, #16
20000602:	f7ff ff0f 	bl	20000424 <select_controller>
        graphic_wait_ready();
20000606:	f7ff ff3a 	bl	2000047e <graphic_wait_ready>
    }
}
2000060a:	46c0      	nop			; (mov r8, r8)
2000060c:	46bd      	mov	sp, r7
2000060e:	b002      	add	sp, #8
20000610:	bd80      	pop	{r7, pc}
20000612:	46c0      	nop			; (mov r8, r8)
20000614:	40021015 	andmi	r1, r2, r5, lsl r0

20000618 <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller)
{
20000618:	b580      	push	{r7, lr}
2000061a:	b082      	sub	sp, #8
2000061c:	af00      	add	r7, sp, #0
2000061e:	0002      	movs	r2, r0
20000620:	1dfb      	adds	r3, r7, #7
20000622:	701a      	strb	r2, [r3, #0]
20000624:	1dbb      	adds	r3, r7, #6
20000626:	1c0a      	adds	r2, r1, #0
20000628:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
2000062a:	2040      	movs	r0, #64	; 0x40
2000062c:	f7ff fed2 	bl	200003d4 <graphic_ctrl_bit_clear>
    select_controller(controller);
20000630:	1dbb      	adds	r3, r7, #6
20000632:	781b      	ldrb	r3, [r3, #0]
20000634:	0018      	movs	r0, r3
20000636:	f7ff fef5 	bl	20000424 <select_controller>
    graphic_ctrl_bit_set(B_RS);
2000063a:	2001      	movs	r0, #1
2000063c:	f7ff fea2 	bl	20000384 <graphic_ctrl_bit_set>
    graphic_ctrl_bit_clear(B_RW);
20000640:	2002      	movs	r0, #2
20000642:	f7ff fec7 	bl	200003d4 <graphic_ctrl_bit_clear>
    graphic_write(data, controller);
20000646:	1dbb      	adds	r3, r7, #6
20000648:	781a      	ldrb	r2, [r3, #0]
2000064a:	1dfb      	adds	r3, r7, #7
2000064c:	781b      	ldrb	r3, [r3, #0]
2000064e:	0011      	movs	r1, r2
20000650:	0018      	movs	r0, r3
20000652:	f7ff ffaa 	bl	200005aa <graphic_write>
}
20000656:	46c0      	nop			; (mov r8, r8)
20000658:	46bd      	mov	sp, r7
2000065a:	b002      	add	sp, #8
2000065c:	bd80      	pop	{r7, pc}

2000065e <graphic_write_command>:

void graphic_write_command(uint8_t command, uint8_t controller)
{
2000065e:	b580      	push	{r7, lr}
20000660:	b082      	sub	sp, #8
20000662:	af00      	add	r7, sp, #0
20000664:	0002      	movs	r2, r0
20000666:	1dfb      	adds	r3, r7, #7
20000668:	701a      	strb	r2, [r3, #0]
2000066a:	1dbb      	adds	r3, r7, #6
2000066c:	1c0a      	adds	r2, r1, #0
2000066e:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000670:	2040      	movs	r0, #64	; 0x40
20000672:	f7ff feaf 	bl	200003d4 <graphic_ctrl_bit_clear>
    select_controller(controller);
20000676:	1dbb      	adds	r3, r7, #6
20000678:	781b      	ldrb	r3, [r3, #0]
2000067a:	0018      	movs	r0, r3
2000067c:	f7ff fed2 	bl	20000424 <select_controller>
    graphic_ctrl_bit_clear(B_RS);
20000680:	2001      	movs	r0, #1
20000682:	f7ff fea7 	bl	200003d4 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_clear(B_RW);
20000686:	2002      	movs	r0, #2
20000688:	f7ff fea4 	bl	200003d4 <graphic_ctrl_bit_clear>
    graphic_write(command, controller);
2000068c:	1dbb      	adds	r3, r7, #6
2000068e:	781a      	ldrb	r2, [r3, #0]
20000690:	1dfb      	adds	r3, r7, #7
20000692:	781b      	ldrb	r3, [r3, #0]
20000694:	0011      	movs	r1, r2
20000696:	0018      	movs	r0, r3
20000698:	f7ff ff87 	bl	200005aa <graphic_write>
}
2000069c:	46c0      	nop			; (mov r8, r8)
2000069e:	46bd      	mov	sp, r7
200006a0:	b002      	add	sp, #8
200006a2:	bd80      	pop	{r7, pc}

200006a4 <graphic_clear_screen>:

void graphic_clear_screen(void)
{
200006a4:	b580      	push	{r7, lr}
200006a6:	b082      	sub	sp, #8
200006a8:	af00      	add	r7, sp, #0
    uint8_t i, j;
    for(j = 0; j < 8; j++) {
200006aa:	1dbb      	adds	r3, r7, #6
200006ac:	2200      	movs	r2, #0
200006ae:	701a      	strb	r2, [r3, #0]
200006b0:	e023      	b.n	200006fa <graphic_clear_screen+0x56>
        graphic_write_command(LCD_SET_PAGE | j, B_CS1 | B_CS2);
200006b2:	1dbb      	adds	r3, r7, #6
200006b4:	781b      	ldrb	r3, [r3, #0]
200006b6:	2248      	movs	r2, #72	; 0x48
200006b8:	4252      	negs	r2, r2
200006ba:	4313      	orrs	r3, r2
200006bc:	b2db      	uxtb	r3, r3
200006be:	2118      	movs	r1, #24
200006c0:	0018      	movs	r0, r3
200006c2:	f7ff ffcc 	bl	2000065e <graphic_write_command>
        graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
200006c6:	2118      	movs	r1, #24
200006c8:	2040      	movs	r0, #64	; 0x40
200006ca:	f7ff ffc8 	bl	2000065e <graphic_write_command>
        for(i = 0; i <= 63; i++) {
200006ce:	1dfb      	adds	r3, r7, #7
200006d0:	2200      	movs	r2, #0
200006d2:	701a      	strb	r2, [r3, #0]
200006d4:	e008      	b.n	200006e8 <graphic_clear_screen+0x44>
            graphic_write_data(0, B_CS1 | B_CS2);
200006d6:	2118      	movs	r1, #24
200006d8:	2000      	movs	r0, #0
200006da:	f7ff ff9d 	bl	20000618 <graphic_write_data>
        for(i = 0; i <= 63; i++) {
200006de:	1dfb      	adds	r3, r7, #7
200006e0:	781a      	ldrb	r2, [r3, #0]
200006e2:	1dfb      	adds	r3, r7, #7
200006e4:	3201      	adds	r2, #1
200006e6:	701a      	strb	r2, [r3, #0]
200006e8:	1dfb      	adds	r3, r7, #7
200006ea:	781b      	ldrb	r3, [r3, #0]
200006ec:	2b3f      	cmp	r3, #63	; 0x3f
200006ee:	d9f2      	bls.n	200006d6 <graphic_clear_screen+0x32>
    for(j = 0; j < 8; j++) {
200006f0:	1dbb      	adds	r3, r7, #6
200006f2:	781a      	ldrb	r2, [r3, #0]
200006f4:	1dbb      	adds	r3, r7, #6
200006f6:	3201      	adds	r2, #1
200006f8:	701a      	strb	r2, [r3, #0]
200006fa:	1dbb      	adds	r3, r7, #6
200006fc:	781b      	ldrb	r3, [r3, #0]
200006fe:	2b07      	cmp	r3, #7
20000700:	d9d7      	bls.n	200006b2 <graphic_clear_screen+0xe>
        }
    }
}
20000702:	46c0      	nop			; (mov r8, r8)
20000704:	46c0      	nop			; (mov r8, r8)
20000706:	46bd      	mov	sp, r7
20000708:	b002      	add	sp, #8
2000070a:	bd80      	pop	{r7, pc}

2000070c <graphic_initialize>:

void graphic_initialize(void)
{
2000070c:	b580      	push	{r7, lr}
2000070e:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_set(B_E);
20000710:	2040      	movs	r0, #64	; 0x40
20000712:	f7ff fe37 	bl	20000384 <graphic_ctrl_bit_set>
    delay_micro(10);
20000716:	200a      	movs	r0, #10
20000718:	f7ff fc9c 	bl	20000054 <delay_micro>
    graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
2000071c:	2078      	movs	r0, #120	; 0x78
2000071e:	f7ff fe59 	bl	200003d4 <graphic_ctrl_bit_clear>
    delay_milli(30);
20000722:	201e      	movs	r0, #30
20000724:	f7ff fcb1 	bl	2000008a <delay_milli>
    graphic_ctrl_bit_set(B_RST);
20000728:	2020      	movs	r0, #32
2000072a:	f7ff fe2b 	bl	20000384 <graphic_ctrl_bit_set>
    delay_milli(100);
2000072e:	2064      	movs	r0, #100	; 0x64
20000730:	f7ff fcab 	bl	2000008a <delay_milli>
    graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
20000734:	2118      	movs	r1, #24
20000736:	203e      	movs	r0, #62	; 0x3e
20000738:	f7ff ff91 	bl	2000065e <graphic_write_command>
    graphic_write_command(LCD_ON, B_CS1 | B_CS2);
2000073c:	2118      	movs	r1, #24
2000073e:	203f      	movs	r0, #63	; 0x3f
20000740:	f7ff ff8d 	bl	2000065e <graphic_write_command>
    graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);
20000744:	2118      	movs	r1, #24
20000746:	20c0      	movs	r0, #192	; 0xc0
20000748:	f7ff ff89 	bl	2000065e <graphic_write_command>
    graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);
2000074c:	2118      	movs	r1, #24
2000074e:	2040      	movs	r0, #64	; 0x40
20000750:	f7ff ff85 	bl	2000065e <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);
20000754:	2118      	movs	r1, #24
20000756:	20b8      	movs	r0, #184	; 0xb8
20000758:	f7ff ff81 	bl	2000065e <graphic_write_command>
    select_controller(0);
2000075c:	2000      	movs	r0, #0
2000075e:	f7ff fe61 	bl	20000424 <select_controller>
}
20000762:	46c0      	nop			; (mov r8, r8)
20000764:	46bd      	mov	sp, r7
20000766:	bd80      	pop	{r7, pc}

20000768 <pixel>:

void pixel(int x, int y, int set)
{
20000768:	b5f0      	push	{r4, r5, r6, r7, lr}
2000076a:	b089      	sub	sp, #36	; 0x24
2000076c:	af00      	add	r7, sp, #0
2000076e:	60f8      	str	r0, [r7, #12]
20000770:	60b9      	str	r1, [r7, #8]
20000772:	607a      	str	r2, [r7, #4]
    uint8_t mask, c, controller;
    int index;
    if((x < 1) || (y < 1) || (x > 128) || (y > 64))
20000774:	68fb      	ldr	r3, [r7, #12]
20000776:	2b00      	cmp	r3, #0
20000778:	dc00      	bgt.n	2000077c <pixel+0x14>
2000077a:	e0b9      	b.n	200008f0 <pixel+0x188>
2000077c:	68bb      	ldr	r3, [r7, #8]
2000077e:	2b00      	cmp	r3, #0
20000780:	dc00      	bgt.n	20000784 <pixel+0x1c>
20000782:	e0b5      	b.n	200008f0 <pixel+0x188>
20000784:	68fb      	ldr	r3, [r7, #12]
20000786:	2b80      	cmp	r3, #128	; 0x80
20000788:	dd00      	ble.n	2000078c <pixel+0x24>
2000078a:	e0b1      	b.n	200008f0 <pixel+0x188>
2000078c:	68bb      	ldr	r3, [r7, #8]
2000078e:	2b40      	cmp	r3, #64	; 0x40
20000790:	dd00      	ble.n	20000794 <pixel+0x2c>
20000792:	e0ad      	b.n	200008f0 <pixel+0x188>
        return;

    index = (y - 1) / 8;
20000794:	68bb      	ldr	r3, [r7, #8]
20000796:	3b01      	subs	r3, #1
20000798:	2b00      	cmp	r3, #0
2000079a:	da00      	bge.n	2000079e <pixel+0x36>
2000079c:	3307      	adds	r3, #7
2000079e:	10db      	asrs	r3, r3, #3
200007a0:	61bb      	str	r3, [r7, #24]

    switch((y - 1) % 8) {
200007a2:	68bb      	ldr	r3, [r7, #8]
200007a4:	3b01      	subs	r3, #1
200007a6:	4a54      	ldr	r2, [pc, #336]	; (200008f8 <pixel+0x190>)
200007a8:	4013      	ands	r3, r2
200007aa:	d504      	bpl.n	200007b6 <pixel+0x4e>
200007ac:	3b01      	subs	r3, #1
200007ae:	2208      	movs	r2, #8
200007b0:	4252      	negs	r2, r2
200007b2:	4313      	orrs	r3, r2
200007b4:	3301      	adds	r3, #1
200007b6:	2b07      	cmp	r3, #7
200007b8:	d82c      	bhi.n	20000814 <pixel+0xac>
200007ba:	009a      	lsls	r2, r3, #2
200007bc:	4b4f      	ldr	r3, [pc, #316]	; (200008fc <pixel+0x194>)
200007be:	18d3      	adds	r3, r2, r3
200007c0:	681b      	ldr	r3, [r3, #0]
200007c2:	469f      	mov	pc, r3
    case 0:
        mask = 1;
200007c4:	231f      	movs	r3, #31
200007c6:	18fb      	adds	r3, r7, r3
200007c8:	2201      	movs	r2, #1
200007ca:	701a      	strb	r2, [r3, #0]
        break;
200007cc:	e022      	b.n	20000814 <pixel+0xac>
    case 1:
        mask = 2;
200007ce:	231f      	movs	r3, #31
200007d0:	18fb      	adds	r3, r7, r3
200007d2:	2202      	movs	r2, #2
200007d4:	701a      	strb	r2, [r3, #0]
        break;
200007d6:	e01d      	b.n	20000814 <pixel+0xac>
    case 2:
        mask = 4;
200007d8:	231f      	movs	r3, #31
200007da:	18fb      	adds	r3, r7, r3
200007dc:	2204      	movs	r2, #4
200007de:	701a      	strb	r2, [r3, #0]
        break;
200007e0:	e018      	b.n	20000814 <pixel+0xac>
    case 3:
        mask = 8;
200007e2:	231f      	movs	r3, #31
200007e4:	18fb      	adds	r3, r7, r3
200007e6:	2208      	movs	r2, #8
200007e8:	701a      	strb	r2, [r3, #0]
        break;
200007ea:	e013      	b.n	20000814 <pixel+0xac>
    case 4:
        mask = 0x10;
200007ec:	231f      	movs	r3, #31
200007ee:	18fb      	adds	r3, r7, r3
200007f0:	2210      	movs	r2, #16
200007f2:	701a      	strb	r2, [r3, #0]
        break;
200007f4:	e00e      	b.n	20000814 <pixel+0xac>
    case 5:
        mask = 0x20;
200007f6:	231f      	movs	r3, #31
200007f8:	18fb      	adds	r3, r7, r3
200007fa:	2220      	movs	r2, #32
200007fc:	701a      	strb	r2, [r3, #0]
        break;
200007fe:	e009      	b.n	20000814 <pixel+0xac>
    case 6:
        mask = 0x40;
20000800:	231f      	movs	r3, #31
20000802:	18fb      	adds	r3, r7, r3
20000804:	2240      	movs	r2, #64	; 0x40
20000806:	701a      	strb	r2, [r3, #0]
        break;
20000808:	e004      	b.n	20000814 <pixel+0xac>
    case 7:
        mask = 0x80;
2000080a:	231f      	movs	r3, #31
2000080c:	18fb      	adds	r3, r7, r3
2000080e:	2280      	movs	r2, #128	; 0x80
20000810:	701a      	strb	r2, [r3, #0]
        break;
20000812:	46c0      	nop			; (mov r8, r8)
    }

    if(set == 0)
20000814:	687b      	ldr	r3, [r7, #4]
20000816:	2b00      	cmp	r3, #0
20000818:	d105      	bne.n	20000826 <pixel+0xbe>
        mask = ~mask;
2000081a:	221f      	movs	r2, #31
2000081c:	18bb      	adds	r3, r7, r2
2000081e:	18ba      	adds	r2, r7, r2
20000820:	7812      	ldrb	r2, [r2, #0]
20000822:	43d2      	mvns	r2, r2
20000824:	701a      	strb	r2, [r3, #0]
    if(x > 64) {
20000826:	68fb      	ldr	r3, [r7, #12]
20000828:	2b40      	cmp	r3, #64	; 0x40
2000082a:	dd07      	ble.n	2000083c <pixel+0xd4>
        controller = B_CS2;
2000082c:	231e      	movs	r3, #30
2000082e:	18fb      	adds	r3, r7, r3
20000830:	2210      	movs	r2, #16
20000832:	701a      	strb	r2, [r3, #0]
        x = x - 65;
20000834:	68fb      	ldr	r3, [r7, #12]
20000836:	3b41      	subs	r3, #65	; 0x41
20000838:	60fb      	str	r3, [r7, #12]
2000083a:	e006      	b.n	2000084a <pixel+0xe2>
    } else {
        controller = B_CS1;
2000083c:	231e      	movs	r3, #30
2000083e:	18fb      	adds	r3, r7, r3
20000840:	2208      	movs	r2, #8
20000842:	701a      	strb	r2, [r3, #0]
        x = x - 1;
20000844:	68fb      	ldr	r3, [r7, #12]
20000846:	3b01      	subs	r3, #1
20000848:	60fb      	str	r3, [r7, #12]
    }

    graphic_write_command(LCD_SET_ADD | x, controller);
2000084a:	68fb      	ldr	r3, [r7, #12]
2000084c:	b25b      	sxtb	r3, r3
2000084e:	2240      	movs	r2, #64	; 0x40
20000850:	4313      	orrs	r3, r2
20000852:	b25b      	sxtb	r3, r3
20000854:	b2da      	uxtb	r2, r3
20000856:	251e      	movs	r5, #30
20000858:	197b      	adds	r3, r7, r5
2000085a:	781b      	ldrb	r3, [r3, #0]
2000085c:	0019      	movs	r1, r3
2000085e:	0010      	movs	r0, r2
20000860:	f7ff fefd 	bl	2000065e <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE | index, controller);
20000864:	69bb      	ldr	r3, [r7, #24]
20000866:	b25b      	sxtb	r3, r3
20000868:	2248      	movs	r2, #72	; 0x48
2000086a:	4252      	negs	r2, r2
2000086c:	4313      	orrs	r3, r2
2000086e:	b25b      	sxtb	r3, r3
20000870:	b2da      	uxtb	r2, r3
20000872:	197b      	adds	r3, r7, r5
20000874:	781b      	ldrb	r3, [r3, #0]
20000876:	0019      	movs	r1, r3
20000878:	0010      	movs	r0, r2
2000087a:	f7ff fef0 	bl	2000065e <graphic_write_command>
    c = graphic_read_data(controller);
2000087e:	2617      	movs	r6, #23
20000880:	19bc      	adds	r4, r7, r6
20000882:	197b      	adds	r3, r7, r5
20000884:	781b      	ldrb	r3, [r3, #0]
20000886:	0018      	movs	r0, r3
20000888:	f7ff fe7a 	bl	20000580 <graphic_read_data>
2000088c:	0003      	movs	r3, r0
2000088e:	7023      	strb	r3, [r4, #0]
    graphic_write_command(LCD_SET_ADD | x, controller);
20000890:	68fb      	ldr	r3, [r7, #12]
20000892:	b25b      	sxtb	r3, r3
20000894:	2240      	movs	r2, #64	; 0x40
20000896:	4313      	orrs	r3, r2
20000898:	b25b      	sxtb	r3, r3
2000089a:	b2da      	uxtb	r2, r3
2000089c:	197b      	adds	r3, r7, r5
2000089e:	781b      	ldrb	r3, [r3, #0]
200008a0:	0019      	movs	r1, r3
200008a2:	0010      	movs	r0, r2
200008a4:	f7ff fedb 	bl	2000065e <graphic_write_command>
    if(set)
200008a8:	687b      	ldr	r3, [r7, #4]
200008aa:	2b00      	cmp	r3, #0
200008ac:	d008      	beq.n	200008c0 <pixel+0x158>
        mask = mask | c;
200008ae:	221f      	movs	r2, #31
200008b0:	18bb      	adds	r3, r7, r2
200008b2:	18b9      	adds	r1, r7, r2
200008b4:	19ba      	adds	r2, r7, r6
200008b6:	7809      	ldrb	r1, [r1, #0]
200008b8:	7812      	ldrb	r2, [r2, #0]
200008ba:	430a      	orrs	r2, r1
200008bc:	701a      	strb	r2, [r3, #0]
200008be:	e008      	b.n	200008d2 <pixel+0x16a>
    else
        mask = mask & c;
200008c0:	221f      	movs	r2, #31
200008c2:	18bb      	adds	r3, r7, r2
200008c4:	18ba      	adds	r2, r7, r2
200008c6:	2117      	movs	r1, #23
200008c8:	1879      	adds	r1, r7, r1
200008ca:	7812      	ldrb	r2, [r2, #0]
200008cc:	7809      	ldrb	r1, [r1, #0]
200008ce:	400a      	ands	r2, r1
200008d0:	701a      	strb	r2, [r3, #0]
    graphic_write_data(mask, controller);
200008d2:	231e      	movs	r3, #30
200008d4:	18fb      	adds	r3, r7, r3
200008d6:	781a      	ldrb	r2, [r3, #0]
200008d8:	231f      	movs	r3, #31
200008da:	18fb      	adds	r3, r7, r3
200008dc:	781b      	ldrb	r3, [r3, #0]
200008de:	0011      	movs	r1, r2
200008e0:	0018      	movs	r0, r3
200008e2:	f7ff fe99 	bl	20000618 <graphic_write_data>
    graphic_write_command(LCD_ON, B_CS1 | B_CS2);
200008e6:	2118      	movs	r1, #24
200008e8:	203f      	movs	r0, #63	; 0x3f
200008ea:	f7ff feb8 	bl	2000065e <graphic_write_command>
200008ee:	e000      	b.n	200008f2 <pixel+0x18a>
        return;
200008f0:	46c0      	nop			; (mov r8, r8)
}
200008f2:	46bd      	mov	sp, r7
200008f4:	b009      	add	sp, #36	; 0x24
200008f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
200008f8:	80000007 	andhi	r0, r0, r7
200008fc:	20001200 	andcs	r1, r0, r0, lsl #4

20000900 <set_object_speed>:

void set_object_speed(POBJECT o, int speedX, int speedY)
{
20000900:	b580      	push	{r7, lr}
20000902:	b084      	sub	sp, #16
20000904:	af00      	add	r7, sp, #0
20000906:	60f8      	str	r0, [r7, #12]
20000908:	60b9      	str	r1, [r7, #8]
2000090a:	607a      	str	r2, [r7, #4]
    o->dirx = speedX;
2000090c:	68fb      	ldr	r3, [r7, #12]
2000090e:	68ba      	ldr	r2, [r7, #8]
20000910:	605a      	str	r2, [r3, #4]
    o->diry = speedY;
20000912:	68fb      	ldr	r3, [r7, #12]
20000914:	687a      	ldr	r2, [r7, #4]
20000916:	609a      	str	r2, [r3, #8]
}
20000918:	46c0      	nop			; (mov r8, r8)
2000091a:	46bd      	mov	sp, r7
2000091c:	b004      	add	sp, #16
2000091e:	bd80      	pop	{r7, pc}

20000920 <draw_object>:

void draw_object(POBJECT O)
{
20000920:	b580      	push	{r7, lr}
20000922:	b084      	sub	sp, #16
20000924:	af00      	add	r7, sp, #0
20000926:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < 12; i++) {
20000928:	2300      	movs	r3, #0
2000092a:	60fb      	str	r3, [r7, #12]
2000092c:	e01c      	b.n	20000968 <draw_object+0x48>
        pixel(O->posx + O->geo->px[i].x, O->posy + O->geo->px[i].y, 1);
2000092e:	687b      	ldr	r3, [r7, #4]
20000930:	68da      	ldr	r2, [r3, #12]
20000932:	687b      	ldr	r3, [r7, #4]
20000934:	6819      	ldr	r1, [r3, #0]
20000936:	68fb      	ldr	r3, [r7, #12]
20000938:	3304      	adds	r3, #4
2000093a:	005b      	lsls	r3, r3, #1
2000093c:	18cb      	adds	r3, r1, r3
2000093e:	3304      	adds	r3, #4
20000940:	781b      	ldrb	r3, [r3, #0]
20000942:	18d0      	adds	r0, r2, r3
20000944:	687b      	ldr	r3, [r7, #4]
20000946:	691a      	ldr	r2, [r3, #16]
20000948:	687b      	ldr	r3, [r7, #4]
2000094a:	6819      	ldr	r1, [r3, #0]
2000094c:	68fb      	ldr	r3, [r7, #12]
2000094e:	3304      	adds	r3, #4
20000950:	005b      	lsls	r3, r3, #1
20000952:	18cb      	adds	r3, r1, r3
20000954:	3305      	adds	r3, #5
20000956:	781b      	ldrb	r3, [r3, #0]
20000958:	18d3      	adds	r3, r2, r3
2000095a:	2201      	movs	r2, #1
2000095c:	0019      	movs	r1, r3
2000095e:	f7ff ff03 	bl	20000768 <pixel>
    for(int i = 0; i < 12; i++) {
20000962:	68fb      	ldr	r3, [r7, #12]
20000964:	3301      	adds	r3, #1
20000966:	60fb      	str	r3, [r7, #12]
20000968:	68fb      	ldr	r3, [r7, #12]
2000096a:	2b0b      	cmp	r3, #11
2000096c:	dddf      	ble.n	2000092e <draw_object+0xe>
    }
}
2000096e:	46c0      	nop			; (mov r8, r8)
20000970:	46c0      	nop			; (mov r8, r8)
20000972:	46bd      	mov	sp, r7
20000974:	b004      	add	sp, #16
20000976:	bd80      	pop	{r7, pc}

20000978 <clear_object>:

void clear_object(POBJECT O)
{
20000978:	b580      	push	{r7, lr}
2000097a:	b084      	sub	sp, #16
2000097c:	af00      	add	r7, sp, #0
2000097e:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < MAX_POINTS; i++) {
20000980:	2300      	movs	r3, #0
20000982:	60fb      	str	r3, [r7, #12]
20000984:	e01c      	b.n	200009c0 <clear_object+0x48>
        pixel(O->posx + O->geo->px[i].x, O->posy + O->geo->px[i].y, 0);
20000986:	687b      	ldr	r3, [r7, #4]
20000988:	68da      	ldr	r2, [r3, #12]
2000098a:	687b      	ldr	r3, [r7, #4]
2000098c:	6819      	ldr	r1, [r3, #0]
2000098e:	68fb      	ldr	r3, [r7, #12]
20000990:	3304      	adds	r3, #4
20000992:	005b      	lsls	r3, r3, #1
20000994:	18cb      	adds	r3, r1, r3
20000996:	3304      	adds	r3, #4
20000998:	781b      	ldrb	r3, [r3, #0]
2000099a:	18d0      	adds	r0, r2, r3
2000099c:	687b      	ldr	r3, [r7, #4]
2000099e:	691a      	ldr	r2, [r3, #16]
200009a0:	687b      	ldr	r3, [r7, #4]
200009a2:	6819      	ldr	r1, [r3, #0]
200009a4:	68fb      	ldr	r3, [r7, #12]
200009a6:	3304      	adds	r3, #4
200009a8:	005b      	lsls	r3, r3, #1
200009aa:	18cb      	adds	r3, r1, r3
200009ac:	3305      	adds	r3, #5
200009ae:	781b      	ldrb	r3, [r3, #0]
200009b0:	18d3      	adds	r3, r2, r3
200009b2:	2200      	movs	r2, #0
200009b4:	0019      	movs	r1, r3
200009b6:	f7ff fed7 	bl	20000768 <pixel>
    for(int i = 0; i < MAX_POINTS; i++) {
200009ba:	68fb      	ldr	r3, [r7, #12]
200009bc:	3301      	adds	r3, #1
200009be:	60fb      	str	r3, [r7, #12]
200009c0:	68fb      	ldr	r3, [r7, #12]
200009c2:	2b1d      	cmp	r3, #29
200009c4:	dddf      	ble.n	20000986 <clear_object+0xe>
    }
}
200009c6:	46c0      	nop			; (mov r8, r8)
200009c8:	46c0      	nop			; (mov r8, r8)
200009ca:	46bd      	mov	sp, r7
200009cc:	b004      	add	sp, #16
200009ce:	bd80      	pop	{r7, pc}

200009d0 <move_object>:

void move_object(POBJECT object)
{
200009d0:	b580      	push	{r7, lr}
200009d2:	b082      	sub	sp, #8
200009d4:	af00      	add	r7, sp, #0
200009d6:	6078      	str	r0, [r7, #4]

    clear_object(object);
200009d8:	687b      	ldr	r3, [r7, #4]
200009da:	0018      	movs	r0, r3
200009dc:	f7ff ffcc 	bl	20000978 <clear_object>
    object->posx += object->dirx;
200009e0:	687b      	ldr	r3, [r7, #4]
200009e2:	68da      	ldr	r2, [r3, #12]
200009e4:	687b      	ldr	r3, [r7, #4]
200009e6:	685b      	ldr	r3, [r3, #4]
200009e8:	18d2      	adds	r2, r2, r3
200009ea:	687b      	ldr	r3, [r7, #4]
200009ec:	60da      	str	r2, [r3, #12]
    object->posy += object->diry;
200009ee:	687b      	ldr	r3, [r7, #4]
200009f0:	691a      	ldr	r2, [r3, #16]
200009f2:	687b      	ldr	r3, [r7, #4]
200009f4:	689b      	ldr	r3, [r3, #8]
200009f6:	18d2      	adds	r2, r2, r3
200009f8:	687b      	ldr	r3, [r7, #4]
200009fa:	611a      	str	r2, [r3, #16]

    clear_object(object);
200009fc:	687b      	ldr	r3, [r7, #4]
200009fe:	0018      	movs	r0, r3
20000a00:	f7ff ffba 	bl	20000978 <clear_object>
    if(object->posx < 1) {
20000a04:	687b      	ldr	r3, [r7, #4]
20000a06:	68db      	ldr	r3, [r3, #12]
20000a08:	2b00      	cmp	r3, #0
20000a0a:	dc15      	bgt.n	20000a38 <move_object+0x68>
        R++; // Add points to right player
20000a0c:	4b34      	ldr	r3, [pc, #208]	; (20000ae0 <move_object+0x110>)
20000a0e:	781b      	ldrb	r3, [r3, #0]
20000a10:	3301      	adds	r3, #1
20000a12:	b2da      	uxtb	r2, r3
20000a14:	4b32      	ldr	r3, [pc, #200]	; (20000ae0 <move_object+0x110>)
20000a16:	701a      	strb	r2, [r3, #0]
        if (R == 3)
20000a18:	4b31      	ldr	r3, [pc, #196]	; (20000ae0 <move_object+0x110>)
20000a1a:	781b      	ldrb	r3, [r3, #0]
20000a1c:	2b03      	cmp	r3, #3
20000a1e:	d105      	bne.n	20000a2c <move_object+0x5c>
        {
            object->dirx = 0; 
20000a20:	687b      	ldr	r3, [r7, #4]
20000a22:	2200      	movs	r2, #0
20000a24:	605a      	str	r2, [r3, #4]
            object->diry = 0; 
20000a26:	687b      	ldr	r3, [r7, #4]
20000a28:	2200      	movs	r2, #0
20000a2a:	609a      	str	r2, [r3, #8]
        }

        object->posx = 128/2;
20000a2c:	687b      	ldr	r3, [r7, #4]
20000a2e:	2240      	movs	r2, #64	; 0x40
20000a30:	60da      	str	r2, [r3, #12]
        object->posy = 64/2;
20000a32:	687b      	ldr	r3, [r7, #4]
20000a34:	2220      	movs	r2, #32
20000a36:	611a      	str	r2, [r3, #16]
    }
    if((object->posx + object->geo->sizeX) > 128) {
20000a38:	687b      	ldr	r3, [r7, #4]
20000a3a:	68da      	ldr	r2, [r3, #12]
20000a3c:	687b      	ldr	r3, [r7, #4]
20000a3e:	681b      	ldr	r3, [r3, #0]
20000a40:	685b      	ldr	r3, [r3, #4]
20000a42:	18d3      	adds	r3, r2, r3
20000a44:	2b80      	cmp	r3, #128	; 0x80
20000a46:	dd22      	ble.n	20000a8e <move_object+0xbe>
        object->dirx = -(object->dirx);
20000a48:	687b      	ldr	r3, [r7, #4]
20000a4a:	685b      	ldr	r3, [r3, #4]
20000a4c:	425a      	negs	r2, r3
20000a4e:	687b      	ldr	r3, [r7, #4]
20000a50:	605a      	str	r2, [r3, #4]
    
        L++;
20000a52:	4b24      	ldr	r3, [pc, #144]	; (20000ae4 <move_object+0x114>)
20000a54:	781b      	ldrb	r3, [r3, #0]
20000a56:	3301      	adds	r3, #1
20000a58:	b2da      	uxtb	r2, r3
20000a5a:	4b22      	ldr	r3, [pc, #136]	; (20000ae4 <move_object+0x114>)
20000a5c:	701a      	strb	r2, [r3, #0]
         if (L == 3)
20000a5e:	4b21      	ldr	r3, [pc, #132]	; (20000ae4 <move_object+0x114>)
20000a60:	781b      	ldrb	r3, [r3, #0]
20000a62:	2b03      	cmp	r3, #3
20000a64:	d105      	bne.n	20000a72 <move_object+0xa2>
        {
            object->dirx = 0; 
20000a66:	687b      	ldr	r3, [r7, #4]
20000a68:	2200      	movs	r2, #0
20000a6a:	605a      	str	r2, [r3, #4]
            object->diry = 0; 
20000a6c:	687b      	ldr	r3, [r7, #4]
20000a6e:	2200      	movs	r2, #0
20000a70:	609a      	str	r2, [r3, #8]
        }

        // Add points to Left player

        object->posx = (60 - (object->geo->sizeX));
20000a72:	687b      	ldr	r3, [r7, #4]
20000a74:	681b      	ldr	r3, [r3, #0]
20000a76:	685b      	ldr	r3, [r3, #4]
20000a78:	223c      	movs	r2, #60	; 0x3c
20000a7a:	1ad2      	subs	r2, r2, r3
20000a7c:	687b      	ldr	r3, [r7, #4]
20000a7e:	60da      	str	r2, [r3, #12]
        object->posy = (30 - (object->geo->sizeY));
20000a80:	687b      	ldr	r3, [r7, #4]
20000a82:	681b      	ldr	r3, [r3, #0]
20000a84:	689b      	ldr	r3, [r3, #8]
20000a86:	221e      	movs	r2, #30
20000a88:	1ad2      	subs	r2, r2, r3
20000a8a:	687b      	ldr	r3, [r7, #4]
20000a8c:	611a      	str	r2, [r3, #16]
    }
    if(object->posy < 1) {
20000a8e:	687b      	ldr	r3, [r7, #4]
20000a90:	691b      	ldr	r3, [r3, #16]
20000a92:	2b00      	cmp	r3, #0
20000a94:	dc07      	bgt.n	20000aa6 <move_object+0xd6>
        object->diry = -object->diry;
20000a96:	687b      	ldr	r3, [r7, #4]
20000a98:	689b      	ldr	r3, [r3, #8]
20000a9a:	425a      	negs	r2, r3
20000a9c:	687b      	ldr	r3, [r7, #4]
20000a9e:	609a      	str	r2, [r3, #8]
        object->posy = 1;
20000aa0:	687b      	ldr	r3, [r7, #4]
20000aa2:	2201      	movs	r2, #1
20000aa4:	611a      	str	r2, [r3, #16]
    }
    if(object->posy + object->geo->sizeY > 64) {
20000aa6:	687b      	ldr	r3, [r7, #4]
20000aa8:	691a      	ldr	r2, [r3, #16]
20000aaa:	687b      	ldr	r3, [r7, #4]
20000aac:	681b      	ldr	r3, [r3, #0]
20000aae:	689b      	ldr	r3, [r3, #8]
20000ab0:	18d3      	adds	r3, r2, r3
20000ab2:	2b40      	cmp	r3, #64	; 0x40
20000ab4:	dd0b      	ble.n	20000ace <move_object+0xfe>
        object->diry = -object->diry;
20000ab6:	687b      	ldr	r3, [r7, #4]
20000ab8:	689b      	ldr	r3, [r3, #8]
20000aba:	425a      	negs	r2, r3
20000abc:	687b      	ldr	r3, [r7, #4]
20000abe:	609a      	str	r2, [r3, #8]
        object->posy = (64 - (object->geo->sizeY));
20000ac0:	687b      	ldr	r3, [r7, #4]
20000ac2:	681b      	ldr	r3, [r3, #0]
20000ac4:	689b      	ldr	r3, [r3, #8]
20000ac6:	2240      	movs	r2, #64	; 0x40
20000ac8:	1ad2      	subs	r2, r2, r3
20000aca:	687b      	ldr	r3, [r7, #4]
20000acc:	611a      	str	r2, [r3, #16]
    }
    draw_object(object);
20000ace:	687b      	ldr	r3, [r7, #4]
20000ad0:	0018      	movs	r0, r3
20000ad2:	f7ff ff25 	bl	20000920 <draw_object>
}
20000ad6:	46c0      	nop			; (mov r8, r8)
20000ad8:	46bd      	mov	sp, r7
20000ada:	b002      	add	sp, #8
20000adc:	bd80      	pop	{r7, pc}
20000ade:	46c0      	nop			; (mov r8, r8)
20000ae0:	200010cd 	andcs	r1, r0, sp, asr #1
20000ae4:	200010cc 	andcs	r1, r0, ip, asr #1

20000ae8 <activeRow>:
    move_object,
    set_object_speed
};

void activeRow(unsigned char row)
{
20000ae8:	b580      	push	{r7, lr}
20000aea:	b082      	sub	sp, #8
20000aec:	af00      	add	r7, sp, #0
20000aee:	0002      	movs	r2, r0
20000af0:	1dfb      	adds	r3, r7, #7
20000af2:	701a      	strb	r2, [r3, #0]
    switch(row) {
20000af4:	1dfb      	adds	r3, r7, #7
20000af6:	781b      	ldrb	r3, [r3, #0]
20000af8:	2b04      	cmp	r3, #4
20000afa:	d818      	bhi.n	20000b2e <activeRow+0x46>
20000afc:	009a      	lsls	r2, r3, #2
20000afe:	4b0e      	ldr	r3, [pc, #56]	; (20000b38 <activeRow+0x50>)
20000b00:	18d3      	adds	r3, r2, r3
20000b02:	681b      	ldr	r3, [r3, #0]
20000b04:	469f      	mov	pc, r3
    case 0:
        *GPIO_D_ODR_HIGH = 0x00;
20000b06:	4b0d      	ldr	r3, [pc, #52]	; (20000b3c <activeRow+0x54>)
20000b08:	2200      	movs	r2, #0
20000b0a:	701a      	strb	r2, [r3, #0]
        break;
20000b0c:	e00f      	b.n	20000b2e <activeRow+0x46>
    case 1:
        *GPIO_D_ODR_HIGH = 0x10;
20000b0e:	4b0b      	ldr	r3, [pc, #44]	; (20000b3c <activeRow+0x54>)
20000b10:	2210      	movs	r2, #16
20000b12:	701a      	strb	r2, [r3, #0]
        break;
20000b14:	e00b      	b.n	20000b2e <activeRow+0x46>
    case 2:
        *GPIO_D_ODR_HIGH = 0x20;
20000b16:	4b09      	ldr	r3, [pc, #36]	; (20000b3c <activeRow+0x54>)
20000b18:	2220      	movs	r2, #32
20000b1a:	701a      	strb	r2, [r3, #0]
        break;
20000b1c:	e007      	b.n	20000b2e <activeRow+0x46>
    case 3:
        *GPIO_D_ODR_HIGH = 0x40;
20000b1e:	4b07      	ldr	r3, [pc, #28]	; (20000b3c <activeRow+0x54>)
20000b20:	2240      	movs	r2, #64	; 0x40
20000b22:	701a      	strb	r2, [r3, #0]
        break;
20000b24:	e003      	b.n	20000b2e <activeRow+0x46>
    case 4:
        *GPIO_D_ODR_HIGH = 0x80;
20000b26:	4b05      	ldr	r3, [pc, #20]	; (20000b3c <activeRow+0x54>)
20000b28:	2280      	movs	r2, #128	; 0x80
20000b2a:	701a      	strb	r2, [r3, #0]
        break;
20000b2c:	46c0      	nop			; (mov r8, r8)
    }
}
20000b2e:	46c0      	nop			; (mov r8, r8)
20000b30:	46bd      	mov	sp, r7
20000b32:	b002      	add	sp, #8
20000b34:	bd80      	pop	{r7, pc}
20000b36:	46c0      	nop			; (mov r8, r8)
20000b38:	20001220 	andcs	r1, r0, r0, lsr #4
20000b3c:	40020c15 	andmi	r0, r2, r5, lsl ip

20000b40 <checkColLeft>:

unsigned char checkColLeft()
{
20000b40:	b580      	push	{r7, lr}
20000b42:	b082      	sub	sp, #8
20000b44:	af00      	add	r7, sp, #0
    unsigned char input = *GPIO_D_IDR_HIGH;
20000b46:	4a0a      	ldr	r2, [pc, #40]	; (20000b70 <checkColLeft+0x30>)
20000b48:	1dfb      	adds	r3, r7, #7
20000b4a:	7812      	ldrb	r2, [r2, #0]
20000b4c:	701a      	strb	r2, [r3, #0]
    input &= 0x0F;
20000b4e:	1dfb      	adds	r3, r7, #7
20000b50:	1dfa      	adds	r2, r7, #7
20000b52:	7812      	ldrb	r2, [r2, #0]
20000b54:	210f      	movs	r1, #15
20000b56:	400a      	ands	r2, r1
20000b58:	701a      	strb	r2, [r3, #0]
    if(input == 0x01) {
20000b5a:	1dfb      	adds	r3, r7, #7
20000b5c:	781b      	ldrb	r3, [r3, #0]
20000b5e:	2b01      	cmp	r3, #1
20000b60:	d101      	bne.n	20000b66 <checkColLeft+0x26>
        return 1;
20000b62:	2301      	movs	r3, #1
20000b64:	e000      	b.n	20000b68 <checkColLeft+0x28>
    } else {
        return 0;
20000b66:	2300      	movs	r3, #0
    }
}
20000b68:	0018      	movs	r0, r3
20000b6a:	46bd      	mov	sp, r7
20000b6c:	b002      	add	sp, #8
20000b6e:	bd80      	pop	{r7, pc}
20000b70:	40020c11 	andmi	r0, r2, r1, lsl ip

20000b74 <checkColRight>:
unsigned char checkColRight()
{
20000b74:	b580      	push	{r7, lr}
20000b76:	b082      	sub	sp, #8
20000b78:	af00      	add	r7, sp, #0
    unsigned char input = *GPIO_D_IDR_HIGH;
20000b7a:	4a0a      	ldr	r2, [pc, #40]	; (20000ba4 <checkColRight+0x30>)
20000b7c:	1dfb      	adds	r3, r7, #7
20000b7e:	7812      	ldrb	r2, [r2, #0]
20000b80:	701a      	strb	r2, [r3, #0]
    input &= 0x0F;
20000b82:	1dfb      	adds	r3, r7, #7
20000b84:	1dfa      	adds	r2, r7, #7
20000b86:	7812      	ldrb	r2, [r2, #0]
20000b88:	210f      	movs	r1, #15
20000b8a:	400a      	ands	r2, r1
20000b8c:	701a      	strb	r2, [r3, #0]
    if(input == 0x08) {
20000b8e:	1dfb      	adds	r3, r7, #7
20000b90:	781b      	ldrb	r3, [r3, #0]
20000b92:	2b08      	cmp	r3, #8
20000b94:	d101      	bne.n	20000b9a <checkColRight+0x26>
        return 4;
20000b96:	2304      	movs	r3, #4
20000b98:	e000      	b.n	20000b9c <checkColRight+0x28>
    } else {
        return 0;
20000b9a:	2300      	movs	r3, #0
    }
}
20000b9c:	0018      	movs	r0, r3
20000b9e:	46bd      	mov	sp, r7
20000ba0:	b002      	add	sp, #8
20000ba2:	bd80      	pop	{r7, pc}
20000ba4:	40020c11 	andmi	r0, r2, r1, lsl ip

20000ba8 <keybL>:

unsigned char keybL(void)
{
20000ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
20000baa:	b087      	sub	sp, #28
20000bac:	af00      	add	r7, sp, #0
    unsigned char keys[] = { 0x1, 0x2, 0x3, 0xA, 0x4, 0x5, 0x6, 0xB, 0x7, 0x8, 0x9, 0xC, 0xE, 0x0, 0xF, 0xD };
20000bae:	1d3b      	adds	r3, r7, #4
20000bb0:	4a1c      	ldr	r2, [pc, #112]	; (20000c24 <keybL+0x7c>)
20000bb2:	ca13      	ldmia	r2!, {r0, r1, r4}
20000bb4:	c313      	stmia	r3!, {r0, r1, r4}
20000bb6:	6812      	ldr	r2, [r2, #0]
20000bb8:	601a      	str	r2, [r3, #0]
    for(unsigned char row = 1; row <= 4; row++) {
20000bba:	2317      	movs	r3, #23
20000bbc:	18fb      	adds	r3, r7, r3
20000bbe:	2201      	movs	r2, #1
20000bc0:	701a      	strb	r2, [r3, #0]
20000bc2:	e024      	b.n	20000c0e <keybL+0x66>
        activeRow(row);
20000bc4:	2617      	movs	r6, #23
20000bc6:	19bb      	adds	r3, r7, r6
20000bc8:	781b      	ldrb	r3, [r3, #0]
20000bca:	0018      	movs	r0, r3
20000bcc:	f7ff ff8c 	bl	20000ae8 <activeRow>
        unsigned char col = checkColLeft();
20000bd0:	2516      	movs	r5, #22
20000bd2:	197c      	adds	r4, r7, r5
20000bd4:	f7ff ffb4 	bl	20000b40 <checkColLeft>
20000bd8:	0003      	movs	r3, r0
20000bda:	7023      	strb	r3, [r4, #0]

        if(col != 0) {
20000bdc:	002c      	movs	r4, r5
20000bde:	193b      	adds	r3, r7, r4
20000be0:	781b      	ldrb	r3, [r3, #0]
20000be2:	2b00      	cmp	r3, #0
20000be4:	d00d      	beq.n	20000c02 <keybL+0x5a>
            activeRow(0);
20000be6:	2000      	movs	r0, #0
20000be8:	f7ff ff7e 	bl	20000ae8 <activeRow>
            return keys[4 * (row - 1) + (col - 1)];
20000bec:	19bb      	adds	r3, r7, r6
20000bee:	781b      	ldrb	r3, [r3, #0]
20000bf0:	3b01      	subs	r3, #1
20000bf2:	009a      	lsls	r2, r3, #2
20000bf4:	193b      	adds	r3, r7, r4
20000bf6:	781b      	ldrb	r3, [r3, #0]
20000bf8:	3b01      	subs	r3, #1
20000bfa:	18d3      	adds	r3, r2, r3
20000bfc:	1d3a      	adds	r2, r7, #4
20000bfe:	5cd3      	ldrb	r3, [r2, r3]
20000c00:	e00b      	b.n	20000c1a <keybL+0x72>
    for(unsigned char row = 1; row <= 4; row++) {
20000c02:	2117      	movs	r1, #23
20000c04:	187b      	adds	r3, r7, r1
20000c06:	781a      	ldrb	r2, [r3, #0]
20000c08:	187b      	adds	r3, r7, r1
20000c0a:	3201      	adds	r2, #1
20000c0c:	701a      	strb	r2, [r3, #0]
20000c0e:	2317      	movs	r3, #23
20000c10:	18fb      	adds	r3, r7, r3
20000c12:	781b      	ldrb	r3, [r3, #0]
20000c14:	2b04      	cmp	r3, #4
20000c16:	d9d5      	bls.n	20000bc4 <keybL+0x1c>
        }
    }
    return 0xFF;
20000c18:	23ff      	movs	r3, #255	; 0xff
}
20000c1a:	0018      	movs	r0, r3
20000c1c:	46bd      	mov	sp, r7
20000c1e:	b007      	add	sp, #28
20000c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000c22:	46c0      	nop			; (mov r8, r8)
20000c24:	20001234 	andcs	r1, r0, r4, lsr r2

20000c28 <keybR>:
unsigned char keybR(void)
{
20000c28:	b5f0      	push	{r4, r5, r6, r7, lr}
20000c2a:	b087      	sub	sp, #28
20000c2c:	af00      	add	r7, sp, #0
    unsigned char keys[] = { 0x1, 0x2, 0x3, 0xA, 0x4, 0x5, 0x6, 0xB, 0x7, 0x8, 0x9, 0xC, 0xE, 0x0, 0xF, 0xD };
20000c2e:	1d3b      	adds	r3, r7, #4
20000c30:	4a1c      	ldr	r2, [pc, #112]	; (20000ca4 <keybR+0x7c>)
20000c32:	ca13      	ldmia	r2!, {r0, r1, r4}
20000c34:	c313      	stmia	r3!, {r0, r1, r4}
20000c36:	6812      	ldr	r2, [r2, #0]
20000c38:	601a      	str	r2, [r3, #0]
    for(unsigned char row = 1; row <= 4; row++) {
20000c3a:	2317      	movs	r3, #23
20000c3c:	18fb      	adds	r3, r7, r3
20000c3e:	2201      	movs	r2, #1
20000c40:	701a      	strb	r2, [r3, #0]
20000c42:	e024      	b.n	20000c8e <keybR+0x66>
        activeRow(row);
20000c44:	2617      	movs	r6, #23
20000c46:	19bb      	adds	r3, r7, r6
20000c48:	781b      	ldrb	r3, [r3, #0]
20000c4a:	0018      	movs	r0, r3
20000c4c:	f7ff ff4c 	bl	20000ae8 <activeRow>
        unsigned char col = checkColRight();
20000c50:	2516      	movs	r5, #22
20000c52:	197c      	adds	r4, r7, r5
20000c54:	f7ff ff8e 	bl	20000b74 <checkColRight>
20000c58:	0003      	movs	r3, r0
20000c5a:	7023      	strb	r3, [r4, #0]

        if(col != 0) {
20000c5c:	002c      	movs	r4, r5
20000c5e:	193b      	adds	r3, r7, r4
20000c60:	781b      	ldrb	r3, [r3, #0]
20000c62:	2b00      	cmp	r3, #0
20000c64:	d00d      	beq.n	20000c82 <keybR+0x5a>
            activeRow(0);
20000c66:	2000      	movs	r0, #0
20000c68:	f7ff ff3e 	bl	20000ae8 <activeRow>
            return keys[4 * (row - 1) + (col - 1)];
20000c6c:	19bb      	adds	r3, r7, r6
20000c6e:	781b      	ldrb	r3, [r3, #0]
20000c70:	3b01      	subs	r3, #1
20000c72:	009a      	lsls	r2, r3, #2
20000c74:	193b      	adds	r3, r7, r4
20000c76:	781b      	ldrb	r3, [r3, #0]
20000c78:	3b01      	subs	r3, #1
20000c7a:	18d3      	adds	r3, r2, r3
20000c7c:	1d3a      	adds	r2, r7, #4
20000c7e:	5cd3      	ldrb	r3, [r2, r3]
20000c80:	e00b      	b.n	20000c9a <keybR+0x72>
    for(unsigned char row = 1; row <= 4; row++) {
20000c82:	2117      	movs	r1, #23
20000c84:	187b      	adds	r3, r7, r1
20000c86:	781a      	ldrb	r2, [r3, #0]
20000c88:	187b      	adds	r3, r7, r1
20000c8a:	3201      	adds	r2, #1
20000c8c:	701a      	strb	r2, [r3, #0]
20000c8e:	2317      	movs	r3, #23
20000c90:	18fb      	adds	r3, r7, r3
20000c92:	781b      	ldrb	r3, [r3, #0]
20000c94:	2b04      	cmp	r3, #4
20000c96:	d9d5      	bls.n	20000c44 <keybR+0x1c>
        }
    }
    return 0xFF;
20000c98:	23ff      	movs	r3, #255	; 0xff
}
20000c9a:	0018      	movs	r0, r3
20000c9c:	46bd      	mov	sp, r7
20000c9e:	b007      	add	sp, #28
20000ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000ca2:	46c0      	nop			; (mov r8, r8)
20000ca4:	20001234 	andcs	r1, r0, r4, lsr r2

20000ca8 <controllPaddleR>:
void controllPaddleR(POBJECT p)
{
20000ca8:	b5b0      	push	{r4, r5, r7, lr}
20000caa:	b084      	sub	sp, #16
20000cac:	af00      	add	r7, sp, #0
20000cae:	6078      	str	r0, [r7, #4]
    unsigned char c;
    c = keybR();
20000cb0:	250f      	movs	r5, #15
20000cb2:	197c      	adds	r4, r7, r5
20000cb4:	f7ff ffb8 	bl	20000c28 <keybR>
20000cb8:	0003      	movs	r3, r0
20000cba:	7023      	strb	r3, [r4, #0]
    switch(c) {
20000cbc:	197b      	adds	r3, r7, r5
20000cbe:	781b      	ldrb	r3, [r3, #0]
20000cc0:	2b0a      	cmp	r3, #10
20000cc2:	d002      	beq.n	20000cca <controllPaddleR+0x22>
20000cc4:	2b0c      	cmp	r3, #12
20000cc6:	d008      	beq.n	20000cda <controllPaddleR+0x32>
        break;
    case 0xC:
        p->set_speed(p, 0, 3);
        break;
    }
}
20000cc8:	e00e      	b.n	20000ce8 <controllPaddleR+0x40>
        p->set_speed(p, 0, -3);
20000cca:	687b      	ldr	r3, [r7, #4]
20000ccc:	6a1b      	ldr	r3, [r3, #32]
20000cce:	2203      	movs	r2, #3
20000cd0:	4252      	negs	r2, r2
20000cd2:	6878      	ldr	r0, [r7, #4]
20000cd4:	2100      	movs	r1, #0
20000cd6:	4798      	blx	r3
        break;
20000cd8:	e006      	b.n	20000ce8 <controllPaddleR+0x40>
        p->set_speed(p, 0, 3);
20000cda:	687b      	ldr	r3, [r7, #4]
20000cdc:	6a1b      	ldr	r3, [r3, #32]
20000cde:	6878      	ldr	r0, [r7, #4]
20000ce0:	2203      	movs	r2, #3
20000ce2:	2100      	movs	r1, #0
20000ce4:	4798      	blx	r3
        break;
20000ce6:	46c0      	nop			; (mov r8, r8)
}
20000ce8:	46c0      	nop			; (mov r8, r8)
20000cea:	46bd      	mov	sp, r7
20000cec:	b004      	add	sp, #16
20000cee:	bdb0      	pop	{r4, r5, r7, pc}

20000cf0 <controllPaddleL>:
void controllPaddleL(POBJECT p)
{
20000cf0:	b5b0      	push	{r4, r5, r7, lr}
20000cf2:	b084      	sub	sp, #16
20000cf4:	af00      	add	r7, sp, #0
20000cf6:	6078      	str	r0, [r7, #4]
    unsigned char c;
    c = keybL();
20000cf8:	250f      	movs	r5, #15
20000cfa:	197c      	adds	r4, r7, r5
20000cfc:	f7ff ff54 	bl	20000ba8 <keybL>
20000d00:	0003      	movs	r3, r0
20000d02:	7023      	strb	r3, [r4, #0]
    switch(c) {
20000d04:	197b      	adds	r3, r7, r5
20000d06:	781b      	ldrb	r3, [r3, #0]
20000d08:	2b01      	cmp	r3, #1
20000d0a:	d002      	beq.n	20000d12 <controllPaddleL+0x22>
20000d0c:	2b07      	cmp	r3, #7
20000d0e:	d008      	beq.n	20000d22 <controllPaddleL+0x32>
        break;
    case 7:
        p->set_speed(p, 0, 3);
        break;
    }
}
20000d10:	e00e      	b.n	20000d30 <controllPaddleL+0x40>
        p->set_speed(p, 0, -3);
20000d12:	687b      	ldr	r3, [r7, #4]
20000d14:	6a1b      	ldr	r3, [r3, #32]
20000d16:	2203      	movs	r2, #3
20000d18:	4252      	negs	r2, r2
20000d1a:	6878      	ldr	r0, [r7, #4]
20000d1c:	2100      	movs	r1, #0
20000d1e:	4798      	blx	r3
        break;
20000d20:	e006      	b.n	20000d30 <controllPaddleL+0x40>
        p->set_speed(p, 0, 3);
20000d22:	687b      	ldr	r3, [r7, #4]
20000d24:	6a1b      	ldr	r3, [r3, #32]
20000d26:	6878      	ldr	r0, [r7, #4]
20000d28:	2203      	movs	r2, #3
20000d2a:	2100      	movs	r1, #0
20000d2c:	4798      	blx	r3
        break;
20000d2e:	46c0      	nop			; (mov r8, r8)
}
20000d30:	46c0      	nop			; (mov r8, r8)
20000d32:	46bd      	mov	sp, r7
20000d34:	b004      	add	sp, #16
20000d36:	bdb0      	pop	{r4, r5, r7, pc}

20000d38 <resetspeed>:

void resetspeed(POBJECT pL, POBJECT pR)
{
20000d38:	b580      	push	{r7, lr}
20000d3a:	b082      	sub	sp, #8
20000d3c:	af00      	add	r7, sp, #0
20000d3e:	6078      	str	r0, [r7, #4]
20000d40:	6039      	str	r1, [r7, #0]
    pL->set_speed(pL, 0, 0);
20000d42:	687b      	ldr	r3, [r7, #4]
20000d44:	6a1b      	ldr	r3, [r3, #32]
20000d46:	6878      	ldr	r0, [r7, #4]
20000d48:	2200      	movs	r2, #0
20000d4a:	2100      	movs	r1, #0
20000d4c:	4798      	blx	r3
    pR->set_speed(pR, 0, 0);
20000d4e:	683b      	ldr	r3, [r7, #0]
20000d50:	6a1b      	ldr	r3, [r3, #32]
20000d52:	6838      	ldr	r0, [r7, #0]
20000d54:	2200      	movs	r2, #0
20000d56:	2100      	movs	r1, #0
20000d58:	4798      	blx	r3
}
20000d5a:	46c0      	nop			; (mov r8, r8)
20000d5c:	46bd      	mov	sp, r7
20000d5e:	b002      	add	sp, #8
20000d60:	bd80      	pop	{r7, pc}

20000d62 <ballPaddeIntersect>:
void ballPaddeIntersect(POBJECT ball, POBJECT paddle)
{
20000d62:	b580      	push	{r7, lr}
20000d64:	b082      	sub	sp, #8
20000d66:	af00      	add	r7, sp, #0
20000d68:	6078      	str	r0, [r7, #4]
20000d6a:	6039      	str	r1, [r7, #0]

    if(((ball->posx <= paddle->posx + paddle->geo->sizeX) || (ball->posx + ball->geo->sizeX >= paddle->posx)) &&
20000d6c:	687b      	ldr	r3, [r7, #4]
20000d6e:	68da      	ldr	r2, [r3, #12]
20000d70:	683b      	ldr	r3, [r7, #0]
20000d72:	68d9      	ldr	r1, [r3, #12]
20000d74:	683b      	ldr	r3, [r7, #0]
20000d76:	681b      	ldr	r3, [r3, #0]
20000d78:	685b      	ldr	r3, [r3, #4]
20000d7a:	18cb      	adds	r3, r1, r3
20000d7c:	429a      	cmp	r2, r3
20000d7e:	dd09      	ble.n	20000d94 <ballPaddeIntersect+0x32>
20000d80:	687b      	ldr	r3, [r7, #4]
20000d82:	68da      	ldr	r2, [r3, #12]
20000d84:	687b      	ldr	r3, [r7, #4]
20000d86:	681b      	ldr	r3, [r3, #0]
20000d88:	685b      	ldr	r3, [r3, #4]
20000d8a:	18d2      	adds	r2, r2, r3
20000d8c:	683b      	ldr	r3, [r7, #0]
20000d8e:	68db      	ldr	r3, [r3, #12]
20000d90:	429a      	cmp	r2, r3
20000d92:	db14      	blt.n	20000dbe <ballPaddeIntersect+0x5c>
        (ball->posy > paddle->posy) && (ball->posy < paddle->posy + paddle->geo->sizeY)) {
20000d94:	687b      	ldr	r3, [r7, #4]
20000d96:	691a      	ldr	r2, [r3, #16]
20000d98:	683b      	ldr	r3, [r7, #0]
20000d9a:	691b      	ldr	r3, [r3, #16]
    if(((ball->posx <= paddle->posx + paddle->geo->sizeX) || (ball->posx + ball->geo->sizeX >= paddle->posx)) &&
20000d9c:	429a      	cmp	r2, r3
20000d9e:	dd0e      	ble.n	20000dbe <ballPaddeIntersect+0x5c>
        (ball->posy > paddle->posy) && (ball->posy < paddle->posy + paddle->geo->sizeY)) {
20000da0:	687b      	ldr	r3, [r7, #4]
20000da2:	691a      	ldr	r2, [r3, #16]
20000da4:	683b      	ldr	r3, [r7, #0]
20000da6:	6919      	ldr	r1, [r3, #16]
20000da8:	683b      	ldr	r3, [r7, #0]
20000daa:	681b      	ldr	r3, [r3, #0]
20000dac:	689b      	ldr	r3, [r3, #8]
20000dae:	18cb      	adds	r3, r1, r3
20000db0:	429a      	cmp	r2, r3
20000db2:	da04      	bge.n	20000dbe <ballPaddeIntersect+0x5c>

        ball->dirx = -ball->dirx;
20000db4:	687b      	ldr	r3, [r7, #4]
20000db6:	685b      	ldr	r3, [r3, #4]
20000db8:	425a      	negs	r2, r3
20000dba:	687b      	ldr	r3, [r7, #4]
20000dbc:	605a      	str	r2, [r3, #4]
    }
}
20000dbe:	46c0      	nop			; (mov r8, r8)
20000dc0:	46bd      	mov	sp, r7
20000dc2:	b002      	add	sp, #8
20000dc4:	bd80      	pop	{r7, pc}

20000dc6 <show_result>:

void show_result(void)
{
20000dc6:	b590      	push	{r4, r7, lr}
20000dc8:	b087      	sub	sp, #28
20000dca:	af00      	add	r7, sp, #0
    ascii_clear_screen(); 
20000dcc:	f7ff faac 	bl	20000328 <ascii_clear_screen>
    char pL[] = "PL: ";
20000dd0:	240c      	movs	r4, #12
20000dd2:	193b      	adds	r3, r7, r4
20000dd4:	4a20      	ldr	r2, [pc, #128]	; (20000e58 <show_result+0x92>)
20000dd6:	6811      	ldr	r1, [r2, #0]
20000dd8:	6019      	str	r1, [r3, #0]
20000dda:	7912      	ldrb	r2, [r2, #4]
20000ddc:	711a      	strb	r2, [r3, #4]
    char pR[] = "PR: ";
20000dde:	1d3b      	adds	r3, r7, #4
20000de0:	4a1e      	ldr	r2, [pc, #120]	; (20000e5c <show_result+0x96>)
20000de2:	6811      	ldr	r1, [r2, #0]
20000de4:	6019      	str	r1, [r3, #0]
20000de6:	7912      	ldrb	r2, [r2, #4]
20000de8:	711a      	strb	r2, [r3, #4]
    char* s;
    
    ascii_gotoxy(1, 1);
20000dea:	2101      	movs	r1, #1
20000dec:	2001      	movs	r0, #1
20000dee:	f7ff fa7c 	bl	200002ea <ascii_gotoxy>
    s = pL;
20000df2:	193b      	adds	r3, r7, r4
20000df4:	617b      	str	r3, [r7, #20]
    while(*s)
20000df6:	e006      	b.n	20000e06 <show_result+0x40>
    ascii_write_char(*s++);
20000df8:	697b      	ldr	r3, [r7, #20]
20000dfa:	1c5a      	adds	r2, r3, #1
20000dfc:	617a      	str	r2, [r7, #20]
20000dfe:	781b      	ldrb	r3, [r3, #0]
20000e00:	0018      	movs	r0, r3
20000e02:	f7ff fa5c 	bl	200002be <ascii_write_char>
    while(*s)
20000e06:	697b      	ldr	r3, [r7, #20]
20000e08:	781b      	ldrb	r3, [r3, #0]
20000e0a:	2b00      	cmp	r3, #0
20000e0c:	d1f4      	bne.n	20000df8 <show_result+0x32>
    ascii_write_char(L + '0');
20000e0e:	4b14      	ldr	r3, [pc, #80]	; (20000e60 <show_result+0x9a>)
20000e10:	781b      	ldrb	r3, [r3, #0]
20000e12:	3330      	adds	r3, #48	; 0x30
20000e14:	b2db      	uxtb	r3, r3
20000e16:	0018      	movs	r0, r3
20000e18:	f7ff fa51 	bl	200002be <ascii_write_char>
        ascii_gotoxy(1, 2);
20000e1c:	2102      	movs	r1, #2
20000e1e:	2001      	movs	r0, #1
20000e20:	f7ff fa63 	bl	200002ea <ascii_gotoxy>

    s = pR;
20000e24:	1d3b      	adds	r3, r7, #4
20000e26:	617b      	str	r3, [r7, #20]
    while(*s)
20000e28:	e006      	b.n	20000e38 <show_result+0x72>
        ascii_write_char(*s++);
20000e2a:	697b      	ldr	r3, [r7, #20]
20000e2c:	1c5a      	adds	r2, r3, #1
20000e2e:	617a      	str	r2, [r7, #20]
20000e30:	781b      	ldrb	r3, [r3, #0]
20000e32:	0018      	movs	r0, r3
20000e34:	f7ff fa43 	bl	200002be <ascii_write_char>
    while(*s)
20000e38:	697b      	ldr	r3, [r7, #20]
20000e3a:	781b      	ldrb	r3, [r3, #0]
20000e3c:	2b00      	cmp	r3, #0
20000e3e:	d1f4      	bne.n	20000e2a <show_result+0x64>
    ascii_write_char(R + '0');
20000e40:	4b08      	ldr	r3, [pc, #32]	; (20000e64 <show_result+0x9e>)
20000e42:	781b      	ldrb	r3, [r3, #0]
20000e44:	3330      	adds	r3, #48	; 0x30
20000e46:	b2db      	uxtb	r3, r3
20000e48:	0018      	movs	r0, r3
20000e4a:	f7ff fa38 	bl	200002be <ascii_write_char>
    
}
20000e4e:	46c0      	nop			; (mov r8, r8)
20000e50:	46bd      	mov	sp, r7
20000e52:	b007      	add	sp, #28
20000e54:	bd90      	pop	{r4, r7, pc}
20000e56:	46c0      	nop			; (mov r8, r8)
20000e58:	20001244 	andcs	r1, r0, r4, asr #4
20000e5c:	2000124c 	andcs	r1, r0, ip, asr #4
20000e60:	200010cc 	andcs	r1, r0, ip, asr #1
20000e64:	200010cd 	andcs	r1, r0, sp, asr #1

20000e68 <ascii_init>:
void ascii_init(void)
{
20000e68:	b580      	push	{r7, lr}
20000e6a:	af00      	add	r7, sp, #0
	while((ascii_read_status() & 0x80) == 0x80){}
20000e6c:	46c0      	nop			; (mov r8, r8)
20000e6e:	f7ff f9a1 	bl	200001b4 <ascii_read_status>
20000e72:	0003      	movs	r3, r0
20000e74:	001a      	movs	r2, r3
20000e76:	2380      	movs	r3, #128	; 0x80
20000e78:	4013      	ands	r3, r2
20000e7a:	2b80      	cmp	r3, #128	; 0x80
20000e7c:	d0f7      	beq.n	20000e6e <ascii_init+0x6>
		delay_micro(8);
20000e7e:	2008      	movs	r0, #8
20000e80:	f7ff f8e8 	bl	20000054 <delay_micro>
		ascii_write_cmd(0x38);
20000e84:	2038      	movs	r0, #56	; 0x38
20000e86:	f7ff f9d5 	bl	20000234 <ascii_write_cmd>
		delay_micro(39);
20000e8a:	2027      	movs	r0, #39	; 0x27
20000e8c:	f7ff f8e2 	bl	20000054 <delay_micro>
		ascii_write_cmd(0x0E);
20000e90:	200e      	movs	r0, #14
20000e92:	f7ff f9cf 	bl	20000234 <ascii_write_cmd>
		delay_micro(39);
20000e96:	2027      	movs	r0, #39	; 0x27
20000e98:	f7ff f8dc 	bl	20000054 <delay_micro>
		ascii_write_cmd(0x06);
20000e9c:	2006      	movs	r0, #6
20000e9e:	f7ff f9c9 	bl	20000234 <ascii_write_cmd>
		delay_micro(39);
20000ea2:	2027      	movs	r0, #39	; 0x27
20000ea4:	f7ff f8d6 	bl	20000054 <delay_micro>
}
20000ea8:	46c0      	nop			; (mov r8, r8)
20000eaa:	46bd      	mov	sp, r7
20000eac:	bd80      	pop	{r7, pc}

20000eae <init_app>:
void init_app(void)
{
20000eae:	b580      	push	{r7, lr}
20000eb0:	af00      	add	r7, sp, #0
#ifdef USBDM
    *((unsigned long*)0x40023830) = 0x18;
20000eb2:	4b0a      	ldr	r3, [pc, #40]	; (20000edc <init_app+0x2e>)
20000eb4:	2218      	movs	r2, #24
20000eb6:	601a      	str	r2, [r3, #0]
    __asm volatile(" LDR R0,=0x08000209\n BLX R0 \n");
20000eb8:	4883      	ldr	r0, [pc, #524]	; (200010c8 <main+0xc0>)
20000eba:	4780      	blx	r0
#endif
    *GPIO_MODER = 0x55555555; // display
20000ebc:	4b08      	ldr	r3, [pc, #32]	; (20000ee0 <init_app+0x32>)
20000ebe:	4a09      	ldr	r2, [pc, #36]	; (20000ee4 <init_app+0x36>)
20000ec0:	601a      	str	r2, [r3, #0]

    *GPIO_D_MODER = 0x55005555;
20000ec2:	4b09      	ldr	r3, [pc, #36]	; (20000ee8 <init_app+0x3a>)
20000ec4:	4a09      	ldr	r2, [pc, #36]	; (20000eec <init_app+0x3e>)
20000ec6:	601a      	str	r2, [r3, #0]
    *GPIO_D_OTYPER = 0x0000;
20000ec8:	4b09      	ldr	r3, [pc, #36]	; (20000ef0 <init_app+0x42>)
20000eca:	2200      	movs	r2, #0
20000ecc:	801a      	strh	r2, [r3, #0]
    *GPIO_D_PUPDR = 0x55AA55AA;
20000ece:	4b09      	ldr	r3, [pc, #36]	; (20000ef4 <init_app+0x46>)
20000ed0:	4a09      	ldr	r2, [pc, #36]	; (20000ef8 <init_app+0x4a>)
20000ed2:	601a      	str	r2, [r3, #0]
}
20000ed4:	46c0      	nop			; (mov r8, r8)
20000ed6:	46bd      	mov	sp, r7
20000ed8:	bd80      	pop	{r7, pc}
20000eda:	46c0      	nop			; (mov r8, r8)
20000edc:	40023830 	andmi	r3, r2, r0, lsr r8
20000ee0:	40021000 	andmi	r1, r2, r0
20000ee4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000ee8:	40020c00 	andmi	r0, r2, r0, lsl #24
20000eec:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
20000ef0:	40020c04 	andmi	r0, r2, r4, lsl #24
20000ef4:	40020c0c 	andmi	r0, r2, ip, lsl #24
20000ef8:	55aa55aa 	strpl	r5, [sl, #1450]!	; 0x5aa

20000efc <checkRestartKey>:
unsigned char checkRestartKey()
{
20000efc:	b580      	push	{r7, lr}
20000efe:	b082      	sub	sp, #8
20000f00:	af00      	add	r7, sp, #0
    unsigned char input = *GPIO_D_IDR_HIGH;
20000f02:	4a0a      	ldr	r2, [pc, #40]	; (20000f2c <checkRestartKey+0x30>)
20000f04:	1dfb      	adds	r3, r7, #7
20000f06:	7812      	ldrb	r2, [r2, #0]
20000f08:	701a      	strb	r2, [r3, #0]
    input &= 0x0F;
20000f0a:	1dfb      	adds	r3, r7, #7
20000f0c:	1dfa      	adds	r2, r7, #7
20000f0e:	7812      	ldrb	r2, [r2, #0]
20000f10:	210f      	movs	r1, #15
20000f12:	400a      	ands	r2, r1
20000f14:	701a      	strb	r2, [r3, #0]
    if(input == 0x02) {
20000f16:	1dfb      	adds	r3, r7, #7
20000f18:	781b      	ldrb	r3, [r3, #0]
20000f1a:	2b02      	cmp	r3, #2
20000f1c:	d101      	bne.n	20000f22 <checkRestartKey+0x26>
        return 2;
20000f1e:	2302      	movs	r3, #2
20000f20:	e000      	b.n	20000f24 <checkRestartKey+0x28>
    } else {
        return 0;
20000f22:	2300      	movs	r3, #0
    }
}
20000f24:	0018      	movs	r0, r3
20000f26:	46bd      	mov	sp, r7
20000f28:	b002      	add	sp, #8
20000f2a:	bd80      	pop	{r7, pc}
20000f2c:	40020c11 	andmi	r0, r2, r1, lsl ip

20000f30 <keybRestart>:

unsigned char keybRestart(){
20000f30:	b5f0      	push	{r4, r5, r6, r7, lr}
20000f32:	b087      	sub	sp, #28
20000f34:	af00      	add	r7, sp, #0
     unsigned char keys[] = { 0x1, 0x2, 0x3, 0xA, 0x4, 0x5, 0x6, 0xB, 0x7, 0x8, 0x9, 0xC, 0xE, 0x0, 0xF, 0xD };
20000f36:	1d3b      	adds	r3, r7, #4
20000f38:	4a1b      	ldr	r2, [pc, #108]	; (20000fa8 <keybRestart+0x78>)
20000f3a:	ca13      	ldmia	r2!, {r0, r1, r4}
20000f3c:	c313      	stmia	r3!, {r0, r1, r4}
20000f3e:	6812      	ldr	r2, [r2, #0]
20000f40:	601a      	str	r2, [r3, #0]
    for(unsigned char row = 1; row <= 4; row++) {
20000f42:	2317      	movs	r3, #23
20000f44:	18fb      	adds	r3, r7, r3
20000f46:	2201      	movs	r2, #1
20000f48:	701a      	strb	r2, [r3, #0]
20000f4a:	e024      	b.n	20000f96 <keybRestart+0x66>
        activeRow(row);
20000f4c:	2617      	movs	r6, #23
20000f4e:	19bb      	adds	r3, r7, r6
20000f50:	781b      	ldrb	r3, [r3, #0]
20000f52:	0018      	movs	r0, r3
20000f54:	f7ff fdc8 	bl	20000ae8 <activeRow>
        unsigned char col = checkRestartKey();
20000f58:	2516      	movs	r5, #22
20000f5a:	197c      	adds	r4, r7, r5
20000f5c:	f7ff ffce 	bl	20000efc <checkRestartKey>
20000f60:	0003      	movs	r3, r0
20000f62:	7023      	strb	r3, [r4, #0]

        if(col != 0) {
20000f64:	002c      	movs	r4, r5
20000f66:	193b      	adds	r3, r7, r4
20000f68:	781b      	ldrb	r3, [r3, #0]
20000f6a:	2b00      	cmp	r3, #0
20000f6c:	d00d      	beq.n	20000f8a <keybRestart+0x5a>
            activeRow(0);
20000f6e:	2000      	movs	r0, #0
20000f70:	f7ff fdba 	bl	20000ae8 <activeRow>
            return keys[4 * (row - 1) + (col - 1)];
20000f74:	19bb      	adds	r3, r7, r6
20000f76:	781b      	ldrb	r3, [r3, #0]
20000f78:	3b01      	subs	r3, #1
20000f7a:	009a      	lsls	r2, r3, #2
20000f7c:	193b      	adds	r3, r7, r4
20000f7e:	781b      	ldrb	r3, [r3, #0]
20000f80:	3b01      	subs	r3, #1
20000f82:	18d3      	adds	r3, r2, r3
20000f84:	1d3a      	adds	r2, r7, #4
20000f86:	5cd3      	ldrb	r3, [r2, r3]
20000f88:	e00a      	b.n	20000fa0 <keybRestart+0x70>
    for(unsigned char row = 1; row <= 4; row++) {
20000f8a:	2117      	movs	r1, #23
20000f8c:	187b      	adds	r3, r7, r1
20000f8e:	781a      	ldrb	r2, [r3, #0]
20000f90:	187b      	adds	r3, r7, r1
20000f92:	3201      	adds	r2, #1
20000f94:	701a      	strb	r2, [r3, #0]
20000f96:	2317      	movs	r3, #23
20000f98:	18fb      	adds	r3, r7, r3
20000f9a:	781b      	ldrb	r3, [r3, #0]
20000f9c:	2b04      	cmp	r3, #4
20000f9e:	d9d5      	bls.n	20000f4c <keybRestart+0x1c>
        }
    }
}
20000fa0:	0018      	movs	r0, r3
20000fa2:	46bd      	mov	sp, r7
20000fa4:	b007      	add	sp, #28
20000fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000fa8:	20001234 	andcs	r1, r0, r4, lsr r2

20000fac <restart>:

void restart(POBJECT b) {
20000fac:	b5b0      	push	{r4, r5, r7, lr}
20000fae:	b084      	sub	sp, #16
20000fb0:	af00      	add	r7, sp, #0
20000fb2:	6078      	str	r0, [r7, #4]
     unsigned char c=4;
20000fb4:	250f      	movs	r5, #15
20000fb6:	197b      	adds	r3, r7, r5
20000fb8:	2204      	movs	r2, #4
20000fba:	701a      	strb	r2, [r3, #0]
    c = keybRestart();
20000fbc:	197c      	adds	r4, r7, r5
20000fbe:	f7ff ffb7 	bl	20000f30 <keybRestart>
20000fc2:	0003      	movs	r3, r0
20000fc4:	7023      	strb	r3, [r4, #0]
    if(c==0){
20000fc6:	197b      	adds	r3, r7, r5
20000fc8:	781b      	ldrb	r3, [r3, #0]
20000fca:	2b00      	cmp	r3, #0
20000fcc:	d114      	bne.n	20000ff8 <restart+0x4c>
        b->set_speed(b, 3, -3);
20000fce:	687b      	ldr	r3, [r7, #4]
20000fd0:	6a1b      	ldr	r3, [r3, #32]
20000fd2:	2203      	movs	r2, #3
20000fd4:	4252      	negs	r2, r2
20000fd6:	6878      	ldr	r0, [r7, #4]
20000fd8:	2103      	movs	r1, #3
20000fda:	4798      	blx	r3
        b->posx=128/2;
20000fdc:	687b      	ldr	r3, [r7, #4]
20000fde:	2240      	movs	r2, #64	; 0x40
20000fe0:	60da      	str	r2, [r3, #12]
        b->posy=64/2;
20000fe2:	687b      	ldr	r3, [r7, #4]
20000fe4:	2220      	movs	r2, #32
20000fe6:	611a      	str	r2, [r3, #16]
        L = 0; 
20000fe8:	4b05      	ldr	r3, [pc, #20]	; (20001000 <restart+0x54>)
20000fea:	2200      	movs	r2, #0
20000fec:	701a      	strb	r2, [r3, #0]
        R = 0; 
20000fee:	4b05      	ldr	r3, [pc, #20]	; (20001004 <restart+0x58>)
20000ff0:	2200      	movs	r2, #0
20000ff2:	701a      	strb	r2, [r3, #0]
        
        graphic_clear_screen(); 
20000ff4:	f7ff fb56 	bl	200006a4 <graphic_clear_screen>
    }
        
    }
20000ff8:	46c0      	nop			; (mov r8, r8)
20000ffa:	46bd      	mov	sp, r7
20000ffc:	b004      	add	sp, #16
20000ffe:	bdb0      	pop	{r4, r5, r7, pc}
20001000:	200010cc 	andcs	r1, r0, ip, asr #1
20001004:	200010cd 	andcs	r1, r0, sp, asr #1

20001008 <main>:


// ################################################################## MAIN
int main(int argc, char** argv)
{
20001008:	b580      	push	{r7, lr}
2000100a:	b086      	sub	sp, #24
2000100c:	af00      	add	r7, sp, #0
2000100e:	6078      	str	r0, [r7, #4]
20001010:	6039      	str	r1, [r7, #0]
    POBJECT b = &ball;
20001012:	4b2a      	ldr	r3, [pc, #168]	; (200010bc <main+0xb4>)
20001014:	617b      	str	r3, [r7, #20]
    POBJECT pL = &paddleLeft;
20001016:	4b2a      	ldr	r3, [pc, #168]	; (200010c0 <main+0xb8>)
20001018:	613b      	str	r3, [r7, #16]
    POBJECT pR = &paddleRight;
2000101a:	4b2a      	ldr	r3, [pc, #168]	; (200010c4 <main+0xbc>)
2000101c:	60fb      	str	r3, [r7, #12]

    init_app();
2000101e:	f7ff ff46 	bl	20000eae <init_app>
    ascii_init();
20001022:	f7ff ff21 	bl	20000e68 <ascii_init>
    graphic_initialize();
20001026:	f7ff fb71 	bl	2000070c <graphic_initialize>
    graphic_clear_screen();
2000102a:	f7ff fb3b 	bl	200006a4 <graphic_clear_screen>

    while(1) {
        restart(b);
2000102e:	697b      	ldr	r3, [r7, #20]
20001030:	0018      	movs	r0, r3
20001032:	f7ff ffbb 	bl	20000fac <restart>
        b->move(b);
20001036:	697b      	ldr	r3, [r7, #20]
20001038:	69db      	ldr	r3, [r3, #28]
2000103a:	697a      	ldr	r2, [r7, #20]
2000103c:	0010      	movs	r0, r2
2000103e:	4798      	blx	r3
        delay_milli(40);
20001040:	2028      	movs	r0, #40	; 0x28
20001042:	f7ff f822 	bl	2000008a <delay_milli>
        pL->move(pL);
20001046:	693b      	ldr	r3, [r7, #16]
20001048:	69db      	ldr	r3, [r3, #28]
2000104a:	693a      	ldr	r2, [r7, #16]
2000104c:	0010      	movs	r0, r2
2000104e:	4798      	blx	r3
        delay_milli(40);
20001050:	2028      	movs	r0, #40	; 0x28
20001052:	f7ff f81a 	bl	2000008a <delay_milli>
        pR->move(pR);
20001056:	68fb      	ldr	r3, [r7, #12]
20001058:	69db      	ldr	r3, [r3, #28]
2000105a:	68fa      	ldr	r2, [r7, #12]
2000105c:	0010      	movs	r0, r2
2000105e:	4798      	blx	r3
        resetspeed(pL, pR);
20001060:	68fa      	ldr	r2, [r7, #12]
20001062:	693b      	ldr	r3, [r7, #16]
20001064:	0011      	movs	r1, r2
20001066:	0018      	movs	r0, r3
20001068:	f7ff fe66 	bl	20000d38 <resetspeed>
        show_result (); 
2000106c:	f7ff feab 	bl	20000dc6 <show_result>
        controllPaddleL(pL);
20001070:	693b      	ldr	r3, [r7, #16]
20001072:	0018      	movs	r0, r3
20001074:	f7ff fe3c 	bl	20000cf0 <controllPaddleL>
        controllPaddleR(pR);
20001078:	68fb      	ldr	r3, [r7, #12]
2000107a:	0018      	movs	r0, r3
2000107c:	f7ff fe14 	bl	20000ca8 <controllPaddleR>
        

        if(b->posx <= 10 && b->dirx < 0) {
20001080:	697b      	ldr	r3, [r7, #20]
20001082:	68db      	ldr	r3, [r3, #12]
20001084:	2b0a      	cmp	r3, #10
20001086:	dc0a      	bgt.n	2000109e <main+0x96>
20001088:	697b      	ldr	r3, [r7, #20]
2000108a:	685b      	ldr	r3, [r3, #4]
2000108c:	2b00      	cmp	r3, #0
2000108e:	da06      	bge.n	2000109e <main+0x96>
            ballPaddeIntersect(b, pL);
20001090:	693a      	ldr	r2, [r7, #16]
20001092:	697b      	ldr	r3, [r7, #20]
20001094:	0011      	movs	r1, r2
20001096:	0018      	movs	r0, r3
20001098:	f7ff fe63 	bl	20000d62 <ballPaddeIntersect>
2000109c:	e00d      	b.n	200010ba <main+0xb2>
        } else if(b->posx >= 118 && b->dirx > 0) {
2000109e:	697b      	ldr	r3, [r7, #20]
200010a0:	68db      	ldr	r3, [r3, #12]
200010a2:	2b75      	cmp	r3, #117	; 0x75
200010a4:	ddc3      	ble.n	2000102e <main+0x26>
200010a6:	697b      	ldr	r3, [r7, #20]
200010a8:	685b      	ldr	r3, [r3, #4]
200010aa:	2b00      	cmp	r3, #0
200010ac:	ddbf      	ble.n	2000102e <main+0x26>
            ballPaddeIntersect(b, pR);
200010ae:	68fa      	ldr	r2, [r7, #12]
200010b0:	697b      	ldr	r3, [r7, #20]
200010b2:	0011      	movs	r1, r2
200010b4:	0018      	movs	r0, r3
200010b6:	f7ff fe54 	bl	20000d62 <ballPaddeIntersect>
        restart(b);
200010ba:	e7b8      	b.n	2000102e <main+0x26>
200010bc:	20001160 	andcs	r1, r0, r0, ror #2
200010c0:	20001184 	andcs	r1, r0, r4, lsl #3
200010c4:	200011a8 	andcs	r1, r0, r8, lsr #3
200010c8:	08000209 	stmdaeq	r0, {r0, r3, r9}

200010cc <L>:
	...

200010cd <R>:
200010cd:	 	stceq	0, cr0, [r0], {-0}

200010d0 <ball_geometry>:
200010d0:	0000000c 	andeq	r0, r0, ip
200010d4:	00000004 	andeq	r0, r0, r4
200010d8:	00000004 	andeq	r0, r0, r4
200010dc:	02000100 	andeq	r0, r0, #0, 2
200010e0:	01010001 	tsteq	r1, r1
200010e4:	03010201 	movweq	r0, #4609	; 0x1201
200010e8:	01020002 	tsteq	r2, r2
200010ec:	03020202 	movweq	r0, #8706	; 0x2202
200010f0:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20001118 <paddle_geometry>:
20001118:	0000001e 	andeq	r0, r0, lr, lsl r0
2000111c:	00000002 	andeq	r0, r0, r2
20001120:	0000000f 	andeq	r0, r0, pc
20001124:	02000100 	andeq	r0, r0, #0, 2
20001128:	04000300 	streq	r0, [r0], #-768	; 0xfffffd00
2000112c:	06000500 	streq	r0, [r0], -r0, lsl #10
20001130:	08000700 	stmdaeq	r0, {r8, r9, sl}
20001134:	0a000900 	beq	2000353c <pr_win_msg+0x2364>
20001138:	0c000b00 			; <UNDEFINED> instruction: 0x0c000b00
2000113c:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}
20001140:	01010001 	tsteq	r1, r1
20001144:	03010201 	movweq	r0, #4609	; 0x1201
20001148:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
2000114c:	07010601 	streq	r0, [r1, -r1, lsl #12]
20001150:	09010801 	stmdbeq	r1, {r0, fp}
20001154:	0b010a01 	bleq	20043960 <pr_win_msg+0x42788>
20001158:	0d010c01 	stceq	12, cr0, [r1, #-4]
2000115c:	00000e01 	andeq	r0, r0, r1, lsl #28

20001160 <ball>:
20001160:	200010d0 	ldrdcs	r1, [r0], -r0
20001164:	00000003 	andeq	r0, r0, r3
20001168:	fffffffd 			; <UNDEFINED> instruction: 0xfffffffd
2000116c:	00000040 	andeq	r0, r0, r0, asr #32
20001170:	00000020 	andeq	r0, r0, r0, lsr #32
20001174:	20000921 	andcs	r0, r0, r1, lsr #18
20001178:	20000979 	andcs	r0, r0, r9, ror r9
2000117c:	200009d1 	ldrdcs	r0, [r0], -r1
20001180:	20000901 	andcs	r0, r0, r1, lsl #18

20001184 <paddleLeft>:
20001184:	20001118 	andcs	r1, r0, r8, lsl r1
	...
20001190:	00000005 	andeq	r0, r0, r5
20001194:	0000001b 	andeq	r0, r0, fp, lsl r0
20001198:	20000921 	andcs	r0, r0, r1, lsr #18
2000119c:	20000979 	andcs	r0, r0, r9, ror r9
200011a0:	200009d1 	ldrdcs	r0, [r0], -r1
200011a4:	20000901 	andcs	r0, r0, r1, lsl #18

200011a8 <paddleRight>:
200011a8:	20001118 	andcs	r1, r0, r8, lsl r1
	...
200011b4:	0000007b 	andeq	r0, r0, fp, ror r0
200011b8:	0000001b 	andeq	r0, r0, fp, lsl r0
200011bc:	20000921 	andcs	r0, r0, r1, lsr #18
200011c0:	20000979 	andcs	r0, r0, r9, ror r9
200011c4:	200009d1 	ldrdcs	r0, [r0], -r1
200011c8:	20000901 	andcs	r0, r0, r1, lsl #18

200011cc <pl_win_msg>:
200011cc:	77204c50 			; <UNDEFINED> instruction: 0x77204c50
200011d0:	21736e69 	cmncs	r3, r9, ror #28
200011d4:	00000000 	andeq	r0, r0, r0

200011d8 <pr_win_msg>:
200011d8:	77205250 			; <UNDEFINED> instruction: 0x77205250
200011dc:	21736e69 	cmncs	r3, r9, ror #28
200011e0:	00000000 	andeq	r0, r0, r0
200011e4:	20202020 	eorcs	r2, r0, r0, lsr #32
200011e8:	20202020 	eorcs	r2, r0, r0, lsr #32
200011ec:	20202020 	eorcs	r2, r0, r0, lsr #32
200011f0:	20202020 	eorcs	r2, r0, r0, lsr #32
200011f4:	20202020 	eorcs	r2, r0, r0, lsr #32
200011f8:	20202020 	eorcs	r2, r0, r0, lsr #32
200011fc:	00000020 	andeq	r0, r0, r0, lsr #32
20001200:	200007c4 	andcs	r0, r0, r4, asr #15
20001204:	200007ce 	andcs	r0, r0, lr, asr #15
20001208:	200007d8 	ldrdcs	r0, [r0], -r8
2000120c:	200007e2 	andcs	r0, r0, r2, ror #15
20001210:	200007ec 	andcs	r0, r0, ip, ror #15
20001214:	200007f6 	strdcs	r0, [r0], -r6
20001218:	20000800 	andcs	r0, r0, r0, lsl #16
2000121c:	2000080a 	andcs	r0, r0, sl, lsl #16
20001220:	20000b06 	andcs	r0, r0, r6, lsl #22
20001224:	20000b0e 	andcs	r0, r0, lr, lsl #22
20001228:	20000b16 	andcs	r0, r0, r6, lsl fp
2000122c:	20000b1e 	andcs	r0, r0, lr, lsl fp
20001230:	20000b26 	andcs	r0, r0, r6, lsr #22
20001234:	0a030201 	beq	200c1a40 <pr_win_msg+0xc0868>
20001238:	0b060504 	bleq	20182650 <pr_win_msg+0x181478>
2000123c:	0c090807 	stceq	8, cr0, [r9], {7}
20001240:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20001210 <pr_win_msg+0x38>
20001244:	203a4c50 	eorscs	r4, sl, r0, asr ip
20001248:	00000000 	andeq	r0, r0, r0
2000124c:	203a5250 	eorscs	r5, sl, r0, asr r2
20001250:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000c9e 	muleq	r0, lr, ip
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000020f 	andeq	r0, r0, pc, lsl #4
  10:	0003c80c 	andeq	ip, r3, ip, lsl #16
  14:	00017d00 	andeq	r7, r1, r0, lsl #26
	...
  24:	00f80200 	rscseq	r0, r8, r0, lsl #4
  28:	42010000 	andmi	r0, r1, #0
  2c:	00003117 	andeq	r3, r0, r7, lsl r1
  30:	08010300 	stmdaeq	r1, {r8, r9}
  34:	00000201 	andeq	r0, r0, r1, lsl #4
  38:	00029e04 	andeq	r9, r2, r4, lsl #28
  3c:	46010200 	strmi	r0, [r1], -r0, lsl #4
  40:	00005c10 	andeq	r5, r0, r0, lsl ip
  44:	00780500 	rsbseq	r0, r8, r0, lsl #10
  48:	31134701 	tstcc	r3, r1, lsl #14
  4c:	00000000 	andeq	r0, r0, r0
  50:	01007905 	tsteq	r0, r5, lsl #18
  54:	00311348 	eorseq	r1, r1, r8, asr #6
  58:	00010000 	andeq	r0, r1, r0
  5c:	00014002 	andeq	r4, r1, r2
  60:	03490100 	movteq	r0, #37120	; 0x9100
  64:	00000038 	andeq	r0, r0, r8, lsr r0
  68:	01004c06 	tsteq	r0, r6, lsl #24
  6c:	00310f4c 	eorseq	r0, r1, ip, asr #30
  70:	03050000 	movweq	r0, #20480	; 0x5000
  74:	200010cc 	andcs	r1, r0, ip, asr #1
  78:	01005206 	tsteq	r0, r6, lsl #4
  7c:	00310f4d 	eorseq	r0, r1, sp, asr #30
  80:	03050000 	movweq	r0, #20480	; 0x5000
  84:	200010cd 	andcs	r1, r0, sp, asr #1
  88:	0000ab07 	andeq	sl, r0, r7, lsl #22
  8c:	00009800 	andeq	r9, r0, r0, lsl #16
  90:	009d0800 	addseq	r0, sp, r0, lsl #16
  94:	00080000 	andeq	r0, r8, r0
  98:	00008809 	andeq	r8, r0, r9, lsl #16
  9c:	07040300 	streq	r0, [r4, -r0, lsl #6]
  a0:	000002d9 	ldrdeq	r0, [r0], -r9
  a4:	0a080103 	beq	2004b8 <startup-0x1fdffb48>
  a8:	09000002 	stmdbeq	r0, {r1}
  ac:	000000a4 	andeq	r0, r0, r4, lsr #1
  b0:	0001350a 	andeq	r3, r1, sl, lsl #10
  b4:	0c4f0100 	stfeqe	f0, [pc], {-0}
  b8:	00000098 	muleq	r0, r8, r0
  bc:	11cc0305 	bicne	r0, ip, r5, lsl #6
  c0:	000a2000 	andeq	r2, sl, r0
  c4:	01000000 	mrseq	r0, (UNDEF: 0)
  c8:	00980c50 	addseq	r0, r8, r0, asr ip
  cc:	03050000 	movweq	r0, #20480	; 0x5000
  d0:	200011d8 	ldrdcs	r1, [r0], -r8
  d4:	00004404 	andeq	r4, r0, r4, lsl #8
  d8:	52014800 	andpl	r4, r1, #0, 16
  dc:	00011510 	andeq	r1, r1, r0, lsl r5
  e0:	01f70b00 	mvnseq	r0, r0, lsl #22
  e4:	53010000 	movwpl	r0, #4096	; 0x1000
  e8:	00011509 	andeq	r1, r1, r9, lsl #10
  ec:	460b0000 	strmi	r0, [fp], -r0
  f0:	01000001 	tsteq	r0, r1
  f4:	01151453 	tsteq	r5, r3, asr r4
  f8:	0b040000 	bleq	100100 <startup-0x1fefff00>
  fc:	0000014c 	andeq	r0, r0, ip, asr #2
 100:	151b5301 	ldrne	r5, [fp, #-769]	; 0xfffffcff
 104:	08000001 	stmdaeq	r0, {r0}
 108:	00787005 	rsbseq	r7, r8, r5
 10c:	1c0b5401 	cfstrsne	mvf5, [fp], {1}
 110:	0c000001 	stceq	0, cr0, [r0], {1}
 114:	05040c00 	streq	r0, [r4, #-3072]	; 0xfffff400
 118:	00746e69 	rsbseq	r6, r4, r9, ror #28
 11c:	00005c07 	andeq	r5, r0, r7, lsl #24
 120:	00012c00 	andeq	r2, r1, r0, lsl #24
 124:	009d0800 	addseq	r0, sp, r0, lsl #16
 128:	001d0000 	andseq	r0, sp, r0
 12c:	0000c602 	andeq	ip, r0, r2, lsl #12
 130:	03550100 	cmpeq	r5, #0, 2
 134:	000000d4 	ldrdeq	r0, [r0], -r4
 138:	0000c502 	andeq	ip, r0, r2, lsl #10
 13c:	0e550100 	rdfeqs	f0, f5, f0
 140:	00000144 	andeq	r0, r0, r4, asr #2
 144:	00d4040d 	sbcseq	r0, r4, sp, lsl #8
 148:	1c0a0000 	stcne	0, cr0, [sl], {-0}
 14c:	01000004 	tsteq	r0, r4
 150:	012c0a57 			; <UNDEFINED> instruction: 0x012c0a57
 154:	03050000 	movweq	r0, #20480	; 0x5000
 158:	200010d0 	ldrdcs	r1, [r0], -r0
 15c:	0000a80a 	andeq	sl, r0, sl, lsl #16
 160:	0a5f0100 	beq	17c0568 <startup-0x1e83fa98>
 164:	0000012c 	andeq	r0, r0, ip, lsr #2
 168:	11180305 	tstne	r8, r5, lsl #6
 16c:	4a042000 	bmi	108174 <startup-0x1fef7e8c>
 170:	24000003 	strcs	r0, [r0], #-3
 174:	f1106801 			; <UNDEFINED> instruction: 0xf1106801
 178:	05000001 	streq	r0, [r0, #-1]
 17c:	006f6567 	rsbeq	r6, pc, r7, ror #10
 180:	380f6901 	stmdacc	pc, {r0, r8, fp, sp, lr}	; <UNPREDICTABLE>
 184:	00000001 	andeq	r0, r0, r1
 188:	0002f20b 	andeq	pc, r2, fp, lsl #4
 18c:	096a0100 	stmdbeq	sl!, {r8}^
 190:	00000115 	andeq	r0, r0, r5, lsl r1
 194:	015e0b04 	cmpeq	lr, r4, lsl #22
 198:	6a010000 	bvs	401a0 <startup-0x1ffbfe60>
 19c:	0001150f 	andeq	r1, r1, pc, lsl #10
 1a0:	150b0800 	strne	r0, [fp, #-2048]	; 0xfffff800
 1a4:	01000000 	mrseq	r0, (UNDEF: 0)
 1a8:	0115096b 	tsteq	r5, fp, ror #18
 1ac:	0b0c0000 	bleq	3001b4 <startup-0x1fcffe4c>
 1b0:	00000152 	andeq	r0, r0, r2, asr r1
 1b4:	150f6b01 	strne	r6, [pc, #-2817]	; fffff6bb <pr_win_msg+0xdfffe4e3>
 1b8:	10000001 	andne	r0, r0, r1
 1bc:	0003b90b 	andeq	fp, r3, fp, lsl #18
 1c0:	0c6c0100 	stfeqe	f0, [ip], #-0
 1c4:	00000207 	andeq	r0, r0, r7, lsl #4
 1c8:	03b30b14 			; <UNDEFINED> instruction: 0x03b30b14
 1cc:	6d010000 	stcvs	0, cr0, [r1, #-0]
 1d0:	0002230c 	andeq	r2, r2, ip, lsl #6
 1d4:	a70b1800 	strge	r1, [fp, -r0, lsl #16]
 1d8:	01000004 	tsteq	r0, r4
 1dc:	023f0c6e 	eorseq	r0, pc, #28160	; 0x6e00
 1e0:	0b1c0000 	bleq	7001e8 <startup-0x1f8ffe18>
 1e4:	000003be 			; <UNDEFINED> instruction: 0x000003be
 1e8:	650c6f01 	strvs	r6, [ip, #-3841]	; 0xfffff0ff
 1ec:	20000002 	andcs	r0, r0, r2
 1f0:	01fc0e00 	mvnseq	r0, r0, lsl #28
 1f4:	fc0f0000 	stc2	0, cr0, [pc], {-0}
 1f8:	00000001 	andeq	r0, r0, r1
 1fc:	0202040d 	andeq	r0, r2, #218103808	; 0xd000000
 200:	ac100000 	ldcge	0, cr0, [r0], {-0}
 204:	0d000004 	stceq	0, cr0, [r0, #-16]
 208:	0001f104 	andeq	pc, r1, r4, lsl #2
 20c:	02180e00 	andseq	r0, r8, #0, 28
 210:	180f0000 	stmdane	pc, {}	; <UNPREDICTABLE>
 214:	00000002 	andeq	r0, r0, r2
 218:	021e040d 	andseq	r0, lr, #218103808	; 0xd000000
 21c:	ac100000 	ldcge	0, cr0, [r0], {-0}
 220:	0d000004 	stceq	0, cr0, [r0, #-16]
 224:	00020d04 	andeq	r0, r2, r4, lsl #26
 228:	02340e00 	eorseq	r0, r4, #0, 28
 22c:	340f0000 	strcc	r0, [pc], #-0	; 234 <startup-0x1ffffdcc>
 230:	00000002 	andeq	r0, r0, r2
 234:	023a040d 	eorseq	r0, sl, #218103808	; 0xd000000
 238:	ac100000 	ldcge	0, cr0, [r0], {-0}
 23c:	0d000004 	stceq	0, cr0, [r0, #-16]
 240:	00022904 	andeq	r2, r2, r4, lsl #18
 244:	025a0e00 	subseq	r0, sl, #0, 28
 248:	5a0f0000 	bpl	3c0250 <startup-0x1fc3fdb0>
 24c:	0f000002 	svceq	0x00000002
 250:	00000115 	andeq	r0, r0, r5, lsl r1
 254:	0001150f 	andeq	r1, r1, pc, lsl #10
 258:	040d0000 	streq	r0, [sp], #-0
 25c:	00000260 	andeq	r0, r0, r0, ror #4
 260:	0004ac10 	andeq	sl, r4, r0, lsl ip
 264:	45040d00 	strmi	r0, [r4, #-3328]	; 0xfffff300
 268:	02000002 	andeq	r0, r0, #2
 26c:	00000494 	muleq	r0, r4, r4
 270:	6e037201 	cdpvs	2, 0, cr7, cr3, cr1, {0}
 274:	02000001 	andeq	r0, r0, #1
 278:	00000493 	muleq	r0, r3, r4
 27c:	830c7201 	movwhi	r7, #49665	; 0xc201
 280:	0d000002 	stceq	0, cr0, [r0, #-8]
 284:	00016e04 	andeq	r6, r1, r4, lsl #28
 288:	00391100 	eorseq	r1, r9, r0, lsl #2
 28c:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
 290:	026b0f02 	rsbeq	r0, fp, #2, 30
 294:	03050000 	movweq	r0, #20480	; 0x5000
 298:	20001160 	andcs	r1, r0, r0, ror #2
 29c:	00034f11 	andeq	r4, r3, r1, lsl pc
 2a0:	02370100 	eorseq	r0, r7, #0, 2
 2a4:	00026b0f 	andeq	r6, r2, pc, lsl #22
 2a8:	84030500 	strhi	r0, [r3], #-1280	; 0xfffffb00
 2ac:	11200011 			; <UNDEFINED> instruction: 0x11200011
 2b0:	000001b7 			; <UNDEFINED> instruction: 0x000001b7
 2b4:	0f024401 	svceq	0x00024401
 2b8:	0000026b 	andeq	r0, r0, fp, ror #4
 2bc:	11a80305 			; <UNDEFINED> instruction: 0x11a80305
 2c0:	8d122000 	ldchi	0, cr2, [r2, #-0]
 2c4:	01000000 	mrseq	r0, (UNDEF: 0)
 2c8:	15050316 	strne	r0, [r5, #-790]	; 0xfffffcea
 2cc:	08000001 	stmdaeq	r0, {r0}
 2d0:	c0200010 	eorgt	r0, r0, r0, lsl r0
 2d4:	01000000 	mrseq	r0, (UNDEF: 0)
 2d8:	00032a9c 	muleq	r3, ip, sl
 2dc:	02991300 	addseq	r1, r9, #0, 6
 2e0:	16010000 	strne	r0, [r1], -r0
 2e4:	01150e03 	tsteq	r5, r3, lsl #28
 2e8:	91020000 	mrsls	r0, (UNDEF: 2)
 2ec:	02f71364 	rscseq	r1, r7, #100, 6	; 0x90000001
 2f0:	16010000 	strne	r0, [r1], -r0
 2f4:	032a1b03 			; <UNDEFINED> instruction: 0x032a1b03
 2f8:	91020000 	mrsls	r0, (UNDEF: 2)
 2fc:	00621460 	rsbeq	r1, r2, r0, ror #8
 300:	0d031801 	stceq	8, cr1, [r3, #-4]
 304:	00000277 	andeq	r0, r0, r7, ror r2
 308:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
 30c:	01004c70 	tsteq	r0, r0, ror ip
 310:	770d0319 	smladvc	sp, r9, r3, r0
 314:	02000002 	andeq	r0, r0, #2
 318:	70147091 	mulsvc	r4, r1, r0
 31c:	1a010052 	bne	4046c <startup-0x1ffbfb94>
 320:	02770d03 	rsbseq	r0, r7, #3, 26	; 0xc0
 324:	91020000 	mrsls	r0, (UNDEF: 2)
 328:	040d006c 	streq	r0, [sp], #-108	; 0xffffff94
 32c:	00000330 	andeq	r0, r0, r0, lsr r3
 330:	00a4040d 	adceq	r0, r4, sp, lsl #8
 334:	f0150000 			; <UNDEFINED> instruction: 0xf0150000
 338:	01000000 	mrseq	r0, (UNDEF: 0)
 33c:	ac060305 	stcge	3, cr0, [r6], {5}
 340:	5c20000f 	stcpl	0, cr0, [r0], #-60	; 0xffffffc4
 344:	01000000 	mrseq	r0, (UNDEF: 0)
 348:	00036a9c 	muleq	r3, ip, sl
 34c:	00621600 	rsbeq	r1, r2, r0, lsl #12
 350:	16030501 	strne	r0, [r3], -r1, lsl #10
 354:	00000277 	andeq	r0, r0, r7, ror r2
 358:	14649102 	strbtne	r9, [r4], #-258	; 0xfffffefe
 35c:	06010063 	streq	r0, [r1], -r3, rrx
 360:	00311403 	eorseq	r1, r1, r3, lsl #8
 364:	91020000 	mrsls	r0, (UNDEF: 2)
 368:	1c17006f 	ldcne	0, cr0, [r7], {111}	; 0x6f
 36c:	01000001 	tsteq	r0, r1
 370:	310f02f8 	strdcc	r0, [pc, -r8]
 374:	30000000 	andcc	r0, r0, r0
 378:	7c20000f 	stcvc	0, cr0, [r0], #-60	; 0xffffffc4
 37c:	01000000 	mrseq	r0, (UNDEF: 0)
 380:	0003ca9c 	muleq	r3, ip, sl
 384:	01dd1100 	bicseq	r1, sp, r0, lsl #2
 388:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
 38c:	03ca1402 	biceq	r1, sl, #33554432	; 0x2000000
 390:	91020000 	mrsls	r0, (UNDEF: 2)
 394:	0f421854 	svceq	0x00421854
 398:	005e2000 	subseq	r2, lr, r0
 39c:	72140000 	andsvc	r0, r4, #0
 3a0:	0100776f 	tsteq	r0, pc, ror #14
 3a4:	311702fa 			; <UNDEFINED> instruction: 0x311702fa
 3a8:	02000000 	andeq	r0, r0, #0
 3ac:	4c186791 	ldcmi	7, cr6, [r8], {145}	; 0x91
 3b0:	3e20000f 	cdpcc	0, 2, cr0, cr0, cr15, {0}
 3b4:	14000000 	strne	r0, [r0], #-0
 3b8:	006c6f63 	rsbeq	r6, ip, r3, ror #30
 3bc:	1702fc01 	strne	pc, [r2, -r1, lsl #24]
 3c0:	00000031 	andeq	r0, r0, r1, lsr r0
 3c4:	00669102 	rsbeq	r9, r6, r2, lsl #2
 3c8:	31070000 	mrscc	r0, (UNDEF: 7)
 3cc:	da000000 	ble	3d4 <startup-0x1ffffc2c>
 3d0:	08000003 	stmdaeq	r0, {r0, r1}
 3d4:	0000009d 	muleq	r0, sp, r0
 3d8:	a519000f 	ldrge	r0, [r9, #-15]
 3dc:	01000002 	tsteq	r0, r2
 3e0:	310f02ed 	smlattcc	pc, sp, r2, r0
 3e4:	fc000000 	stc2	0, cr0, [r0], {-0}
 3e8:	3420000e 	strtcc	r0, [r0], #-14
 3ec:	01000000 	mrseq	r0, (UNDEF: 0)
 3f0:	0004069c 	muleq	r4, ip, r6
 3f4:	003e1100 	eorseq	r1, lr, r0, lsl #2
 3f8:	ef010000 	svc	0x00010000
 3fc:	00311302 	eorseq	r1, r1, r2, lsl #6
 400:	91020000 	mrsls	r0, (UNDEF: 2)
 404:	191a0077 	ldmdbne	sl, {r0, r1, r2, r4, r5, r6}
 408:	01000003 	tsteq	r0, r3
 40c:	ae0602e1 	cdpge	2, 0, cr0, cr6, cr1, {7}
 410:	4e20000e 	cdpmi	0, 2, cr0, cr0, cr14, {0}
 414:	01000000 	mrseq	r0, (UNDEF: 0)
 418:	04b81b9c 	ldrteq	r1, [r8], #2972	; 0xb9c
 41c:	d6010000 	strle	r0, [r1], -r0
 420:	0e680602 	cdpeq	6, 6, cr0, cr8, cr2, {0}
 424:	00462000 	subeq	r2, r6, r0
 428:	9c010000 	stcls	0, cr0, [r1], {-0}
 42c:	00048715 	andeq	r8, r4, r5, lsl r7
 430:	02c20100 	sbceq	r0, r2, #0, 2
 434:	000dc606 	andeq	ip, sp, r6, lsl #12
 438:	0000a220 	andeq	sl, r0, r0, lsr #4
 43c:	709c0100 	addsvc	r0, ip, r0, lsl #2
 440:	14000004 	strne	r0, [r0], #-4
 444:	01004c70 	tsteq	r0, r0, ror ip
 448:	700a02c5 	andvc	r0, sl, r5, asr #5
 44c:	02000004 	andeq	r0, r0, #4
 450:	70146491 	mulsvc	r4, r1, r4
 454:	c6010052 			; <UNDEFINED> instruction: 0xc6010052
 458:	04700a02 	ldrbteq	r0, [r0], #-2562	; 0xfffff5fe
 45c:	91020000 	mrsls	r0, (UNDEF: 2)
 460:	0073145c 	rsbseq	r1, r3, ip, asr r4
 464:	0b02c701 	bleq	b2070 <startup-0x1ff4df90>
 468:	00000330 	andeq	r0, r0, r0, lsr r3
 46c:	006c9102 	rsbeq	r9, ip, r2, lsl #2
 470:	0000a407 	andeq	sl, r0, r7, lsl #8
 474:	00048000 	andeq	r8, r4, r0
 478:	009d0800 	addseq	r0, sp, r0, lsl #16
 47c:	00040000 	andeq	r0, r4, r0
 480:	0000611c 	andeq	r6, r0, ip, lsl r1
 484:	02b80100 	adcseq	r0, r8, #0, 2
 488:	000d6206 	andeq	r6, sp, r6, lsl #4
 48c:	00006420 	andeq	r6, r0, r0, lsr #8
 490:	b89c0100 	ldmlt	ip, {r8}
 494:	13000004 	movwne	r0, #4
 498:	00000039 	andeq	r0, r0, r9, lsr r0
 49c:	2102b801 	tstcs	r2, r1, lsl #16
 4a0:	00000277 	andeq	r0, r0, r7, ror r2
 4a4:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
 4a8:	00000080 	andeq	r0, r0, r0, lsl #1
 4ac:	2f02b801 	svccs	0x0002b801
 4b0:	00000277 	andeq	r0, r0, r7, ror r2
 4b4:	00709102 	rsbseq	r9, r0, r2, lsl #2
 4b8:	00011115 	andeq	r1, r1, r5, lsl r1
 4bc:	02b30100 	adcseq	r0, r3, #0, 2
 4c0:	000d3806 	andeq	r3, sp, r6, lsl #16
 4c4:	00002a20 	andeq	r2, r0, r0, lsr #20
 4c8:	ee9c0100 	fmle	f0, f4, f0
 4cc:	16000004 	strne	r0, [r0], -r4
 4d0:	01004c70 	tsteq	r0, r0, ror ip
 4d4:	771902b3 			; <UNDEFINED> instruction: 0x771902b3
 4d8:	02000002 	andeq	r0, r0, #2
 4dc:	70167491 	mulsvc	r6, r1, r4
 4e0:	b3010052 	movwlt	r0, #4178	; 0x1052
 4e4:	02772502 	rsbseq	r2, r7, #8388608	; 0x800000
 4e8:	91020000 	mrsls	r0, (UNDEF: 2)
 4ec:	fc150070 	ldc2	0, cr0, [r5], {112}	; 0x70
 4f0:	01000002 	tsteq	r0, r2
 4f4:	f00602a5 			; <UNDEFINED> instruction: 0xf00602a5
 4f8:	4820000c 	stmdami	r0!, {r2, r3}
 4fc:	01000000 	mrseq	r0, (UNDEF: 0)
 500:	0005229c 	muleq	r5, ip, r2
 504:	00701600 	rsbseq	r1, r0, r0, lsl #12
 508:	1e02a501 	cfsh32ne	mvfx10, mvfx2, #1
 50c:	00000277 	andeq	r0, r0, r7, ror r2
 510:	14649102 	strbtne	r9, [r4], #-258	; 0xfffffefe
 514:	a7010063 	strge	r0, [r1, -r3, rrx]
 518:	00311302 	eorseq	r1, r1, r2, lsl #6
 51c:	91020000 	mrsls	r0, (UNDEF: 2)
 520:	a715006f 	ldrge	r0, [r5, -pc, rrx]
 524:	01000001 	tsteq	r0, r1
 528:	a8060298 	stmdage	r6, {r3, r4, r7, r9}
 52c:	4820000c 	stmdami	r0!, {r2, r3}
 530:	01000000 	mrseq	r0, (UNDEF: 0)
 534:	0005569c 	muleq	r5, ip, r6
 538:	00701600 	rsbseq	r1, r0, r0, lsl #12
 53c:	1e029801 	cdpne	8, 0, cr9, cr2, cr1, {0}
 540:	00000277 	andeq	r0, r0, r7, ror r2
 544:	14649102 	strbtne	r9, [r4], #-258	; 0xfffffefe
 548:	9a010063 	bls	406dc <startup-0x1ffbf924>
 54c:	00311302 	eorseq	r1, r1, r2, lsl #6
 550:	91020000 	mrsls	r0, (UNDEF: 2)
 554:	8712006f 	ldrhi	r0, [r2, -pc, rrx]
 558:	01000000 	mrseq	r0, (UNDEF: 0)
 55c:	310f028a 	smlabbcc	pc, sl, r2, r0	; <UNPREDICTABLE>
 560:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
 564:	8020000c 	eorhi	r0, r0, ip
 568:	01000000 	mrseq	r0, (UNDEF: 0)
 56c:	0005b69c 	muleq	r5, ip, r6
 570:	01dd1100 	bicseq	r1, sp, r0, lsl #2
 574:	8c010000 	stchi	0, cr0, [r1], {-0}
 578:	03ca1302 	biceq	r1, sl, #134217728	; 0x8000000
 57c:	91020000 	mrsls	r0, (UNDEF: 2)
 580:	0c3a1854 	ldceq	8, cr1, [sl], #-336	; 0xfffffeb0
 584:	005e2000 	subseq	r2, lr, r0
 588:	72140000 	andsvc	r0, r4, #0
 58c:	0100776f 	tsteq	r0, pc, ror #14
 590:	3117028d 	tstcc	r7, sp, lsl #5
 594:	02000000 	andeq	r0, r0, #0
 598:	44186791 	ldrmi	r6, [r8], #-1937	; 0xfffff86f
 59c:	3e20000c 	cdpcc	0, 2, cr0, cr0, cr12, {0}
 5a0:	14000000 	strne	r0, [r0], #-0
 5a4:	006c6f63 	rsbeq	r6, ip, r3, ror #30
 5a8:	17028f01 	strne	r8, [r2, -r1, lsl #30]
 5ac:	00000031 	andeq	r0, r0, r1, lsr r0
 5b0:	00669102 	rsbeq	r9, r6, r2, lsl #2
 5b4:	cf120000 	svcgt	0x00120000
 5b8:	01000000 	mrseq	r0, (UNDEF: 0)
 5bc:	310f027c 	tstcc	pc, ip, ror r2	; <UNPREDICTABLE>
 5c0:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
 5c4:	8020000b 	eorhi	r0, r0, fp
 5c8:	01000000 	mrseq	r0, (UNDEF: 0)
 5cc:	0006169c 	muleq	r6, ip, r6
 5d0:	01dd1100 	bicseq	r1, sp, r0, lsl #2
 5d4:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
 5d8:	03ca1302 	biceq	r1, sl, #134217728	; 0x8000000
 5dc:	91020000 	mrsls	r0, (UNDEF: 2)
 5e0:	0bba1854 	bleq	fee86738 <pr_win_msg+0xdee85560>
 5e4:	005e2000 	subseq	r2, lr, r0
 5e8:	72140000 	andsvc	r0, r4, #0
 5ec:	0100776f 	tsteq	r0, pc, ror #14
 5f0:	3117027f 	tstcc	r7, pc, ror r2
 5f4:	02000000 	andeq	r0, r0, #0
 5f8:	c4186791 	ldrgt	r6, [r8], #-1937	; 0xfffff86f
 5fc:	3e20000b 	cdpcc	0, 2, cr0, cr0, cr11, {0}
 600:	14000000 	strne	r0, [r0], #-0
 604:	006c6f63 	rsbeq	r6, ip, r3, ror #30
 608:	17028101 	strne	r8, [r2, -r1, lsl #2]
 60c:	00000031 	andeq	r0, r0, r1, lsr r0
 610:	00669102 	rsbeq	r9, r6, r2, lsl #2
 614:	94190000 	ldrls	r0, [r9], #-0
 618:	01000003 	tsteq	r0, r3
 61c:	310f0271 	tstcc	pc, r1, ror r2	; <UNPREDICTABLE>
 620:	74000000 	strvc	r0, [r0], #-0
 624:	3420000b 	strtcc	r0, [r0], #-11
 628:	01000000 	mrseq	r0, (UNDEF: 0)
 62c:	0006429c 	muleq	r6, ip, r2
 630:	003e1100 	eorseq	r1, lr, r0, lsl #2
 634:	73010000 	movwvc	r0, #4096	; 0x1000
 638:	00311302 	eorseq	r1, r1, r2, lsl #6
 63c:	91020000 	mrsls	r0, (UNDEF: 2)
 640:	b8190077 	ldmdalt	r9, {r0, r1, r2, r4, r5, r6}
 644:	01000000 	mrseq	r0, (UNDEF: 0)
 648:	310f0267 	tstcc	pc, r7, ror #4
 64c:	40000000 	andmi	r0, r0, r0
 650:	3420000b 	strtcc	r0, [r0], #-11
 654:	01000000 	mrseq	r0, (UNDEF: 0)
 658:	00066e9c 	muleq	r6, ip, lr
 65c:	003e1100 	eorseq	r1, lr, r0, lsl #2
 660:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
 664:	00311302 	eorseq	r1, r1, r2, lsl #6
 668:	91020000 	mrsls	r0, (UNDEF: 2)
 66c:	0b1c0077 	bleq	700850 <startup-0x1f8ff7b0>
 670:	01000000 	mrseq	r0, (UNDEF: 0)
 674:	e8060252 	stmda	r6, {r1, r4, r6, r9}
 678:	5820000a 	stmdapl	r0!, {r1, r3}
 67c:	01000000 	mrseq	r0, (UNDEF: 0)
 680:	0006969c 	muleq	r6, ip, r6
 684:	6f721600 	svcvs	0x00721600
 688:	52010077 	andpl	r0, r1, #119	; 0x77
 68c:	00311e02 	eorseq	r1, r1, r2, lsl #28
 690:	91020000 	mrsls	r0, (UNDEF: 2)
 694:	9b150077 	blls	540878 <startup-0x1fabf788>
 698:	01000004 	tsteq	r0, r4
 69c:	d00601fc 	strdle	r0, [r6], -ip
 6a0:	18200009 	stmdane	r0!, {r0, r3}
 6a4:	01000001 	tsteq	r0, r1
 6a8:	0006be9c 	muleq	r6, ip, lr
 6ac:	04a01300 	strteq	r1, [r0], #768	; 0x300
 6b0:	fc010000 	stc2	0, cr0, [r1], {-0}
 6b4:	02771a01 	rsbseq	r1, r7, #4096	; 0x1000
 6b8:	91020000 	mrsls	r0, (UNDEF: 2)
 6bc:	0f150074 	svceq	0x00150074
 6c0:	01000004 	tsteq	r0, r4
 6c4:	780601f5 	stmdavc	r6, {r0, r2, r4, r5, r6, r7, r8}
 6c8:	58200009 	stmdapl	r0!, {r0, r3}
 6cc:	01000000 	mrseq	r0, (UNDEF: 0)
 6d0:	0006fc9c 	muleq	r6, ip, ip
 6d4:	004f1600 	subeq	r1, pc, r0, lsl #12
 6d8:	1b01f501 	blne	7dae4 <startup-0x1ff8251c>
 6dc:	00000277 	andeq	r0, r0, r7, ror r2
 6e0:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
 6e4:	20000980 	andcs	r0, r0, r0, lsl #19
 6e8:	00000046 	andeq	r0, r0, r6, asr #32
 6ec:	01006914 	tsteq	r0, r4, lsl r9
 6f0:	150d01f7 	strne	r0, [sp, #-503]	; 0xfffffe09
 6f4:	02000001 	andeq	r0, r0, #1
 6f8:	00007491 	muleq	r0, r1, r4
 6fc:	00007415 	andeq	r7, r0, r5, lsl r4
 700:	01ee0100 	mvneq	r0, r0, lsl #2
 704:	00092006 	andeq	r2, r9, r6
 708:	00005820 	andeq	r5, r0, r0, lsr #16
 70c:	3a9c0100 	bcc	fe700b14 <pr_win_msg+0xde6ff93c>
 710:	16000007 	strne	r0, [r0], -r7
 714:	ee01004f 	cdp	0, 0, cr0, cr1, cr15, {2}
 718:	02771a01 	rsbseq	r1, r7, #4096	; 0x1000
 71c:	91020000 	mrsls	r0, (UNDEF: 2)
 720:	0928186c 	stmdbeq	r8!, {r2, r3, r5, r6, fp, ip}
 724:	00462000 	subeq	r2, r6, r0
 728:	69140000 	ldmdbvs	r4, {}	; <UNPREDICTABLE>
 72c:	01f00100 	mvnseq	r0, r0, lsl #2
 730:	0001150d 	andeq	r1, r1, sp, lsl #10
 734:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 738:	b51c0000 	ldrlt	r0, [ip, #-0]
 73c:	01000002 	tsteq	r0, r2
 740:	000601e8 	andeq	r0, r6, r8, ror #3
 744:	20200009 	eorcs	r0, r0, r9
 748:	01000000 	mrseq	r0, (UNDEF: 0)
 74c:	0007809c 	muleq	r7, ip, r0
 750:	006f1600 	rsbeq	r1, pc, r0, lsl #12
 754:	1f01e801 	svcne	0x0001e801
 758:	00000277 	andeq	r0, r0, r7, ror r2
 75c:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
 760:	00000157 	andeq	r0, r0, r7, asr r1
 764:	2601e801 	strcs	lr, [r1], -r1, lsl #16
 768:	00000115 	andeq	r0, r0, r5, lsl r1
 76c:	13709102 	cmnne	r0, #-2147483648	; 0x80000000
 770:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
 774:	3201e801 	andcc	lr, r1, #65536	; 0x10000
 778:	00000115 	andeq	r0, r0, r5, lsl r1
 77c:	006c9102 	rsbeq	r9, ip, r2, lsl #2
 780:	00001a15 	andeq	r1, r0, r5, lsl sl
 784:	01ae0100 			; <UNDEFINED> instruction: 0x01ae0100
 788:	00076806 	andeq	r6, r7, r6, lsl #16
 78c:	00019820 	andeq	r9, r1, r0, lsr #16
 790:	029c0100 	addseq	r0, ip, #0, 2
 794:	16000008 	strne	r0, [r0], -r8
 798:	ae010078 	mcrge	0, 0, r0, cr1, cr8, {3}
 79c:	01151001 	tsteq	r5, r1
 7a0:	91020000 	mrsls	r0, (UNDEF: 2)
 7a4:	00791654 	rsbseq	r1, r9, r4, asr r6
 7a8:	1701ae01 	strne	sl, [r1, -r1, lsl #28]
 7ac:	00000115 	andeq	r0, r0, r5, lsl r1
 7b0:	16509102 	ldrbne	r9, [r0], -r2, lsl #2
 7b4:	00746573 	rsbseq	r6, r4, r3, ror r5
 7b8:	1e01ae01 	cdpne	14, 0, cr10, cr1, cr1, {0}
 7bc:	00000115 	andeq	r0, r0, r5, lsl r1
 7c0:	114c9102 	cmpne	ip, r2, lsl #2
 7c4:	00000436 	andeq	r0, r0, r6, lsr r4
 7c8:	0d01b001 	stceq	0, cr11, [r1, #-4]
 7cc:	00000025 	andeq	r0, r0, r5, lsr #32
 7d0:	14679102 	strbtne	r9, [r7], #-258	; 0xfffffefe
 7d4:	b0010063 	andlt	r0, r1, r3, rrx
 7d8:	00251301 	eoreq	r1, r5, r1, lsl #6
 7dc:	91020000 	mrsls	r0, (UNDEF: 2)
 7e0:	0377115f 	cmneq	r7, #-1073741801	; 0xc0000017
 7e4:	b0010000 	andlt	r0, r1, r0
 7e8:	00251601 	eoreq	r1, r5, r1, lsl #12
 7ec:	91020000 	mrsls	r0, (UNDEF: 2)
 7f0:	00201166 	eoreq	r1, r0, r6, ror #2
 7f4:	b1010000 	mrslt	r0, (UNDEF: 1)
 7f8:	01150901 	tsteq	r5, r1, lsl #18
 7fc:	91020000 	mrsls	r0, (UNDEF: 2)
 800:	c61b0060 	ldrgt	r0, [fp], -r0, rrx
 804:	01000002 	tsteq	r0, r2
 808:	0c06019e 	stfeqs	f0, [r6], {158}	; 0x9e
 80c:	5c200007 	stcpl	0, cr0, [r0], #-28	; 0xffffffe4
 810:	01000000 	mrseq	r0, (UNDEF: 0)
 814:	00db159c 	smullseq	r1, fp, ip, r5
 818:	92010000 	andls	r0, r1, #0
 81c:	06a40601 	strteq	r0, [r4], r1, lsl #12
 820:	00682000 	rsbeq	r2, r8, r0
 824:	9c010000 	stcls	0, cr0, [r1], {-0}
 828:	00000849 	andeq	r0, r0, r9, asr #16
 82c:	01006914 	tsteq	r0, r4, lsl r9
 830:	250d0194 	strcs	r0, [sp, #-404]	; 0xfffffe6c
 834:	02000000 	andeq	r0, r0, #0
 838:	6a147791 	bvs	51e684 <startup-0x1fae197c>
 83c:	01940100 	orrseq	r0, r4, r0, lsl #2
 840:	00002510 	andeq	r2, r0, r0, lsl r5
 844:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 848:	00921500 	addseq	r1, r2, r0, lsl #10
 84c:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
 850:	065e0601 	ldrbeq	r0, [lr], -r1, lsl #12
 854:	00462000 	subeq	r2, r6, r0
 858:	9c010000 	stcls	0, cr0, [r1], {-0}
 85c:	00000881 	andeq	r0, r0, r1, lsl #17
 860:	0000a013 	andeq	sl, r0, r3, lsl r0
 864:	01890100 	orreq	r0, r9, r0, lsl #2
 868:	00002524 	andeq	r2, r0, r4, lsr #10
 86c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 870:	00037713 	andeq	r7, r3, r3, lsl r7
 874:	01890100 	orreq	r0, r9, r0, lsl #2
 878:	00002535 	andeq	r2, r0, r5, lsr r5
 87c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 880:	00261500 	eoreq	r1, r6, r0, lsl #10
 884:	80010000 	andhi	r0, r1, r0
 888:	06180601 	ldreq	r0, [r8], -r1, lsl #12
 88c:	00462000 	subeq	r2, r6, r0
 890:	9c010000 	stcls	0, cr0, [r1], {-0}
 894:	000008b9 			; <UNDEFINED> instruction: 0x000008b9
 898:	00036713 	andeq	r6, r3, r3, lsl r7
 89c:	01800100 	orreq	r0, r0, r0, lsl #2
 8a0:	00002521 	andeq	r2, r0, r1, lsr #10
 8a4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 8a8:	00037713 	andeq	r7, r3, r3, lsl r7
 8ac:	01800100 	orreq	r0, r0, r0, lsl #2
 8b0:	0000252f 	andeq	r2, r0, pc, lsr #10
 8b4:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 8b8:	028b1d00 	addeq	r1, fp, #0, 26
 8bc:	6d010000 	stcvs	0, cr0, [r1, #-0]
 8c0:	05aa0d01 	streq	r0, [sl, #3329]!	; 0xd01
 8c4:	006e2000 	rsbeq	r2, lr, r0
 8c8:	9c010000 	stcls	0, cr0, [r1], {-0}
 8cc:	000008f1 	strdeq	r0, [r0], -r1
 8d0:	0000d513 	andeq	sp, r0, r3, lsl r5
 8d4:	016d0100 	cmneq	sp, r0, lsl #2
 8d8:	00002523 	andeq	r2, r0, r3, lsr #10
 8dc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 8e0:	00037713 	andeq	r7, r3, r3, lsl r7
 8e4:	016d0100 	cmneq	sp, r0, lsl #2
 8e8:	00002532 	andeq	r2, r0, r2, lsr r5
 8ec:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 8f0:	035a1e00 	cmpeq	sl, #0, 28
 8f4:	67010000 	strvs	r0, [r1, -r0]
 8f8:	00251001 	eoreq	r1, r5, r1
 8fc:	05800000 	streq	r0, [r0]
 900:	002a2000 	eoreq	r2, sl, r0
 904:	9c010000 	stcls	0, cr0, [r1], {-0}
 908:	0000091d 	andeq	r0, r0, sp, lsl r9
 90c:	00037713 	andeq	r7, r3, r3, lsl r7
 910:	01670100 	cmneq	r7, r0, lsl #2
 914:	0000252a 	andeq	r2, r0, sl, lsr #10
 918:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 91c:	01281e00 			; <UNDEFINED> instruction: 0x01281e00
 920:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
 924:	00251001 	eoreq	r1, r5, r1
 928:	04ec0000 	strbteq	r0, [ip], #0
 92c:	00942000 	addseq	r2, r4, r0
 930:	9c010000 	stcls	0, cr0, [r1], {-0}
 934:	00000957 	andeq	r0, r0, r7, asr r9
 938:	00037713 	andeq	r7, r3, r3, lsl r7
 93c:	014e0100 	mrseq	r0, (UNDEF: 94)
 940:	00002525 	andeq	r2, r0, r5, lsr #10
 944:	6f910200 	svcvs	0x00910200
 948:	01006314 	tsteq	r0, r4, lsl r3
 94c:	250d0150 	strcs	r0, [sp, #-336]	; 0xfffffeb0
 950:	02000000 	andeq	r0, r0, #0
 954:	1d007791 	stcne	7, cr7, [r0, #-580]	; 0xfffffdbc
 958:	000003fc 	strdeq	r0, [r0], -ip
 95c:	0d013801 	stceq	8, cr3, [r1, #-4]
 960:	2000047e 	andcs	r0, r0, lr, ror r4
 964:	0000006e 	andeq	r0, r0, lr, rrx
 968:	097d9c01 	ldmdbeq	sp!, {r0, sl, fp, ip, pc}^
 96c:	63140000 	tstvs	r4, #0
 970:	013a0100 	teqeq	sl, r0, lsl #2
 974:	0000250d 	andeq	r2, r0, sp, lsl #10
 978:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 97c:	01631500 	cmneq	r3, r0, lsl #10
 980:	25010000 	strcs	r0, [r1, #-0]
 984:	04240601 	strteq	r0, [r4], #-1537	; 0xfffff9ff
 988:	005a2000 	subseq	r2, sl, r0
 98c:	9c010000 	stcls	0, cr0, [r1], {-0}
 990:	000009a5 	andeq	r0, r0, r5, lsr #19
 994:	00037713 	andeq	r7, r3, r3, lsl r7
 998:	01250100 			; <UNDEFINED> instruction: 0x01250100
 99c:	00002520 	andeq	r2, r0, r0, lsr #10
 9a0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 9a4:	03a21c00 			; <UNDEFINED> instruction: 0x03a21c00
 9a8:	1c010000 	stcne	0, cr0, [r1], {-0}
 9ac:	03d40601 	bicseq	r0, r4, #1048576	; 0x100000
 9b0:	00502000 	subseq	r2, r0, r0
 9b4:	9c010000 	stcls	0, cr0, [r1], {-0}
 9b8:	000009d9 	ldrdeq	r0, [r0], -r9
 9bc:	01007816 	tsteq	r0, r6, lsl r8
 9c0:	2525011c 	strcs	r0, [r5, #-284]!	; 0xfffffee4
 9c4:	02000000 	andeq	r0, r0, #0
 9c8:	63146f91 	tstvs	r4, #580	; 0x244
 9cc:	011e0100 	tsteq	lr, r0, lsl #2
 9d0:	0000250d 	andeq	r2, r0, sp, lsl #10
 9d4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 9d8:	03351c00 	teqeq	r5, #0, 24
 9dc:	13010000 	movwne	r0, #4096	; 0x1000
 9e0:	03840601 	orreq	r0, r4, #1048576	; 0x100000
 9e4:	00502000 	subseq	r2, r0, r0
 9e8:	9c010000 	stcls	0, cr0, [r1], {-0}
 9ec:	00000a0d 	andeq	r0, r0, sp, lsl #20
 9f0:	01007816 	tsteq	r0, r6, lsl r8
 9f4:	25230113 	strcs	r0, [r3, #-275]!	; 0xfffffeed
 9f8:	02000000 	andeq	r0, r0, #0
 9fc:	63146f91 	tstvs	r4, #580	; 0x244
 a00:	01150100 	tsteq	r5, r0, lsl #2
 a04:	0000250d 	andeq	r2, r0, sp, lsl #10
 a08:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 a0c:	03221500 			; <UNDEFINED> instruction: 0x03221500
 a10:	06010000 	streq	r0, [r1], -r0
 a14:	03280601 			; <UNDEFINED> instruction: 0x03280601
 a18:	005c2000 	subseq	r2, ip, r0
 a1c:	9c010000 	stcls	0, cr0, [r1], {-0}
 a20:	00000a33 	andeq	r0, r0, r3, lsr sl
 a24:	01007414 	tsteq	r0, r4, lsl r4
 a28:	300b0109 	andcc	r0, fp, r9, lsl #2
 a2c:	02000003 	andeq	r0, r0, #3
 a30:	1f007491 	svcne	0x00007491
 a34:	0000030c 	andeq	r0, r0, ip, lsl #6
 a38:	ea06fc01 	b	1bfa44 <startup-0x1fe405bc>
 a3c:	3e200002 	cdpcc	0, 2, cr0, cr0, cr2, {0}
 a40:	01000000 	mrseq	r0, (UNDEF: 0)
 a44:	000a739c 	muleq	sl, ip, r3
 a48:	00782000 	rsbseq	r2, r8, r0
 a4c:	1517fc01 	ldrne	pc, [r7, #-3073]	; 0xfffff3ff
 a50:	02000001 	andeq	r0, r0, #1
 a54:	79206c91 	stmdbvc	r0!, {r0, r4, r7, sl, fp, sp, lr}
 a58:	1efc0100 	cdpne	1, 15, cr0, cr12, cr0, {0}
 a5c:	00000115 	andeq	r0, r0, r5, lsl r1
 a60:	21689102 	cmncs	r8, r2, lsl #2
 a64:	00000175 	andeq	r0, r0, r5, ror r1
 a68:	1509fe01 	strne	pc, [r9, #-3585]	; 0xfffff1ff
 a6c:	02000001 	andeq	r0, r0, #1
 a70:	1f007491 	svcne	0x00007491
 a74:	00000100 	andeq	r0, r0, r0, lsl #2
 a78:	be06f101 	mvflts	f7, f1
 a7c:	2c200002 	stccs	0, cr0, [r0], #-8
 a80:	01000000 	mrseq	r0, (UNDEF: 0)
 a84:	000a999c 	muleq	sl, ip, r9
 a88:	68632000 	stmdavs	r3!, {sp}^
 a8c:	f1010072 	setend	le
 a90:	00003125 	andeq	r3, r0, r5, lsr #2
 a94:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 a98:	01c31f00 	biceq	r1, r3, r0, lsl #30
 a9c:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
 aa0:	00028806 	andeq	r8, r2, r6, lsl #16
 aa4:	00003620 	andeq	r3, r0, r0, lsr #12
 aa8:	bf9c0100 	svclt	0x009c0100
 aac:	2200000a 	andcs	r0, r0, #10
 ab0:	000000a0 	andeq	r0, r0, r0, lsr #1
 ab4:	3122e901 			; <UNDEFINED> instruction: 0x3122e901
 ab8:	02000000 	andeq	r0, r0, #0
 abc:	1f007791 	svcne	0x00007791
 ac0:	0000043b 	andeq	r0, r0, fp, lsr r4
 ac4:	5e06e201 	cdppl	2, 0, cr14, cr6, cr1, {0}
 ac8:	2a200002 	bcs	800ad8 <startup-0x1f7ff528>
 acc:	01000000 	mrseq	r0, (UNDEF: 0)
 ad0:	000ae59c 	muleq	sl, ip, r5
 ad4:	03672200 	cmneq	r7, #0, 4
 ad8:	e2010000 	and	r0, r1, #0
 adc:	00003125 	andeq	r3, r0, r5, lsr #2
 ae0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 ae4:	04c31f00 	strbeq	r1, [r3], #3840	; 0xf00
 ae8:	db010000 	blle	40af0 <startup-0x1ffbf510>
 aec:	00023406 	andeq	r3, r2, r6, lsl #8
 af0:	00002a20 	andeq	r2, r0, r0, lsr #20
 af4:	0b9c0100 	bleq	fe700efc <pr_win_msg+0xde6ffd24>
 af8:	2200000b 	andcs	r0, r0, #11
 afc:	000000a0 	andeq	r0, r0, r0, lsr #1
 b00:	3124db01 			; <UNDEFINED> instruction: 0x3124db01
 b04:	02000000 	andeq	r0, r0, #0
 b08:	23007791 	movwcs	r7, #1937	; 0x791
 b0c:	0000046f 	andeq	r0, r0, pc, ror #8
 b10:	310fd101 	tstcc	pc, r1, lsl #2
 b14:	f4000000 	vst4.8	{d0-d3}, [r0], r0
 b18:	40200001 	eormi	r0, r0, r1
 b1c:	01000000 	mrseq	r0, (UNDEF: 0)
 b20:	000b349c 	muleq	fp, ip, r4
 b24:	76722400 	ldrbtvc	r2, [r2], -r0, lsl #8
 b28:	13d60100 	bicsne	r0, r6, #0, 2
 b2c:	00000031 	andeq	r0, r0, r1, lsr r0
 b30:	006f9102 	rsbeq	r9, pc, r2, lsl #2
 b34:	00038223 	andeq	r8, r3, r3, lsr #4
 b38:	0fc60100 	svceq	0x00c60100
 b3c:	00000031 	andeq	r0, r0, r1, lsr r0
 b40:	200001b4 			; <UNDEFINED> instruction: 0x200001b4
 b44:	00000040 	andeq	r0, r0, r0, asr #32
 b48:	0b5c9c01 	bleq	1727b54 <startup-0x1e8d84ac>
 b4c:	63240000 			; <UNDEFINED> instruction: 0x63240000
 b50:	13c80100 	bicne	r0, r8, #0, 2
 b54:	00000031 	andeq	r0, r0, r1, lsr r0
 b58:	006f9102 	rsbeq	r9, pc, r2, lsl #2
 b5c:	00036c23 	andeq	r6, r3, r3, lsr #24
 b60:	0fbb0100 	svceq	0x00bb0100
 b64:	00000031 	andeq	r0, r0, r1, lsr r0
 b68:	20000180 	andcs	r0, r0, r0, lsl #3
 b6c:	00000034 	andeq	r0, r0, r4, lsr r0
 b70:	0b849c01 	bleq	fe127b7c <pr_win_msg+0xde1269a4>
 b74:	63240000 			; <UNDEFINED> instruction: 0x63240000
 b78:	13bd0100 			; <UNDEFINED> instruction: 0x13bd0100
 b7c:	00000031 	andeq	r0, r0, r1, lsr r0
 b80:	00779102 	rsbseq	r9, r7, r2, lsl #2
 b84:	0004581f 	andeq	r5, r4, pc, lsl r8
 b88:	06b30100 	ldrteq	r0, [r3], r0, lsl #2
 b8c:	20000150 	andcs	r0, r0, r0, asr r1
 b90:	00000030 	andeq	r0, r0, r0, lsr r0
 b94:	0ba89c01 	bleq	fea27ba0 <pr_win_msg+0xdea269c8>
 b98:	63200000 	nopvs	{0}	; <UNPREDICTABLE>
 b9c:	2bb30100 	blcs	fecc0fa4 <pr_win_msg+0xdecbfdcc>
 ba0:	00000031 	andeq	r0, r0, r1, lsr r0
 ba4:	00779102 	rsbseq	r9, r7, r2, lsl #2
 ba8:	0001e225 	andeq	lr, r1, r5, lsr #4
 bac:	06ab0100 	strteq	r0, [fp], r0, lsl #2
 bb0:	20000108 	andcs	r0, r0, r8, lsl #2
 bb4:	00000048 	andeq	r0, r0, r8, asr #32
 bb8:	0bd99c01 	bleq	ff667bc4 <pr_win_msg+0xdf6669ec>
 bbc:	78200000 	stmdavc	r0!, {}	; <UNPREDICTABLE>
 bc0:	29ab0100 	stmibcs	fp!, {r8}
 bc4:	00000031 	andeq	r0, r0, r1, lsr r0
 bc8:	246f9102 	strbtcs	r9, [pc], #-258	; bd0 <startup-0x1ffff430>
 bcc:	ad010063 	stcge	0, cr0, [r1, #-396]	; 0xfffffe74
 bd0:	00003113 	andeq	r3, r0, r3, lsl r1
 bd4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 bd8:	004e2500 	subeq	r2, lr, r0, lsl #10
 bdc:	a3010000 	movwge	r0, #4096	; 0x1000
 be0:	0000c606 	andeq	ip, r0, r6, lsl #12
 be4:	00004220 	andeq	r4, r0, r0, lsr #4
 be8:	0a9c0100 	beq	fe700ff0 <pr_win_msg+0xde6ffe18>
 bec:	2000000c 	andcs	r0, r0, ip
 bf0:	a3010078 	movwge	r0, #4216	; 0x1078
 bf4:	00003127 	andeq	r3, r0, r7, lsr #2
 bf8:	6f910200 	svcvs	0x00910200
 bfc:	01006324 	tsteq	r0, r4, lsr #6
 c00:	003113a5 	eorseq	r1, r1, r5, lsr #7
 c04:	91020000 	mrsls	r0, (UNDEF: 2)
 c08:	e6260077 			; <UNDEFINED> instruction: 0xe6260077
 c0c:	01000002 	tsteq	r0, r2
 c10:	00b4069b 	umlalseq	r0, r4, fp, r6
 c14:	00122000 	andseq	r2, r2, r0
 c18:	9c010000 	stcls	0, cr0, [r1], {-0}
 c1c:	0001d11f 	andeq	sp, r1, pc, lsl r1
 c20:	068f0100 	streq	r0, [pc], r0, lsl #2
 c24:	2000008a 	andcs	r0, r0, sl, lsl #1
 c28:	0000002a 	andeq	r0, r0, sl, lsr #32
 c2c:	0c419c01 	mcrreq	12, 0, r9, r1, cr1
 c30:	6d200000 	stcvs	0, cr0, [r0, #-0]
 c34:	8f010073 	svchi	0x00010073
 c38:	00009d1f 	andeq	r9, r0, pc, lsl sp
 c3c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 c40:	044c1f00 	strbeq	r1, [ip], #-3840	; 0xfffff100
 c44:	81010000 	mrshi	r0, (UNDEF: 1)
 c48:	00005406 	andeq	r5, r0, r6, lsl #8
 c4c:	00003620 	andeq	r3, r0, r0, lsr #12
 c50:	7d9c0100 	ldfvcs	f0, [ip]
 c54:	2000000c 	andcs	r0, r0, ip
 c58:	01007375 	tsteq	r0, r5, ror r3
 c5c:	009d1f81 	addseq	r1, sp, r1, lsl #31
 c60:	91020000 	mrsls	r0, (UNDEF: 2)
 c64:	005c186c 	subseq	r1, ip, ip, ror #16
 c68:	00242000 	eoreq	r2, r4, r0
 c6c:	69240000 	stmdbvs	r4!, {}	; <UNPREDICTABLE>
 c70:	0d870100 	stfeqs	f0, [r7]
 c74:	00000115 	andeq	r0, r0, r5, lsl r1
 c78:	00749102 	rsbseq	r9, r4, r2, lsl #2
 c7c:	042a2700 	strteq	r2, [sl], #-1792	; 0xfffff900
 c80:	75010000 	strvc	r0, [r1, #-0]
 c84:	00001006 	andeq	r1, r0, r6
 c88:	00004420 	andeq	r4, r0, r0, lsr #8
 c8c:	279c0100 	ldrcs	r0, [ip, r0, lsl #2]
 c90:	0000047f 	andeq	r0, r0, pc, ror r4
 c94:	00060701 	andeq	r0, r6, r1, lsl #14
 c98:	0c200000 	stceq	0, cr0, [r0], #-0
 c9c:	01000000 	mrseq	r0, (UNDEF: 0)
 ca0:	Address 0x00000ca0 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13490b39 	movtne	r0, #39737	; 0x9b39
  20:	24030000 	strcs	r0, [r3], #-0
  24:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  28:	000e030b 	andeq	r0, lr, fp, lsl #6
  2c:	01130400 	tsteq	r3, r0, lsl #8
  30:	0b0b0e03 	bleq	2c3844 <startup-0x1fd3c7bc>
  34:	0b3b0b3a 	bleq	ec2d24 <startup-0x1f13d2dc>
  38:	13010b39 	movwne	r0, #6969	; 0x1b39
  3c:	0d050000 	stceq	0, cr0, [r5, #-0]
  40:	3a080300 	bcc	200c48 <startup-0x1fdff3b8>
  44:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  48:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  4c:	0600000b 	streq	r0, [r0], -fp
  50:	08030034 	stmdaeq	r3, {r2, r4, r5}
  54:	0b3b0b3a 	bleq	ec2d44 <startup-0x1f13d2bc>
  58:	13490b39 	movtne	r0, #39737	; 0x9b39
  5c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  60:	01070000 	mrseq	r0, (UNDEF: 7)
  64:	01134901 	tsteq	r3, r1, lsl #18
  68:	08000013 	stmdaeq	r0, {r0, r1, r4}
  6c:	13490021 	movtne	r0, #36897	; 0x9021
  70:	00000b2f 	andeq	r0, r0, pc, lsr #22
  74:	49002609 	stmdbmi	r0, {r0, r3, r9, sl, sp}
  78:	0a000013 	beq	cc <startup-0x1fffff34>
  7c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  80:	0b3b0b3a 	bleq	ec2d70 <startup-0x1f13d290>
  84:	13490b39 	movtne	r0, #39737	; 0x9b39
  88:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  8c:	0d0b0000 	stceq	0, cr0, [fp, #-0]
  90:	3a0e0300 	bcc	380c98 <startup-0x1fc7f368>
  94:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  98:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  9c:	0c00000b 	stceq	0, cr0, [r0], {11}
  a0:	0b0b0024 	bleq	2c0138 <startup-0x1fd3fec8>
  a4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  a8:	0f0d0000 	svceq	0x000d0000
  ac:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
  b0:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
  b4:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
  b8:	00001301 	andeq	r1, r0, r1, lsl #6
  bc:	4900050f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sl}
  c0:	10000013 	andne	r0, r0, r3, lsl r0
  c4:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
  c8:	0000193c 	andeq	r1, r0, ip, lsr r9
  cc:	03003411 	movweq	r3, #1041	; 0x411
  d0:	3b0b3a0e 	blcc	2ce910 <startup-0x1fd316f0>
  d4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
  d8:	00180213 	andseq	r0, r8, r3, lsl r2
  dc:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
  e0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  e8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  ec:	01111349 	tsteq	r1, r9, asr #6
  f0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  f4:	01194296 			; <UNDEFINED> instruction: 0x01194296
  f8:	13000013 	movwne	r0, #19
  fc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 100:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 104:	13490b39 	movtne	r0, #39737	; 0x9b39
 108:	00001802 	andeq	r1, r0, r2, lsl #16
 10c:	03003414 	movweq	r3, #1044	; 0x414
 110:	3b0b3a08 	blcc	2ce938 <startup-0x1fd316c8>
 114:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 118:	00180213 	andseq	r0, r8, r3, lsl r2
 11c:	012e1500 			; <UNDEFINED> instruction: 0x012e1500
 120:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 124:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 128:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 12c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 130:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 134:	00130119 	andseq	r0, r3, r9, lsl r1
 138:	00051600 	andeq	r1, r5, r0, lsl #12
 13c:	0b3a0803 	bleq	e82150 <startup-0x1f17deb0>
 140:	0b39053b 	bleq	e41634 <startup-0x1f1be9cc>
 144:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 148:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 14c:	03193f01 	tsteq	r9, #1, 30
 150:	3b0b3a0e 	blcc	2ce990 <startup-0x1fd31670>
 154:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 158:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 15c:	96184006 	ldrls	r4, [r8], -r6
 160:	13011942 	movwne	r1, #6466	; 0x1942
 164:	0b180000 	bleq	60016c <startup-0x1f9ffe94>
 168:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 16c:	19000006 	stmdbne	r0, {r1, r2}
 170:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 174:	0b3a0e03 	bleq	e83988 <startup-0x1f17c678>
 178:	0b39053b 	bleq	e4166c <startup-0x1f1be994>
 17c:	01111349 	tsteq	r1, r9, asr #6
 180:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 184:	01194297 			; <UNDEFINED> instruction: 0x01194297
 188:	1a000013 	bne	1dc <startup-0x1ffffe24>
 18c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 190:	0b3a0e03 	bleq	e839a4 <startup-0x1f17c65c>
 194:	0b39053b 	bleq	e41688 <startup-0x1f1be978>
 198:	01111927 	tsteq	r1, r7, lsr #18
 19c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1a0:	00194297 	mulseq	r9, r7, r2
 1a4:	002e1b00 	eoreq	r1, lr, r0, lsl #22
 1a8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 1b0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 1b4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1b8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1bc:	1c000019 	stcne	0, cr0, [r0], {25}
 1c0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1c4:	0b3a0e03 	bleq	e839d8 <startup-0x1f17c628>
 1c8:	0b39053b 	bleq	e416bc <startup-0x1f1be944>
 1cc:	01111927 	tsteq	r1, r7, lsr #18
 1d0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1d4:	01194297 			; <UNDEFINED> instruction: 0x01194297
 1d8:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
 1dc:	0e03012e 	adfeqsp	f0, f3, #0.5
 1e0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 1e4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 1e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1ec:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1f0:	00130119 	andseq	r0, r3, r9, lsl r1
 1f4:	012e1e00 			; <UNDEFINED> instruction: 0x012e1e00
 1f8:	0b3a0e03 	bleq	e83a0c <startup-0x1f17c5f4>
 1fc:	0b39053b 	bleq	e416f0 <startup-0x1f1be910>
 200:	13491927 	movtne	r1, #39207	; 0x9927
 204:	06120111 			; <UNDEFINED> instruction: 0x06120111
 208:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 20c:	00130119 	andseq	r0, r3, r9, lsl r1
 210:	012e1f00 			; <UNDEFINED> instruction: 0x012e1f00
 214:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 218:	0b3b0b3a 	bleq	ec2f08 <startup-0x1f13d0f8>
 21c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 220:	06120111 			; <UNDEFINED> instruction: 0x06120111
 224:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 228:	00130119 	andseq	r0, r3, r9, lsl r1
 22c:	00052000 	andeq	r2, r5, r0
 230:	0b3a0803 	bleq	e82244 <startup-0x1f17ddbc>
 234:	0b390b3b 	bleq	e42f28 <startup-0x1f1bd0d8>
 238:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 23c:	34210000 	strtcc	r0, [r1], #-0
 240:	3a0e0300 	bcc	380e48 <startup-0x1fc7f1b8>
 244:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 248:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 24c:	22000018 	andcs	r0, r0, #24
 250:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 254:	0b3b0b3a 	bleq	ec2f44 <startup-0x1f13d0bc>
 258:	13490b39 	movtne	r0, #39737	; 0x9b39
 25c:	00001802 	andeq	r1, r0, r2, lsl #16
 260:	3f012e23 	svccc	0x00012e23
 264:	3a0e0319 	bcc	380ed0 <startup-0x1fc7f130>
 268:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 26c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 270:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 274:	96184006 	ldrls	r4, [r8], -r6
 278:	13011942 	movwne	r1, #6466	; 0x1942
 27c:	34240000 	strtcc	r0, [r4], #-0
 280:	3a080300 	bcc	200e88 <startup-0x1fdff178>
 284:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 288:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 28c:	25000018 	strcs	r0, [r0, #-24]	; 0xffffffe8
 290:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 294:	0b3a0e03 	bleq	e83aa8 <startup-0x1f17c558>
 298:	0b390b3b 	bleq	e42f8c <startup-0x1f1bd074>
 29c:	01111927 	tsteq	r1, r7, lsr #18
 2a0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2a4:	01194297 			; <UNDEFINED> instruction: 0x01194297
 2a8:	26000013 			; <UNDEFINED> instruction: 0x26000013
 2ac:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 2b0:	0b3a0e03 	bleq	e83ac4 <startup-0x1f17c53c>
 2b4:	0b390b3b 	bleq	e42fa8 <startup-0x1f1bd058>
 2b8:	01111927 	tsteq	r1, r7, lsr #18
 2bc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2c0:	00194296 	mulseq	r9, r6, r2
 2c4:	002e2700 	eoreq	r2, lr, r0, lsl #14
 2c8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2cc:	0b3b0b3a 	bleq	ec2fbc <startup-0x1f13d044>
 2d0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 2d4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2d8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 2dc:	00000019 	andeq	r0, r0, r9, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000010b8 	strheq	r1, [r0], -r8
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200010c8 	andcs	r1, r0, r8, asr #1
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000007f1 	strdeq	r0, [r0], -r1
   4:	004a0003 	subeq	r0, sl, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	696e654c 	stmdbvs	lr!, {r2, r3, r6, r8, sl, sp, lr}^
  28:	65442f61 	strbvs	r2, [r4, #-3937]	; 0xfffff09f
  2c:	6f746b73 	svcvs	0x00746b73
  30:	4f4d2f70 	svcmi	0x004d2f70
  34:	6f572d50 	svcvs	0x00572d50
  38:	70736b72 	rsbsvc	r6, r3, r2, ror fp
  3c:	2f656361 	svccs	0x00656361
  40:	454d4147 	strbmi	r4, [sp, #-327]	; 0xfffffeb9
  44:	74730000 	ldrbtvc	r0, [r3], #-0
  48:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  4c:	00632e70 	rsbeq	r2, r3, r0, ror lr
  50:	00000001 	andeq	r0, r0, r1
  54:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
  58:	00000002 	andeq	r0, r0, r2
  5c:	05051920 	streq	r1, [r5, #-2336]	; 0xfffff6e0
  60:	5d010513 	cfstr32pl	mvfx0, [r1, #-76]	; 0xffffffb4
  64:	01000302 	tsteq	r0, r2, lsl #6
  68:	00010501 	andeq	r0, r1, r1, lsl #10
  6c:	00100205 	andseq	r0, r0, r5, lsl #4
  70:	f5032000 			; <UNDEFINED> instruction: 0xf5032000
  74:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
  78:	200f0530 	andcs	r0, pc, r0, lsr r5	; <UNPREDICTABLE>
  7c:	052f0505 	streq	r0, [pc, #-1285]!	; fffffb7f <pr_win_msg+0xdfffe9a7>
  80:	0505200f 	streq	r2, [r5, #-15]
  84:	200e052f 	andcs	r0, lr, pc, lsr #10
  88:	052f0505 	streq	r0, [pc, #-1285]!	; fffffb8b <pr_win_msg+0xdfffe9b3>
  8c:	0a05200f 	beq	1480d0 <startup-0x1feb7f30>
  90:	000c052f 	andeq	r0, ip, pc, lsr #10
  94:	20010402 	andcs	r0, r1, r2, lsl #8
  98:	02001605 	andeq	r1, r0, #5242880	; 0x500000
  9c:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
  a0:	0402000a 	streq	r0, [r2], #-10
  a4:	05053c01 	streq	r3, [r5, #-3073]	; 0xfffff3ff
  a8:	200f0522 	andcs	r0, pc, r2, lsr #10
  ac:	a12f0105 			; <UNDEFINED> instruction: 0xa12f0105
  b0:	054f0d05 	strbeq	r0, [pc, #-3333]	; fffff3b3 <pr_win_msg+0xdfffe1db>
  b4:	09052e05 	stmdbeq	r5, {r0, r2, r9, sl, fp, sp}
  b8:	03040200 	movweq	r0, #16896	; 0x4200
  bc:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
  c0:	02002f03 	andeq	r2, r0, #3, 30
  c4:	002f0304 	eoreq	r0, pc, r4, lsl #6
  c8:	2f030402 	svccs	0x00030402
  cc:	02001d05 	andeq	r1, r0, #320	; 0x140
  d0:	052a0304 	streq	r0, [sl, #-772]!	; 0xfffffcfc
  d4:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
  d8:	05053c01 	streq	r3, [r5, #-3073]	; 0xfffff3ff
  dc:	01040200 	mrseq	r0, R12_usr
  e0:	42010520 	andmi	r0, r1, #32, 10	; 0x8000000
  e4:	4f0a055b 	svcmi	0x000a055b
  e8:	05210905 	streq	r0, [r1, #-2309]!	; 0xfffff6fb
  ec:	0a05590b 	beq	156520 <startup-0x1fea9ae0>
  f0:	4001053a 	andmi	r0, r1, sl, lsr r5
  f4:	2f05055b 	svccs	0x0005055b
  f8:	2f01052f 	svccs	0x0001052f
  fc:	68090541 	stmdavs	r9, {r0, r6, r8, sl}
 100:	4b200705 	blmi	801d1c <startup-0x1f7fe2e4>
 104:	05ad0505 	streq	r0, [sp, #1285]!	; 0x505
 108:	01052013 	tsteq	r5, r3, lsl r0
 10c:	0905773d 	stmdbeq	r5, {r0, r2, r3, r4, r5, r8, r9, sl, ip, sp, lr}
 110:	20070568 	andcs	r0, r7, r8, ror #10
 114:	054b1405 	strbeq	r1, [fp, #-1029]	; 0xfffffbfb
 118:	05058207 	streq	r8, [r5, #-519]	; 0xfffffdf9
 11c:	20130575 	andscs	r0, r3, r5, ror r5
 120:	693d0105 	ldmdbvs	sp!, {r0, r2, r8}
 124:	3d670505 	cfstr64cc	mvdx0, [r7, #-20]!	; 0xffffffec
 128:	05201405 	streq	r1, [r0, #-1029]!	; 0xfffffbfb
 12c:	053d3d05 	ldreq	r3, [sp, #-3333]!	; 0xfffff2fb
 130:	05692f01 	strbeq	r2, [r9, #-3841]!	; 0xfffff0ff
 134:	2f3d3e05 	svccs	0x003d3e05
 138:	052f0905 	streq	r0, [pc, #-2309]!	; fffff83b <pr_win_msg+0xdfffe663>
 13c:	05052007 	streq	r2, [r5, #-7]
 140:	3d0c053d 	cfstr32cc	mvfx0, [ip, #-244]	; 0xffffff0c
 144:	772f0105 	strvc	r0, [pc, -r5, lsl #2]!
 148:	053e0505 	ldreq	r0, [lr, #-1285]!	; 0xfffffafb
 14c:	05052011 	streq	r2, [r5, #-17]	; 0xffffffef
 150:	09053d2f 	stmdbeq	r5, {r0, r1, r2, r3, r5, r8, sl, fp, ip, sp}
 154:	5905053d 	stmdbpl	r5, {r0, r2, r3, r4, r5, r8, sl}
 158:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
 15c:	01052f0c 	tsteq	r5, ip, lsl #30
 160:	0505a12f 	streq	sl, [r5, #-303]	; 0xfffffed1
 164:	2011053d 	andscs	r0, r1, sp, lsr r5
 168:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; 15c <startup-0x1ffffea4>
 16c:	053d1805 	ldreq	r1, [sp, #-2053]!	; 0xfffff7fb
 170:	11055905 	tstne	r5, r5, lsl #18
 174:	2f0c0520 	svccs	0x000c0520
 178:	a12f0105 			; <UNDEFINED> instruction: 0xa12f0105
 17c:	3d670505 	cfstr64cc	mvdx0, [r7, #-20]!	; 0xffffffec
 180:	5901053d 	stmdbpl	r1, {r0, r2, r3, r4, r5, r8, sl}
 184:	6705054d 	strvs	r0, [r5, -sp, asr #10]
 188:	01053d3d 	tsteq	r5, sp, lsr sp
 18c:	0a054d59 	beq	1536f8 <startup-0x1feac908>
 190:	000c0567 	andeq	r0, ip, r7, ror #10
 194:	20010402 	andcs	r0, r1, r2, lsl #8
 198:	02002005 	andeq	r2, r0, #5
 19c:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 1a0:	0402000a 	streq	r0, [r2], #-10
 1a4:	05053c01 	streq	r3, [r5, #-3073]	; 0xfffff3ff
 1a8:	01053d30 	tsteq	r5, r0, lsr sp
 1ac:	0d054d59 	stceq	13, cr4, [r5, #-356]	; 0xfffffe9c
 1b0:	3d593d69 	ldclcc	13, cr3, [r9, #-420]	; 0xfffffe5c
 1b4:	4d220105 	stfmis	f0, [r2, #-20]!	; 0xffffffec
 1b8:	05590905 	ldrbeq	r0, [r9, #-2309]	; 0xfffff6fb
 1bc:	11053d07 	tstne	r5, r7, lsl #26
 1c0:	3e1a053d 	mrccc	5, 0, r0, cr10, cr13, {1}
 1c4:	4b660505 	blmi	19815e0 <startup-0x1e67ea20>
 1c8:	4d3d0105 	ldfmis	f0, [sp, #-20]!	; 0xffffffec
 1cc:	053d0505 	ldreq	r0, [sp, #-1285]!	; 0xfffffafb
 1d0:	0a054b0b 	beq	152e04 <startup-0x1fead1fc>
 1d4:	211c052f 	tstcs	ip, pc, lsr #10
 1d8:	053c0905 	ldreq	r0, [ip, #-2309]!	; 0xfffff6fb
 1dc:	0a05490b 	beq	152610 <startup-0x1fead9f0>
 1e0:	3005052e 	andcc	r0, r5, lr, lsr #10
 1e4:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
 1e8:	1c052f0a 	stcne	15, cr2, [r5], {10}
 1ec:	3c090521 	cfstr32cc	mvfx0, [r9], {33}	; 0x21
 1f0:	05490b05 	strbeq	r0, [r9, #-2821]	; 0xfffff4fb
 1f4:	01052e0a 	tsteq	r5, sl, lsl #28
 1f8:	09057830 	stmdbeq	r5, {r4, r5, fp, ip, sp, lr}
 1fc:	20070568 	andcs	r0, r7, r8, ror #10
 200:	6715054b 	ldrvs	r0, [r5, -fp, asr #10]
 204:	05660705 	strbeq	r0, [r6, #-1797]!	; 0xfffff8fb
 208:	13057505 	movwne	r7, #21765	; 0x5505
 20c:	3d010520 	cfstr32cc	mvfx0, [r1, #-128]	; 0xffffff80
 210:	68090569 	stmdavs	r9, {r0, r3, r5, r6, r8, sl}
 214:	4b200705 	blmi	801e30 <startup-0x1f7fe1d0>
 218:	bb050567 	bllt	1417bc <startup-0x1febe844>
 21c:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
 220:	05773d01 	ldrbeq	r3, [r7, #-3329]!	; 0xfffff2ff
 224:	01056705 	tsteq	r5, r5, lsl #14
 228:	05ba1003 	ldreq	r1, [sl, #3]!
 22c:	20720309 	rsbscs	r0, r2, r9, lsl #6
 230:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
 234:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
 238:	2201053d 	andcs	r0, r1, #255852544	; 0xf400000
 23c:	3f05054c 	svccc	0x0005054c
 240:	2011053d 	andscs	r0, r1, sp, lsr r5
 244:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; 238 <startup-0x1ffffdc8>
 248:	3109053d 	tstcc	r9, sp, lsr r5
 24c:	2f1c053d 	svccs	0x001c053d
 250:	053c0b05 	ldreq	r0, [ip, #-2821]!	; 0xfffff4fb
 254:	053d4b09 	ldreq	r4, [sp, #-2825]!	; 0xfffff4f7
 258:	09052f0b 	stmdbeq	r5, {r0, r1, r3, r8, r9, sl, fp, sp}
 25c:	260d0545 	strcs	r0, [sp], -r5, asr #10
 260:	05220505 	streq	r0, [r2, #-1285]!	; 0xfffffafb
 264:	01052011 	tsteq	r5, r1, lsl r0
 268:	0505bd2f 	streq	fp, [r5, #-3375]	; 0xfffff2d1
 26c:	11053d68 	tstne	r5, r8, ror #26
 270:	2f050520 	svccs	0x00050520
 274:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
 278:	052f0905 	streq	r0, [pc, #-2309]!	; fffff97b <pr_win_msg+0xdfffe7a3>
 27c:	05052007 	streq	r2, [r5, #-7]
 280:	11053d4b 	tstne	r5, fp, asr #26
 284:	30130520 	andscc	r0, r3, r0, lsr #10
 288:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
 28c:	053d2109 	ldreq	r2, [sp, #-265]!	; 0xfffffef7
 290:	07053013 	smladeq	r5, r3, r0, r3
 294:	2109054a 	tstcs	r9, sl, asr #10
 298:	300c053d 	andcc	r0, ip, sp, lsr r5
 29c:	cb3d0105 	blgt	f406b8 <startup-0x1f0bf948>
 2a0:	05670505 	strbeq	r0, [r7, #-1285]!	; 0xfffffafb
 2a4:	0105590c 	tsteq	r5, ip, lsl #18
 2a8:	05054d67 	streq	r4, [r5, #-3431]	; 0xfffff299
 2ac:	20140591 	mulscs	r4, r1, r5
 2b0:	593d0505 	ldmdbpl	sp!, {r0, r2, r8, sl}
 2b4:	052f3d2f 	streq	r3, [pc, #-3375]!	; fffff58d <pr_win_msg+0xdfffe3b5>
 2b8:	07053e13 	smladeq	r5, r3, lr, r3
 2bc:	2109054a 	tstcs	r9, sl, asr #10
 2c0:	3013053d 	andscc	r0, r3, sp, lsr r5
 2c4:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
 2c8:	053d2109 	ldreq	r2, [sp, #-265]!	; 0xfffffef7
 2cc:	05773001 	ldrbeq	r3, [r7, #-1]!
 2d0:	593d9105 	ldmdbpl	sp!, {r0, r2, r8, ip, pc}
 2d4:	01053d3d 	tsteq	r5, sp, lsr sp
 2d8:	05054d83 	streq	r4, [r5, #-3459]	; 0xfffff27d
 2dc:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 2e0:	8301053d 	movwhi	r0, #5437	; 0x153d
 2e4:	3e0b054d 	cfsh32cc	mvfx0, mvfx11, #45
 2e8:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
 2ec:	059f2109 	ldreq	r2, [pc, #265]	; 3fd <startup-0x1ffffc03>
 2f0:	09054b0f 	stmdbeq	r5, {r0, r1, r2, r3, r8, r9, fp, lr}
 2f4:	000d053c 	andeq	r0, sp, ip, lsr r5
 2f8:	21030402 	tstcs	r3, r2, lsl #8
 2fc:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
 300:	05490304 	strbeq	r0, [r9, #-772]	; 0xfffffcfc
 304:	04020009 	streq	r0, [r2], #-9
 308:	18055801 	stmdane	r5, {r0, fp, ip, lr}
 30c:	02040200 	andeq	r0, r4, #0, 4
 310:	00050547 	andeq	r0, r5, r7, asr #10
 314:	58010402 	stmdapl	r1, {r1, sl}
 318:	5b510105 	blpl	1440734 <startup-0x1ebbf8cc>
 31c:	3d2f0505 	cfstr32cc	mvfx0, [pc, #-20]!	; 310 <startup-0x1ffffcf0>
 320:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 324:	4b4b4b3d 	blmi	12d3020 <startup-0x1ed2cfe0>
 328:	01054b4b 	tsteq	r5, fp, asr #22
 32c:	07053f3d 	smladxeq	r5, sp, pc, r3	; <UNPREDICTABLE>
 330:	00100569 	andseq	r0, r0, r9, ror #10
 334:	4a010402 	bmi	41344 <startup-0x1ffbecbc>
 338:	02001b05 	andeq	r1, r0, #5120	; 0x1400
 33c:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
 340:	04020028 	streq	r0, [r2], #-40	; 0xffffffd8
 344:	10054a03 	andne	r4, r5, r3, lsl #20
 348:	2e0b054d 	cfsh32cs	mvfx0, mvfx11, #45
 34c:	055a0f05 	ldrbeq	r0, [sl, #-3845]	; 0xfffff0fb
 350:	0e052e14 	mcreq	14, 0, r2, cr5, cr4, {0}
 354:	4b0905e6 	blmi	241af4 <startup-0x1fdbe50c>
 358:	05220e05 	streq	r0, [r2, #-3589]!	; 0xfffff1fb
 35c:	0e054b09 	vmlaeq.f64	d4, d5, d9
 360:	4b090522 	blmi	2417f0 <startup-0x1fdbe810>
 364:	05220e05 	streq	r0, [r2, #-3589]!	; 0xfffff1fb
 368:	0e054b09 	vmlaeq.f64	d4, d5, d9
 36c:	4b090522 	blmi	2417fc <startup-0x1fdbe804>
 370:	05220e05 	streq	r0, [r2, #-3589]!	; 0xfffff1fb
 374:	0e054b09 	vmlaeq.f64	d4, d5, d9
 378:	4b090522 	blmi	241808 <startup-0x1fdbe7f8>
 37c:	05220e05 	streq	r0, [r2, #-3589]!	; 0xfffff1fb
 380:	07054b09 	streq	r4, [r5, -r9, lsl #22]
 384:	3d0e0523 	cfstr32cc	mvfx0, [lr, #-140]	; 0xffffff74
 388:	05670705 	strbeq	r0, [r7, #-1797]!	; 0xfffff8fb
 38c:	0b053d14 	bleq	14f7e4 <startup-0x1feb081c>
 390:	4c14054b 	cfldr32mi	mvfx0, [r4], {75}	; 0x4b
 394:	054b0b05 	strbeq	r0, [fp, #-2821]	; 0xfffff4fb
 398:	05053f27 	streq	r3, [r5, #-3879]	; 0xfffff0d9
 39c:	83280558 			; <UNDEFINED> instruction: 0x83280558
 3a0:	05660505 	strbeq	r0, [r6, #-1285]!	; 0xfffffafb
 3a4:	27057509 	strcs	r7, [r5, -r9, lsl #10]
 3a8:	58050591 	stmdapl	r5, {r0, r4, r7, r8, sl}
 3ac:	05750705 	ldrbeq	r0, [r5, #-1797]!	; 0xfffff8fb
 3b0:	05923d0e 	ldreq	r3, [r2, #3342]	; 0xd0e
 3b4:	059f9105 	ldreq	r9, [pc, #261]	; 4c1 <startup-0x1ffffb3f>
 3b8:	584e0309 	stmdapl	lr, {r0, r3, r8, r9}^
 3bc:	33030105 	movwcc	r0, #12549	; 0x3105
 3c0:	0d057720 	stceq	7, cr7, [r5, #-128]	; 0xffffff80
 3c4:	01053d67 	tsteq	r5, r7, ror #26
 3c8:	0d054d3d 	stceq	13, cr4, [r5, #-244]	; 0xffffff0c
 3cc:	2e05054b 	cfsh32cs	mvfx0, mvfx5, #43
 3d0:	02001005 	andeq	r1, r0, #5
 3d4:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 3d8:	0402001a 	streq	r0, [r2], #-26	; 0xffffffe6
 3dc:	26052e03 	strcs	r2, [r5], -r3, lsl #28
 3e0:	03040200 	movweq	r0, #16896	; 0x4200
 3e4:	0009052e 	andeq	r0, r9, lr, lsr #10
 3e8:	66030402 	strvs	r0, [r3], -r2, lsl #8
 3ec:	02002b05 	andeq	r2, r0, #5120	; 0x1400
 3f0:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
 3f4:	04020035 	streq	r0, [r2], #-53	; 0xffffffcb
 3f8:	41052e03 	tstmi	r5, r3, lsl #28
 3fc:	03040200 	movweq	r0, #16896	; 0x4200
 400:	0009052e 	andeq	r0, r9, lr, lsr #10
 404:	66030402 	strvs	r0, [r3], -r2, lsl #8
 408:	02001d05 	andeq	r1, r0, #320	; 0x140
 40c:	05570304 	ldrbeq	r0, [r7, #-772]	; 0xfffffcfc
 410:	04020005 	streq	r0, [r2], #-5
 414:	01053c01 	tsteq	r5, r1, lsl #24
 418:	0d055b3f 	vstreq	d5, [r5, #-252]	; 0xffffff04
 41c:	2e05054b 	cfsh32cs	mvfx0, mvfx5, #43
 420:	02001005 	andeq	r1, r0, #5
 424:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 428:	0402001a 	streq	r0, [r2], #-26	; 0xffffffe6
 42c:	26052e03 	strcs	r2, [r5], -r3, lsl #28
 430:	03040200 	movweq	r0, #16896	; 0x4200
 434:	0009052e 	andeq	r0, r9, lr, lsr #10
 438:	66030402 	strvs	r0, [r3], -r2, lsl #8
 43c:	02002b05 	andeq	r2, r0, #5120	; 0x1400
 440:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
 444:	04020035 	streq	r0, [r2], #-53	; 0xffffffcb
 448:	41052e03 	tstmi	r5, r3, lsl #28
 44c:	03040200 	movweq	r0, #16896	; 0x4200
 450:	0009052e 	andeq	r0, r9, lr, lsr #10
 454:	66030402 	strvs	r0, [r3], -r2, lsl #8
 458:	02002505 	andeq	r2, r0, #20971520	; 0x1400000
 45c:	05570304 	ldrbeq	r0, [r7, #-772]	; 0xfffffcfc
 460:	04020005 	streq	r0, [r2], #-5
 464:	01053c01 	tsteq	r5, r1, lsl #24
 468:	05055b3f 	streq	r5, [r5, #-2879]	; 0xfffff4c1
 46c:	4b12054c 	blmi	4819a4 <startup-0x1fb7e65c>
 470:	052e1b05 	streq	r1, [lr, #-2821]!	; 0xfffff4fb
 474:	053d2e12 	ldreq	r2, [sp, #-3602]!	; 0xfffff1ee
 478:	12052e1b 	andne	r2, r5, #432	; 0x1b0
 47c:	3e05052e 	cfsh32cc	mvfx0, mvfx5, #30
 480:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
 484:	0a052e07 	beq	14bca8 <startup-0x1feb4358>
 488:	670f052f 	strvs	r0, [pc, -pc, lsr #10]
 48c:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
 490:	053d301a 	ldreq	r3, [sp, #-26]!	; 0xffffffe6
 494:	053d3f16 	ldreq	r3, [sp, #-3862]!	; 0xfffff0ea
 498:	1e053e0f 	cdpne	14, 0, cr3, cr5, cr15, {0}
 49c:	2e23052e 	cfsh64cs	mvdx0, mvdx3, #30
 4a0:	05201605 	streq	r1, [r0, #-1541]!	; 0xfffff9fb
 4a4:	20052007 	andcs	r2, r5, r7
 4a8:	2e18052f 	cfmul64cs	mvdx0, mvdx8, mvdx15
 4ac:	05201605 	streq	r1, [r0, #-1541]!	; 0xfffff9fb
 4b0:	1005300a 	andne	r3, r5, sl
 4b4:	2e0d0567 	cfsh32cs	mvfx0, mvfx13, #55
 4b8:	3d301a05 	vldmdbcc	r0!, {s2-s6}
 4bc:	05412505 	strbeq	r2, [r1, #-1285]	; 0xfffffafb
 4c0:	1c052e2a 	stcne	14, cr2, [r5], {42}	; 0x2a
 4c4:	2e160520 	cfmul64cs	mvdx0, mvdx6, mvdx0
 4c8:	052f2505 	streq	r2, [pc, #-1285]!	; ffffffcb <pr_win_msg+0xdfffedf3>
 4cc:	1c052e2a 	stcne	14, cr2, [r5], {42}	; 0x2a
 4d0:	2e160520 	cfmul64cs	mvdx0, mvdx6, mvdx0
 4d4:	05300e05 	ldreq	r0, [r0, #-3589]!	; 0xfffff1fb
 4d8:	1f052e07 	svcne	0x00052e07
 4dc:	2e18052f 	cfmul64cs	mvdx0, mvdx8, mvdx15
 4e0:	2f201605 	svccs	0x00201605
 4e4:	053e0e05 	ldreq	r0, [lr, #-3589]!	; 0xfffff1fb
 4e8:	22052e1d 	andcs	r2, r5, #464	; 0x1d0
 4ec:	2015052e 	andscs	r0, r5, lr, lsr #10
 4f0:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
 4f4:	18052f1f 	stmdane	r5, {r0, r1, r2, r3, r4, r8, r9, sl, fp, sp}
 4f8:	2016052e 	andscs	r0, r6, lr, lsr #10
 4fc:	052f2505 	streq	r2, [pc, #-1285]!	; ffffffff <pr_win_msg+0xdfffee27>
 500:	1c052e2a 	stcne	14, cr2, [r5], {42}	; 0x2a
 504:	2e160520 	cfmul64cs	mvdx0, mvdx6, mvdx0
 508:	05300505 	ldreq	r0, [r0, #-1285]!	; 0xfffffafb
 50c:	2c034b01 			; <UNDEFINED> instruction: 0x2c034b01
 510:	67050590 			; <UNDEFINED> instruction: 0x67050590
 514:	05920905 	ldreq	r0, [r2, #2309]	; 0x905
 518:	0905201a 	stmdbeq	r5, {r1, r3, r4, sp}
 51c:	1a05222f 	bne	148de0 <startup-0x1feb7220>
 520:	2f090520 	svccs	0x00090520
 524:	201a0522 	andscs	r0, sl, r2, lsr #10
 528:	222f0905 	eorcs	r0, pc, #81920	; 0x14000
 52c:	05201a05 	streq	r1, [r0, #-2565]!	; 0xfffff5fb
 530:	05222f09 	streq	r2, [r2, #-3849]!	; 0xfffff0f7
 534:	0905201a 	stmdbeq	r5, {r1, r3, r4, sp}
 538:	2201052f 	andcs	r0, r1, #197132288	; 0xbc00000
 53c:	3d1b0593 	cfldr32cc	mvfx0, [fp, #-588]	; 0xfffffdb4
 540:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
 544:	07053d0b 	streq	r3, [r5, -fp, lsl #26]
 548:	4b100567 	blmi	401aec <startup-0x1fbfe514>
 54c:	22010530 	andcs	r0, r1, #48, 10	; 0xc000000
 550:	3d1b0568 	cfldr32cc	mvfx0, [fp, #-416]	; 0xfffffe60
 554:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
 558:	07053d0b 	streq	r3, [r5, -fp, lsl #26]
 55c:	4b100567 	blmi	401b00 <startup-0x1fbfe500>
 560:	22010530 	andcs	r0, r1, #48, 10	; 0xc000000
 564:	3d130569 	cfldr32cc	mvfx0, [r3, #-420]	; 0xfffffe5c
 568:	05671705 	strbeq	r1, [r7, #-1797]!	; 0xfffff8fb
 56c:	09054a05 	stmdbeq	r5, {r0, r2, r9, fp, lr}
 570:	671d0521 	ldrvs	r0, [sp, -r1, lsr #10]
 574:	05680b05 	strbeq	r0, [r8, #-2821]!	; 0xfffff4fb
 578:	2205590d 	andcs	r5, r5, #212992	; 0x34000
 57c:	3c1b053d 	cfldr32cc	mvfx0, [fp], {61}	; 0x3d
 580:	05202e05 	streq	r2, [r0, #-3589]!	; 0xfffff1fb
 584:	18053c27 	stmdane	r5, {r0, r1, r2, r5, sl, fp, ip, sp}
 588:	002d0520 	eoreq	r0, sp, r0, lsr #10
 58c:	03020402 	movweq	r0, #9218	; 0x2402
 590:	05053c7a 	streq	r3, [r5, #-3194]	; 0xfffff386
 594:	01040200 	mrseq	r0, R12_usr
 598:	030c0566 	movweq	r0, #50534	; 0xc566
 59c:	01055809 	tsteq	r5, r9, lsl #16
 5a0:	01040200 	mrseq	r0, R12_usr
 5a4:	13057621 	movwne	r7, #22049	; 0x5621
 5a8:	6717053d 			; <UNDEFINED> instruction: 0x6717053d
 5ac:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
 5b0:	1d052109 	stfnes	f2, [r5, #-36]	; 0xffffffdc
 5b4:	680b0567 	stmdavs	fp, {r0, r1, r2, r5, r6, r8, sl}
 5b8:	05590d05 	ldrbeq	r0, [r9, #-3333]	; 0xfffff2fb
 5bc:	1b053d22 	blne	14fa4c <startup-0x1feb05b4>
 5c0:	202e053c 	eorcs	r0, lr, ip, lsr r5
 5c4:	053c2705 	ldreq	r2, [ip, #-1797]!	; 0xfffff8fb
 5c8:	2d052018 	stccs	0, cr2, [r5, #-96]	; 0xffffffa0
 5cc:	02040200 	andeq	r0, r4, #0, 4
 5d0:	053c7a03 	ldreq	r7, [ip, #-2563]!	; 0xfffff5fd
 5d4:	04020005 	streq	r0, [r2], #-5
 5d8:	0c056601 	stceq	6, cr6, [r5], {1}
 5dc:	05580903 	ldrbeq	r0, [r8, #-2307]	; 0xfffff6fd
 5e0:	04020001 	streq	r0, [r2], #-1
 5e4:	05762101 	ldrbeq	r2, [r6, #-257]!	; 0xfffffeff
 5e8:	05054c09 	streq	r4, [r5, #-3081]	; 0xfffff3f7
 5ec:	6e010567 	cfsh32vs	mvfx0, mvfx1, #55
 5f0:	7a030a05 	bvc	c2e0c <startup-0x1ff3d1f4>
 5f4:	2e090520 	cfsh32cs	mvfx0, mvfx9, #16
 5f8:	220a0559 	andcs	r0, sl, #373293056	; 0x16400000
 5fc:	4b2e0905 	blmi	b82a18 <startup-0x1f47d5e8>
 600:	4c220105 	stfmis	f0, [r2], #-20	; 0xffffffec
 604:	054c0905 	strbeq	r0, [ip, #-2309]	; 0xfffff6fb
 608:	01056705 	tsteq	r5, r5, lsl #14
 60c:	030a056e 	movweq	r0, #42350	; 0xa56e
 610:	0905207a 	stmdbeq	r5, {r1, r3, r4, r5, r6, sp}
 614:	0a05592e 	beq	156ad4 <startup-0x1fea952c>
 618:	2e090522 	cfsh32cs	mvfx0, mvfx9, #18
 61c:	2201054b 	andcs	r0, r1, #314572800	; 0x12c00000
 620:	5907054d 	stmdbpl	r7, {r0, r2, r3, r6, r8, sl}
 624:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 628:	05054b07 	streq	r4, [r5, #-2823]	; 0xfffff4f9
 62c:	4b01052e 	blmi	41aec <startup-0x1ffbe514>
 630:	5a0e054c 	bpl	381b68 <startup-0x1fc7e498>
 634:	052e1e05 	streq	r1, [lr, #-3589]!	; 0xfffff1fb
 638:	32052e2d 	andcc	r2, r5, #720	; 0x2d0
 63c:	2025052e 	eorcs	r0, r5, lr, lsr #10
 640:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
 644:	04020043 	streq	r0, [r2], #-67	; 0xffffffbd
 648:	50052e02 	andpl	r2, r5, r2, lsl #28
 64c:	02040200 	andeq	r0, r4, #0, 4
 650:	0055052e 	subseq	r0, r5, lr, lsr #10
 654:	2e020402 	cdpcs	4, 0, cr0, cr2, cr2, {0}
 658:	02004a05 	andeq	r4, r0, #20480	; 0x5000
 65c:	05200204 	streq	r0, [r0, #-516]!	; 0xfffffdfc
 660:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
 664:	3b052002 	blcc	148674 <startup-0x1feb798c>
 668:	02040200 	andeq	r0, r4, #0, 4
 66c:	000e052e 	andeq	r0, lr, lr, lsr #10
 670:	2f030402 	svccs	0x00030402
 674:	02001d05 	andeq	r1, r0, #320	; 0x140
 678:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 67c:	0402006f 	streq	r0, [r2], #-111	; 0xffffff91
 680:	2d052d03 	stccs	13, cr2, [r5, #-12]
 684:	2e3c052f 	cdpcs	5, 3, cr0, cr12, cr15, {1}
 688:	052e4b05 	streq	r4, [lr, #-2821]!	; 0xfffff4fb
 68c:	43052e50 	movwmi	r2, #24144	; 0x5e50
 690:	20250520 	eorcs	r0, r5, r0, lsr #10
 694:	05301b05 	ldreq	r1, [r0, #-2821]!	; 0xfffff4fb
 698:	14052e16 	strne	r2, [r5], #-3606	; 0xfffff1ea
 69c:	30010520 	andcc	r0, r1, r0, lsr #10
 6a0:	3d05054d 	cfstr32cc	mvfx0, [r5, #-308]	; 0xfffffecc
 6a4:	752f0a05 	strvc	r0, [pc, #-2565]!	; fffffca7 <pr_win_msg+0xdfffeacf>
 6a8:	05690505 	strbeq	r0, [r9, #-1285]!	; 0xfffffafb
 6ac:	0a054b07 	beq	1532d0 <startup-0x1feacd30>
 6b0:	2118052f 	tstcs	r8, pc, lsr #10
 6b4:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
 6b8:	0a05490b 	beq	152aec <startup-0x1fead514>
 6bc:	3005052e 	andcc	r0, r5, lr, lsr #10
 6c0:	05750905 	ldrbeq	r0, [r5, #-2309]!	; 0xfffff6fb
 6c4:	0a054c07 	beq	1536e8 <startup-0x1feac918>
 6c8:	211c052f 	tstcs	ip, pc, lsr #10
 6cc:	053c0905 	ldreq	r0, [ip, #-2309]!	; 0xfffff6fb
 6d0:	0a05490b 	beq	152b04 <startup-0x1fead4fc>
 6d4:	3005052e 	andcc	r0, r5, lr, lsr #10
 6d8:	ca760105 	bgt	1d80af4 <startup-0x1e27f50c>
 6dc:	052f0705 	streq	r0, [pc, #-1797]!	; ffffffdf <pr_win_msg+0xdfffee07>
 6e0:	04020009 	streq	r0, [r2], #-9
 6e4:	1d052001 	stcne	0, cr2, [r5, #-4]
 6e8:	01040200 	mrseq	r0, R12_usr
 6ec:	0007053c 	andeq	r0, r7, ip, lsr r5
 6f0:	3c010402 	cfstrscc	mvf0, [r1], {2}
 6f4:	3d2f0305 	stccc	3, cr0, [pc, #-20]!	; 6e8 <startup-0x1ffff918>
 6f8:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 6fc:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 700:	3005053e 	andcc	r0, r5, lr, lsr r5
 704:	05202305 	streq	r2, [r0, #-773]!	; 0xfffffcfb
 708:	05302f05 	ldreq	r2, [r0, #-3845]!	; 0xfffff0fb
 70c:	05052011 	streq	r2, [r5, #-17]	; 0xffffffef
 710:	20130530 	andscs	r0, r3, r0, lsr r5
 714:	052f0505 	streq	r0, [pc, #-1285]!	; 217 <startup-0x1ffffde9>
 718:	05052014 	streq	r2, [r5, #-20]	; 0xffffffec
 71c:	2013052f 	andscs	r0, r3, pc, lsr #10
 720:	082f0105 	stmdaeq	pc!, {r0, r2, r8}	; <UNPREDICTABLE>
 724:	3d1b053e 	cfldr32cc	mvfx0, [fp, #-248]	; 0xffffff08
 728:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
 72c:	07053d0b 	streq	r3, [r5, -fp, lsl #26]
 730:	4b100567 	blmi	401cd4 <startup-0x1fbfe32c>
 734:	22010530 	andcs	r0, r1, #48, 10	; 0xc000000
 738:	05681c05 	strbeq	r1, [r8, #-3077]!	; 0xfffff3fb
 73c:	17053d14 	smladne	r5, r4, sp, r3
 740:	4a050567 	bmi	141ce4 <startup-0x1febe31c>
 744:	05210905 	streq	r0, [r1, #-2309]!	; 0xfffff6fb
 748:	0b05671d 	bleq	15a3c4 <startup-0x1fea5c3c>
 74c:	590d0568 	stmdbpl	sp, {r3, r5, r6, r8, sl}
 750:	053d2205 	ldreq	r2, [sp, #-517]!	; 0xfffffdfb
 754:	2e053c1b 	mcrcs	12, 0, r3, cr5, cr11, {0}
 758:	3c270520 	cfstr32cc	mvfx0, [r7], #-128	; 0xffffff80
 75c:	05201805 	streq	r1, [r0, #-2053]!	; 0xfffff7fb
 760:	0402002d 	streq	r0, [r2], #-45	; 0xffffffd3
 764:	3c7a0302 	ldclcc	3, cr0, [sl], #-8
 768:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 76c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
 770:	58090301 	stmdapl	r9, {r0, r8, r9}
 774:	05681905 	strbeq	r1, [r8, #-2309]!	; 0xfffff6fb
 778:	09054b14 	stmdbeq	r5, {r2, r4, r8, r9, fp, lr}
 77c:	5907054b 	stmdbpl	r7, {r0, r1, r3, r6, r8, sl}
 780:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
 784:	10052e09 	andne	r2, r5, r9, lsl #28
 788:	0b053d59 	bleq	14fcf4 <startup-0x1feb030c>
 78c:	09053d3d 	stmdbeq	r5, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 790:	3105053e 	tstcc	r5, lr, lsr r5
 794:	05870105 	streq	r0, [r7, #261]	; 0x105
 798:	2f2f590d 	svccs	0x002f590d
 79c:	2f300505 	svccs	0x00300505
 7a0:	09052f2f 	stmdbeq	r5, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}
 7a4:	4b0a0531 	blmi	281c70 <startup-0x1fd7e390>
 7a8:	3d2e0905 			; <UNDEFINED> instruction: 0x3d2e0905
 7ac:	053d0b05 	ldreq	r0, [sp, #-2821]!	; 0xfffff4fb
 7b0:	053d2e09 	ldreq	r2, [sp, #-3593]!	; 0xfffff1f7
 7b4:	09053d0b 	stmdbeq	r5, {r0, r1, r3, r8, sl, fp, ip, sp}
 7b8:	2f673d2e 	svccs	0x00673d2e
 7bc:	4d0d054b 	cfstr32mi	mvfx0, [sp, #-300]	; 0xfffffed4
 7c0:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
 7c4:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
 7c8:	1a052e01 	bne	14bfd4 <startup-0x1feb402c>
 7cc:	01040200 	mrseq	r0, R12_usr
 7d0:	2f0d052e 	svccs	0x000d052e
 7d4:	05751405 	ldrbeq	r1, [r5, #-1029]!	; 0xfffffbfb
 7d8:	26052e12 			; <UNDEFINED> instruction: 0x26052e12
 7dc:	01040200 	mrseq	r0, R12_usr
 7e0:	0022052e 	eoreq	r0, r2, lr, lsr #10
 7e4:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 7e8:	052f0d05 	streq	r0, [pc, #-3333]!	; fffffaeb <pr_win_msg+0xdfffe913>
 7ec:	66710309 	ldrbtvs	r0, [r1], -r9, lsl #6
 7f0:	01000902 	tsteq	r0, r2, lsl #18
 7f4:	Address 0x000007f4 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	775f7270 			; <UNDEFINED> instruction: 0x775f7270
   4:	6d5f6e69 	ldclvs	14, cr6, [pc, #-420]	; fffffe68 <pr_win_msg+0xdfffec90>
   8:	61006773 	tstvs	r0, r3, ror r7
   c:	76697463 	strbtvc	r7, [r9], -r3, ror #8
  10:	776f5265 	strbvc	r5, [pc, -r5, ror #4]!
  14:	736f7000 	cmnvc	pc, #0
  18:	69700078 	ldmdbvs	r0!, {r3, r4, r5, r6}^
  1c:	006c6578 	rsbeq	r6, ip, r8, ror r5
  20:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
  24:	72670078 	rsbvc	r0, r7, #120	; 0x78
  28:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  2c:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
  30:	5f657469 	svcpl	0x00657469
  34:	61746164 	cmnvs	r4, r4, ror #2
  38:	6c616200 	sfmvs	f6, 2, [r1], #-0
  3c:	6e69006c 	cdpvs	0, 6, cr0, cr9, cr12, {3}
  40:	00747570 	rsbseq	r7, r4, r0, ror r5
  44:	6f654774 	svcvs	0x00654774
  48:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
  4c:	73610079 	cmnvc	r1, #121	; 0x79
  50:	5f696963 	svcpl	0x00696963
  54:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
  58:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
  5c:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
  60:	6c616200 	sfmvs	f6, 2, [r1], #-0
  64:	6461506c 	strbtvs	r5, [r1], #-108	; 0xffffff94
  68:	6e496564 	cdpvs	5, 4, cr6, cr9, cr4, {3}
  6c:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
  70:	00746365 	rsbseq	r6, r4, r5, ror #6
  74:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
  78:	6a626f5f 	bvs	189bdfc <startup-0x1e764204>
  7c:	00746365 	rsbseq	r6, r4, r5, ror #6
  80:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
  84:	6b00656c 	blvs	1963c <startup-0x1ffe69c4>
  88:	52627965 	rsbpl	r7, r2, #1654784	; 0x194000
  8c:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
  90:	7267006e 	rsbvc	r0, r7, #110	; 0x6e
  94:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  98:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
  9c:	5f657469 	svcpl	0x00657469
  a0:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
  a4:	00646e61 	rsbeq	r6, r4, r1, ror #28
  a8:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
  ac:	675f656c 	ldrbvs	r6, [pc, -ip, ror #10]
  b0:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
  b4:	00797274 	rsbseq	r7, r9, r4, ror r2
  b8:	63656863 	cmnvs	r5, #6488064	; 0x630000
  bc:	6c6f436b 	stclvs	3, cr4, [pc], #-428	; ffffff18 <pr_win_msg+0xdfffed40>
  c0:	7466654c 	strbtvc	r6, [r6], #-1356	; 0xfffffab4
  c4:	45475000 	strbmi	r5, [r7, #-0]
  c8:	54454d4f 	strbpl	r4, [r5], #-3407	; 0xfffff2b1
  cc:	6b005952 	blvs	1661c <startup-0x1ffe99e4>
  d0:	4c627965 			; <UNDEFINED> instruction: 0x4c627965
  d4:	6c617600 	stclvs	6, cr7, [r1], #-0
  d8:	67006575 	smlsdxvs	r0, r5, r5, r6
  dc:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  e0:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
  e4:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
  e8:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
  ec:	006e6565 	rsbeq	r6, lr, r5, ror #10
  f0:	74736572 	ldrbtvc	r6, [r3], #-1394	; 0xfffffa8e
  f4:	00747261 	rsbseq	r7, r4, r1, ror #4
  f8:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
  fc:	00745f38 	rsbseq	r5, r4, r8, lsr pc
 100:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 104:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 108:	5f657469 	svcpl	0x00657469
 10c:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 110:	73657200 	cmnvc	r5, #0, 4
 114:	70737465 	rsbsvc	r7, r3, r5, ror #8
 118:	00646565 	rsbeq	r6, r4, r5, ror #10
 11c:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
 120:	74736552 	ldrbtvc	r6, [r3], #-1362	; 0xfffffaae
 124:	00747261 	rsbseq	r7, r4, r1, ror #4
 128:	70617267 	rsbvc	r7, r1, r7, ror #4
 12c:	5f636968 	svcpl	0x00636968
 130:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 134:	5f6c7000 	svcpl	0x006c7000
 138:	5f6e6977 	svcpl	0x006e6977
 13c:	0067736d 	rsbeq	r7, r7, sp, ror #6
 140:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
 144:	69730054 	ldmdbvs	r3!, {r2, r4, r6}^
 148:	0058657a 	subseq	r6, r8, sl, ror r5
 14c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 150:	6f700059 	svcvs	0x00700059
 154:	73007973 	movwvc	r7, #2419	; 0x973
 158:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 15c:	69640058 	stmdbvs	r4!, {r3, r4, r6}^
 160:	73007972 	movwvc	r7, #2418	; 0x972
 164:	63656c65 	cmnvs	r5, #25856	; 0x6500
 168:	6f635f74 	svcvs	0x00635f74
 16c:	6f72746e 	svcvs	0x0072746e
 170:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 174:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
 178:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
 17c:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
 180:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 184:	654c5c73 	strbvs	r5, [ip, #-3187]	; 0xfffff38d
 188:	5c61696e 			; <UNDEFINED> instruction: 0x5c61696e
 18c:	6b736544 	blvs	1cd96a4 <startup-0x1e32695c>
 190:	5c706f74 	ldclpl	15, cr6, [r0], #-464	; 0xfffffe30
 194:	2d504f4d 	ldclcs	15, cr4, [r0, #-308]	; 0xfffffecc
 198:	6b726f57 	blvs	1c9befc <startup-0x1e364104>
 19c:	63617073 	cmnvs	r1, #115	; 0x73
 1a0:	41475c65 	cmpmi	r7, r5, ror #24
 1a4:	6300454d 	movwvs	r4, #1357	; 0x54d
 1a8:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 1ac:	506c6c6f 	rsbpl	r6, ip, pc, ror #24
 1b0:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 1b4:	70005265 	andvc	r5, r0, r5, ror #4
 1b8:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 1bc:	67695265 	strbvs	r5, [r9, -r5, ror #4]!
 1c0:	61007468 	tstvs	r0, r8, ror #8
 1c4:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 1c8:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 54 <startup-0x1fffffac>
 1cc:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 1d0:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 1d4:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 11a <startup-0x1ffffee6>	; <UNPREDICTABLE>
 1d8:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
 1dc:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 1e0:	73610073 	cmnvc	r1, #115	; 0x73
 1e4:	5f696963 	svcpl	0x00696963
 1e8:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 1ec:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 1f0:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 1f4:	6e007261 	cdpvs	2, 0, cr7, cr0, cr1, {3}
 1f8:	6f706d75 	svcvs	0x00706d75
 1fc:	73746e69 	cmnvc	r4, #1680	; 0x690
 200:	736e7500 	cmnvc	lr, #0, 10
 204:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 208:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
 20c:	47007261 	strmi	r7, [r0, -r1, ror #4]
 210:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
 214:	39203939 	stmdbcc	r0!, {r0, r3, r4, r5, r8, fp, ip, sp}
 218:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
 21c:	31303220 	teqcc	r0, r0, lsr #4
 220:	32303139 	eorscc	r3, r0, #1073741838	; 0x4000000e
 224:	72282035 	eorvc	r2, r8, #53	; 0x35
 228:	61656c65 	cmnvs	r5, r5, ror #24
 22c:	20296573 	eorcs	r6, r9, r3, ror r5
 230:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
 234:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
 238:	622d392d 	eorvs	r3, sp, #737280	; 0xb4000
 23c:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
 240:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
 244:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
 248:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
 24c:	39353737 	ldmdbcc	r5!, {r0, r1, r2, r4, r5, r8, r9, sl, ip, sp}
 250:	2d205d39 	stccs	13, cr5, [r0, #-228]!	; 0xffffff1c
 254:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
 258:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
 25c:	6f6c666d 	svcvs	0x006c666d
 260:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
 264:	733d6962 	teqvc	sp, #1605632	; 0x188000
 268:	2074666f 	rsbscs	r6, r4, pc, ror #12
 26c:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
 270:	613d6863 	teqvs	sp, r3, ror #16
 274:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
 278:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
 27c:	4f2d2067 	svcmi	0x002d2067
 280:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
 284:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
 288:	67003939 	smladxvs	r0, r9, r9, r3
 28c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 290:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 294:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 298:	67726100 	ldrbvs	r6, [r2, -r0, lsl #2]!
 29c:	50740063 	rsbspl	r0, r4, r3, rrx
 2a0:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 2a4:	65686300 	strbvs	r6, [r8, #-768]!	; 0xfffffd00
 2a8:	65526b63 	ldrbvs	r6, [r2, #-2915]	; 0xfffff49d
 2ac:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 2b0:	79654b74 	stmdbvc	r5!, {r2, r4, r5, r6, r8, r9, fp, lr}^
 2b4:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 2b8:	6a626f5f 	bvs	189c03c <startup-0x1e763fc4>
 2bc:	5f746365 	svcpl	0x00746365
 2c0:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 2c4:	72670064 	rsbvc	r0, r7, #100	; 0x64
 2c8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2cc:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
 2d0:	61697469 	cmnvs	r9, r9, ror #8
 2d4:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
 2d8:	736e7500 	cmnvc	lr, #0, 10
 2dc:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 2e0:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 2e4:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
 2e8:	5f79616c 	svcpl	0x0079616c
 2ec:	6e303035 	mrcvs	0, 1, r3, cr0, cr5, {1}
 2f0:	69640073 	stmdbvs	r4!, {r0, r1, r4, r5, r6}^
 2f4:	61007872 	tstvs	r0, r2, ror r8
 2f8:	00766772 	rsbseq	r6, r6, r2, ror r7
 2fc:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 300:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 304:	64646150 	strbtvs	r6, [r4], #-336	; 0xfffffeb0
 308:	004c656c 	subeq	r6, ip, ip, ror #10
 30c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 310:	6f675f69 	svcvs	0x00675f69
 314:	79786f74 	ldmdbvc	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 318:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 31c:	70615f74 	rsbvc	r5, r1, r4, ror pc
 320:	73610070 	cmnvc	r1, #112	; 0x70
 324:	5f696963 	svcpl	0x00696963
 328:	61656c63 	cmnvs	r5, r3, ror #24
 32c:	63735f72 	cmnvs	r3, #456	; 0x1c8
 330:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 334:	61726700 	cmnvs	r2, r0, lsl #14
 338:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 33c:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 340:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 344:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 348:	4f740074 	svcmi	0x00740074
 34c:	70006a62 	andvc	r6, r0, r2, ror #20
 350:	6c646461 	cfstrdvs	mvd6, [r4], #-388	; 0xfffffe7c
 354:	66654c65 	strbtvs	r4, [r5], -r5, ror #24
 358:	72670074 	rsbvc	r0, r7, #116	; 0x74
 35c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 360:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 364:	645f6461 	ldrbvs	r6, [pc], #-1121	; 36c <startup-0x1ffffc94>
 368:	00617461 	rsbeq	r7, r1, r1, ror #8
 36c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 370:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 374:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
 378:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 37c:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 380:	73610072 	cmnvc	r1, #114	; 0x72
 384:	5f696963 	svcpl	0x00696963
 388:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 38c:	6174735f 	cmnvs	r4, pc, asr r3
 390:	00737574 	rsbseq	r7, r3, r4, ror r5
 394:	63656863 	cmnvs	r5, #6488064	; 0x630000
 398:	6c6f436b 	stclvs	3, cr4, [pc], #-428	; 1f4 <startup-0x1ffffe0c>
 39c:	68676952 	stmdavs	r7!, {r1, r4, r6, r8, fp, sp, lr}^
 3a0:	72670074 	rsbvc	r0, r7, #116	; 0x74
 3a4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 3a8:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 3ac:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 3b0:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
 3b4:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 3b8:	61726400 	cmnvs	r2, r0, lsl #8
 3bc:	65730077 	ldrbvs	r0, [r3, #-119]!	; 0xffffff89
 3c0:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 3c4:	00646565 	rsbeq	r6, r4, r5, ror #10
 3c8:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff98d <pr_win_msg+0xdfffe7b5>
 3cc:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 3d0:	6e654c2f 	cdpvs	12, 6, cr4, cr5, cr15, {1}
 3d4:	442f6169 	strtmi	r6, [pc], #-361	; 3dc <startup-0x1ffffc24>
 3d8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 3dc:	4d2f706f 	stcmi	0, cr7, [pc, #-444]!	; 228 <startup-0x1ffffdd8>
 3e0:	572d504f 	strpl	r5, [sp, -pc, asr #32]!
 3e4:	736b726f 	cmnvc	fp, #-268435450	; 0xf0000006
 3e8:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
 3ec:	4d41472f 	stclmi	7, cr4, [r1, #-188]	; 0xffffff44
 3f0:	74732f45 	ldrbtvc	r2, [r3], #-3909	; 0xfffff0bb
 3f4:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 3f8:	00632e70 	rsbeq	r2, r3, r0, ror lr
 3fc:	70617267 	rsbvc	r7, r1, r7, ror #4
 400:	5f636968 	svcpl	0x00636968
 404:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 408:	6165725f 	cmnvs	r5, pc, asr r2
 40c:	63007964 	movwvs	r7, #2404	; 0x964
 410:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 414:	6a626f5f 	bvs	189c198 <startup-0x1e763e68>
 418:	00746365 	rsbseq	r6, r4, r5, ror #6
 41c:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 420:	6f65675f 	svcvs	0x0065675f
 424:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 428:	65640079 	strbvs	r0, [r4, #-121]!	; 0xffffff87
 42c:	5f79616c 	svcpl	0x0079616c
 430:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
 434:	616d0073 	smcvs	53251	; 0xd003
 438:	61006b73 	tstvs	r0, r3, ror fp
 43c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 440:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 444:	645f6574 	ldrbvs	r6, [pc], #-1396	; 44c <startup-0x1ffffbb4>
 448:	00617461 	rsbeq	r7, r1, r1, ror #8
 44c:	616c6564 	cmnvs	ip, r4, ror #10
 450:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 454:	006f7263 	rsbeq	r7, pc, r3, ror #4
 458:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 45c:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 460:	5f657469 	svcpl	0x00657469
 464:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 468:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 46c:	61007265 	tstvs	r0, r5, ror #4
 470:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 474:	6165725f 	cmnvs	r5, pc, asr r2
 478:	61645f64 	cmnvs	r4, r4, ror #30
 47c:	73006174 	movwvc	r6, #372	; 0x174
 480:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 484:	73007075 	movwvc	r7, #117	; 0x75
 488:	5f776f68 	svcpl	0x00776f68
 48c:	75736572 	ldrbvc	r6, [r3, #-1394]!	; 0xfffffa8e
 490:	5000746c 	andpl	r7, r0, ip, ror #8
 494:	454a424f 	strbmi	r4, [sl, #-591]	; 0xfffffdb1
 498:	6d005443 	cfstrsvs	mvf5, [r0, #-268]	; 0xfffffef4
 49c:	5f65766f 	svcpl	0x0065766f
 4a0:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 4a4:	6d007463 	cfstrsvs	mvf7, [r0, #-396]	; 0xfffffe74
 4a8:	0065766f 	rsbeq	r7, r5, pc, ror #12
 4ac:	6a626f74 	bvs	189c284 <startup-0x1e763d7c>
 4b0:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 4b4:	00596465 	subseq	r6, r9, r5, ror #8
 4b8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 4bc:	6e695f69 	cdpvs	15, 6, cr5, cr9, cr9, {3}
 4c0:	61007469 	tstvs	r0, r9, ror #8
 4c4:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 4c8:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 4cc:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 4d0:	Address 0x000004d0 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000044 	andeq	r0, r0, r4, asr #32
  30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  34:	41018e02 	tstmi	r1, r2, lsl #28
  38:	0000070d 	andeq	r0, r0, sp, lsl #14
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000054 	andcs	r0, r0, r4, asr r0
  48:	00000036 	andeq	r0, r0, r6, lsr r0
  4c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  50:	41018e02 	tstmi	r1, r2, lsl #28
  54:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  58:	00000007 	andeq	r0, r0, r7
  5c:	0000001c 	andeq	r0, r0, ip, lsl r0
  60:	00000000 	andeq	r0, r0, r0
  64:	2000008a 	andcs	r0, r0, sl, lsl #1
  68:	0000002a 	andeq	r0, r0, sl, lsr #32
  6c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  70:	41018e02 	tstmi	r1, r2, lsl #28
  74:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  78:	00000007 	andeq	r0, r0, r7
  7c:	00000018 	andeq	r0, r0, r8, lsl r0
  80:	00000000 	andeq	r0, r0, r0
  84:	200000b4 	strhcs	r0, [r0], -r4
  88:	00000012 	andeq	r0, r0, r2, lsl r0
  8c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  90:	41018e02 	tstmi	r1, r2, lsl #28
  94:	0000070d 	andeq	r0, r0, sp, lsl #14
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	200000c6 	andcs	r0, r0, r6, asr #1
  a4:	00000042 	andeq	r0, r0, r2, asr #32
  a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ac:	41018e02 	tstmi	r1, r2, lsl #28
  b0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  b4:	00000007 	andeq	r0, r0, r7
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	20000108 	andcs	r0, r0, r8, lsl #2
  c4:	00000048 	andeq	r0, r0, r8, asr #32
  c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  cc:	41018e02 	tstmi	r1, r2, lsl #28
  d0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  d4:	00000007 	andeq	r0, r0, r7
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000000 	andeq	r0, r0, r0
  e0:	20000150 	andcs	r0, r0, r0, asr r1
  e4:	00000030 	andeq	r0, r0, r0, lsr r0
  e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ec:	41018e02 	tstmi	r1, r2, lsl #28
  f0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  f4:	00000007 	andeq	r0, r0, r7
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	20000180 	andcs	r0, r0, r0, lsl #3
 104:	00000034 	andeq	r0, r0, r4, lsr r0
 108:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 10c:	41018e02 	tstmi	r1, r2, lsl #28
 110:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 114:	00000007 	andeq	r0, r0, r7
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	00000000 	andeq	r0, r0, r0
 120:	200001b4 			; <UNDEFINED> instruction: 0x200001b4
 124:	00000040 	andeq	r0, r0, r0, asr #32
 128:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 12c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 130:	180e4101 	stmdane	lr, {r0, r8, lr}
 134:	00070d41 	andeq	r0, r7, r1, asr #26
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	00000000 	andeq	r0, r0, r0
 140:	200001f4 	strdcs	r0, [r0], -r4
 144:	00000040 	andeq	r0, r0, r0, asr #32
 148:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 14c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 150:	180e4101 	stmdane	lr, {r0, r8, lr}
 154:	00070d41 	andeq	r0, r7, r1, asr #26
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	00000000 	andeq	r0, r0, r0
 160:	20000234 	andcs	r0, r0, r4, lsr r2
 164:	0000002a 	andeq	r0, r0, sl, lsr #32
 168:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 16c:	41018e02 	tstmi	r1, r2, lsl #28
 170:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 174:	00000007 	andeq	r0, r0, r7
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	00000000 	andeq	r0, r0, r0
 180:	2000025e 	andcs	r0, r0, lr, asr r2
 184:	0000002a 	andeq	r0, r0, sl, lsr #32
 188:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 18c:	41018e02 	tstmi	r1, r2, lsl #28
 190:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 194:	00000007 	andeq	r0, r0, r7
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	00000000 	andeq	r0, r0, r0
 1a0:	20000288 	andcs	r0, r0, r8, lsl #5
 1a4:	00000036 	andeq	r0, r0, r6, lsr r0
 1a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ac:	41018e02 	tstmi	r1, r2, lsl #28
 1b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1b4:	00000007 	andeq	r0, r0, r7
 1b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1bc:	00000000 	andeq	r0, r0, r0
 1c0:	200002be 			; <UNDEFINED> instruction: 0x200002be
 1c4:	0000002c 	andeq	r0, r0, ip, lsr #32
 1c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1cc:	41018e02 	tstmi	r1, r2, lsl #28
 1d0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1d4:	00000007 	andeq	r0, r0, r7
 1d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1dc:	00000000 	andeq	r0, r0, r0
 1e0:	200002ea 	andcs	r0, r0, sl, ror #5
 1e4:	0000003e 	andeq	r0, r0, lr, lsr r0
 1e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ec:	41018e02 	tstmi	r1, r2, lsl #28
 1f0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 1f4:	00000007 	andeq	r0, r0, r7
 1f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1fc:	00000000 	andeq	r0, r0, r0
 200:	20000328 	andcs	r0, r0, r8, lsr #6
 204:	0000005c 	andeq	r0, r0, ip, asr r0
 208:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 20c:	41018e02 	tstmi	r1, r2, lsl #28
 210:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 214:	00000007 	andeq	r0, r0, r7
 218:	0000001c 	andeq	r0, r0, ip, lsl r0
 21c:	00000000 	andeq	r0, r0, r0
 220:	20000384 	andcs	r0, r0, r4, lsl #7
 224:	00000050 	andeq	r0, r0, r0, asr r0
 228:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 22c:	41018e02 	tstmi	r1, r2, lsl #28
 230:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 234:	00000007 	andeq	r0, r0, r7
 238:	0000001c 	andeq	r0, r0, ip, lsl r0
 23c:	00000000 	andeq	r0, r0, r0
 240:	200003d4 	ldrdcs	r0, [r0], -r4
 244:	00000050 	andeq	r0, r0, r0, asr r0
 248:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 24c:	41018e02 	tstmi	r1, r2, lsl #28
 250:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 254:	00000007 	andeq	r0, r0, r7
 258:	0000001c 	andeq	r0, r0, ip, lsl r0
 25c:	00000000 	andeq	r0, r0, r0
 260:	20000424 	andcs	r0, r0, r4, lsr #8
 264:	0000005a 	andeq	r0, r0, sl, asr r0
 268:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 26c:	41018e02 	tstmi	r1, r2, lsl #28
 270:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 274:	00000007 	andeq	r0, r0, r7
 278:	0000001c 	andeq	r0, r0, ip, lsl r0
 27c:	00000000 	andeq	r0, r0, r0
 280:	2000047e 	andcs	r0, r0, lr, ror r4
 284:	0000006e 	andeq	r0, r0, lr, rrx
 288:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 28c:	41018e02 	tstmi	r1, r2, lsl #28
 290:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 294:	00000007 	andeq	r0, r0, r7
 298:	0000001c 	andeq	r0, r0, ip, lsl r0
 29c:	00000000 	andeq	r0, r0, r0
 2a0:	200004ec 	andcs	r0, r0, ip, ror #9
 2a4:	00000094 	muleq	r0, r4, r0
 2a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2ac:	41018e02 	tstmi	r1, r2, lsl #28
 2b0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 2b4:	00000007 	andeq	r0, r0, r7
 2b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2bc:	00000000 	andeq	r0, r0, r0
 2c0:	20000580 	andcs	r0, r0, r0, lsl #11
 2c4:	0000002a 	andeq	r0, r0, sl, lsr #32
 2c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2cc:	41018e02 	tstmi	r1, r2, lsl #28
 2d0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2d4:	00000007 	andeq	r0, r0, r7
 2d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2dc:	00000000 	andeq	r0, r0, r0
 2e0:	200005aa 	andcs	r0, r0, sl, lsr #11
 2e4:	0000006e 	andeq	r0, r0, lr, rrx
 2e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2ec:	41018e02 	tstmi	r1, r2, lsl #28
 2f0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2f4:	00000007 	andeq	r0, r0, r7
 2f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2fc:	00000000 	andeq	r0, r0, r0
 300:	20000618 	andcs	r0, r0, r8, lsl r6
 304:	00000046 	andeq	r0, r0, r6, asr #32
 308:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 30c:	41018e02 	tstmi	r1, r2, lsl #28
 310:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 314:	00000007 	andeq	r0, r0, r7
 318:	0000001c 	andeq	r0, r0, ip, lsl r0
 31c:	00000000 	andeq	r0, r0, r0
 320:	2000065e 	andcs	r0, r0, lr, asr r6
 324:	00000046 	andeq	r0, r0, r6, asr #32
 328:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 32c:	41018e02 	tstmi	r1, r2, lsl #28
 330:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 334:	00000007 	andeq	r0, r0, r7
 338:	0000001c 	andeq	r0, r0, ip, lsl r0
 33c:	00000000 	andeq	r0, r0, r0
 340:	200006a4 	andcs	r0, r0, r4, lsr #13
 344:	00000068 	andeq	r0, r0, r8, rrx
 348:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 34c:	41018e02 	tstmi	r1, r2, lsl #28
 350:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 354:	00000007 	andeq	r0, r0, r7
 358:	00000018 	andeq	r0, r0, r8, lsl r0
 35c:	00000000 	andeq	r0, r0, r0
 360:	2000070c 	andcs	r0, r0, ip, lsl #14
 364:	0000005c 	andeq	r0, r0, ip, asr r0
 368:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 36c:	41018e02 	tstmi	r1, r2, lsl #28
 370:	0000070d 	andeq	r0, r0, sp, lsl #14
 374:	00000020 	andeq	r0, r0, r0, lsr #32
 378:	00000000 	andeq	r0, r0, r0
 37c:	20000768 	andcs	r0, r0, r8, ror #14
 380:	00000198 	muleq	r0, r8, r1
 384:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 388:	86048505 	strhi	r8, [r4], -r5, lsl #10
 38c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 390:	380e4101 	stmdacc	lr, {r0, r8, lr}
 394:	00070d41 	andeq	r0, r7, r1, asr #26
 398:	0000001c 	andeq	r0, r0, ip, lsl r0
 39c:	00000000 	andeq	r0, r0, r0
 3a0:	20000900 	andcs	r0, r0, r0, lsl #18
 3a4:	00000020 	andeq	r0, r0, r0, lsr #32
 3a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3ac:	41018e02 	tstmi	r1, r2, lsl #28
 3b0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3b4:	00000007 	andeq	r0, r0, r7
 3b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3bc:	00000000 	andeq	r0, r0, r0
 3c0:	20000920 	andcs	r0, r0, r0, lsr #18
 3c4:	00000058 	andeq	r0, r0, r8, asr r0
 3c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3cc:	41018e02 	tstmi	r1, r2, lsl #28
 3d0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3d4:	00000007 	andeq	r0, r0, r7
 3d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3dc:	00000000 	andeq	r0, r0, r0
 3e0:	20000978 	andcs	r0, r0, r8, ror r9
 3e4:	00000058 	andeq	r0, r0, r8, asr r0
 3e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3ec:	41018e02 	tstmi	r1, r2, lsl #28
 3f0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3f4:	00000007 	andeq	r0, r0, r7
 3f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3fc:	00000000 	andeq	r0, r0, r0
 400:	200009d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 404:	00000118 	andeq	r0, r0, r8, lsl r1
 408:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 40c:	41018e02 	tstmi	r1, r2, lsl #28
 410:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 414:	00000007 	andeq	r0, r0, r7
 418:	0000001c 	andeq	r0, r0, ip, lsl r0
 41c:	00000000 	andeq	r0, r0, r0
 420:	20000ae8 	andcs	r0, r0, r8, ror #21
 424:	00000058 	andeq	r0, r0, r8, asr r0
 428:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 42c:	41018e02 	tstmi	r1, r2, lsl #28
 430:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 434:	00000007 	andeq	r0, r0, r7
 438:	0000001c 	andeq	r0, r0, ip, lsl r0
 43c:	00000000 	andeq	r0, r0, r0
 440:	20000b40 	andcs	r0, r0, r0, asr #22
 444:	00000034 	andeq	r0, r0, r4, lsr r0
 448:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 44c:	41018e02 	tstmi	r1, r2, lsl #28
 450:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 454:	00000007 	andeq	r0, r0, r7
 458:	0000001c 	andeq	r0, r0, ip, lsl r0
 45c:	00000000 	andeq	r0, r0, r0
 460:	20000b74 	andcs	r0, r0, r4, ror fp
 464:	00000034 	andeq	r0, r0, r4, lsr r0
 468:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 46c:	41018e02 	tstmi	r1, r2, lsl #28
 470:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 474:	00000007 	andeq	r0, r0, r7
 478:	00000020 	andeq	r0, r0, r0, lsr #32
 47c:	00000000 	andeq	r0, r0, r0
 480:	20000ba8 	andcs	r0, r0, r8, lsr #23
 484:	00000080 	andeq	r0, r0, r0, lsl #1
 488:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 48c:	86048505 	strhi	r8, [r4], -r5, lsl #10
 490:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 494:	300e4101 	andcc	r4, lr, r1, lsl #2
 498:	00070d41 	andeq	r0, r7, r1, asr #26
 49c:	00000020 	andeq	r0, r0, r0, lsr #32
 4a0:	00000000 	andeq	r0, r0, r0
 4a4:	20000c28 	andcs	r0, r0, r8, lsr #24
 4a8:	00000080 	andeq	r0, r0, r0, lsl #1
 4ac:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 4b0:	86048505 	strhi	r8, [r4], -r5, lsl #10
 4b4:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 4b8:	300e4101 	andcc	r4, lr, r1, lsl #2
 4bc:	00070d41 	andeq	r0, r7, r1, asr #26
 4c0:	00000020 	andeq	r0, r0, r0, lsr #32
 4c4:	00000000 	andeq	r0, r0, r0
 4c8:	20000ca8 	andcs	r0, r0, r8, lsr #25
 4cc:	00000048 	andeq	r0, r0, r8, asr #32
 4d0:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 4d4:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 4d8:	41018e02 	tstmi	r1, r2, lsl #28
 4dc:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 4e0:	00000007 	andeq	r0, r0, r7
 4e4:	00000020 	andeq	r0, r0, r0, lsr #32
 4e8:	00000000 	andeq	r0, r0, r0
 4ec:	20000cf0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 4f0:	00000048 	andeq	r0, r0, r8, asr #32
 4f4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 4f8:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 4fc:	41018e02 	tstmi	r1, r2, lsl #28
 500:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 504:	00000007 	andeq	r0, r0, r7
 508:	0000001c 	andeq	r0, r0, ip, lsl r0
 50c:	00000000 	andeq	r0, r0, r0
 510:	20000d38 	andcs	r0, r0, r8, lsr sp
 514:	0000002a 	andeq	r0, r0, sl, lsr #32
 518:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 51c:	41018e02 	tstmi	r1, r2, lsl #28
 520:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 524:	00000007 	andeq	r0, r0, r7
 528:	0000001c 	andeq	r0, r0, ip, lsl r0
 52c:	00000000 	andeq	r0, r0, r0
 530:	20000d62 	andcs	r0, r0, r2, ror #26
 534:	00000064 	andeq	r0, r0, r4, rrx
 538:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 53c:	41018e02 	tstmi	r1, r2, lsl #28
 540:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 544:	00000007 	andeq	r0, r0, r7
 548:	0000001c 	andeq	r0, r0, ip, lsl r0
 54c:	00000000 	andeq	r0, r0, r0
 550:	20000dc6 	andcs	r0, r0, r6, asr #27
 554:	000000a2 	andeq	r0, r0, r2, lsr #1
 558:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 55c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 560:	280e4101 	stmdacs	lr, {r0, r8, lr}
 564:	00070d41 	andeq	r0, r7, r1, asr #26
 568:	00000018 	andeq	r0, r0, r8, lsl r0
 56c:	00000000 	andeq	r0, r0, r0
 570:	20000e68 	andcs	r0, r0, r8, ror #28
 574:	00000046 	andeq	r0, r0, r6, asr #32
 578:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 57c:	41018e02 	tstmi	r1, r2, lsl #28
 580:	0000070d 	andeq	r0, r0, sp, lsl #14
 584:	00000018 	andeq	r0, r0, r8, lsl r0
 588:	00000000 	andeq	r0, r0, r0
 58c:	20000eae 	andcs	r0, r0, lr, lsr #29
 590:	0000004e 	andeq	r0, r0, lr, asr #32
 594:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 598:	41018e02 	tstmi	r1, r2, lsl #28
 59c:	0000070d 	andeq	r0, r0, sp, lsl #14
 5a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5a4:	00000000 	andeq	r0, r0, r0
 5a8:	20000efc 	strdcs	r0, [r0], -ip
 5ac:	00000034 	andeq	r0, r0, r4, lsr r0
 5b0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5b4:	41018e02 	tstmi	r1, r2, lsl #28
 5b8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5bc:	00000007 	andeq	r0, r0, r7
 5c0:	00000020 	andeq	r0, r0, r0, lsr #32
 5c4:	00000000 	andeq	r0, r0, r0
 5c8:	20000f30 	andcs	r0, r0, r0, lsr pc
 5cc:	0000007c 	andeq	r0, r0, ip, ror r0
 5d0:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 5d4:	86048505 	strhi	r8, [r4], -r5, lsl #10
 5d8:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 5dc:	300e4101 	andcc	r4, lr, r1, lsl #2
 5e0:	00070d41 	andeq	r0, r7, r1, asr #26
 5e4:	00000020 	andeq	r0, r0, r0, lsr #32
 5e8:	00000000 	andeq	r0, r0, r0
 5ec:	20000fac 	andcs	r0, r0, ip, lsr #31
 5f0:	0000005c 	andeq	r0, r0, ip, asr r0
 5f4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 5f8:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 5fc:	41018e02 	tstmi	r1, r2, lsl #28
 600:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 604:	00000007 	andeq	r0, r0, r7
 608:	0000001c 	andeq	r0, r0, ip, lsl r0
 60c:	00000000 	andeq	r0, r0, r0
 610:	20001008 	andcs	r1, r0, r8
 614:	000000c0 	andeq	r0, r0, r0, asr #1
 618:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 61c:	41018e02 	tstmi	r1, r2, lsl #28
 620:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 624:	00000007 	andeq	r0, r0, r7
